interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSQW/bMAyF7/sVBM924DRL0/hWbJeiGDAM2w6dh0CWaFurLHkS3SYL/N8HxXE6
        JEV3fSL5vkdxj1phjrIRLNvOpKv77x/1k951n+9ddvul3PZWlQ9aPzwtP33ABF35iyQfO2bStZ0h
        1s5igtKTYFKYz69vlvOrbH11nWDrFBnMse44XcyWKfe+dGm2yOaYYB9ETZjvsfOu7XjD7pFswHy1
        yBJ8mX3S5+/XCbJjYU7SzWo9JCgbpyUFzH/ssaUwjfXOEOYoQtCBheUI6SyTjQH2hQUAKJAb19cN
        hwJzOIrHB9pyFAu8g9C43igILDxDuQNPQmlbAzcE2gb2vYyoYTOf8Zah0oagD1NFrN4cNOnaVlg1
        KzD518qTCM5qW49+XxuCSvvAEJg60AHYQW8V+ZhDXbhCFJ8bwbHU0+9ee1LgKmjp3Kkzwo4mKXwL
        9DpetIviW/GKwqZwa4XZ/aHXgRQx+Vbb8dnSdowTzoik16ylDu20a0t0ICAbeh+bBcPdm/Gr3pgd
        lFQ5T9B5J4ni75xnDx2Jx8nlWRvz//88RJ0VOI4Zkulojou6uBkrWhodTks9gxC+Pj+18SHWvrRf
        bn2COIAceQo74JBgpa0OzWa8IswxsOswQW0VbTHPhp/Du78AAAD//wMAkQcHPekDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd79f3c2c3f1cf8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:00 GMT
      Function-Execution-Id:
      - h2mufrk2l7cu
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '13819'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d7c15365df02e08917ea2d36286351d1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - 4ef7df1b85539d9729a5bde99f2adccf
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"This task_id
      is 2314 Read the file instructions_2.txt\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '294'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOvU7DMBRGd57C+mYnyl9T8FwGYGKpCghVrnPbmDp2ZN9CRJV3R5WgrEc6R+cM
        20HB9JrNMLps+bRefYf18+Z1+ly6cWMXL9MwPVapdfoeEmH3QYZ/jdyEYXTENnhImEiaqYMq29tF
        WRV3TS0xhI4cFA4jZ3W+yPgUdyEr6qKExCnpA0GdMcYwjLzlcCSfoJpbif/0FZetBAfW7kraZpYw
        fbCGEtTbGQOlv2YMjqCgU7KJtefLYfBM/nKvBet0FF+We/GwElVdNoKDiKQ7wT2JvXUkrE8cT+by
        kLZVzhPnmCX21tvUbyPpFDwUEocREtZ3NEEV8/t88wMAAP//AwCScmWKVgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd79fa8bcb7231b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:05 GMT
      Function-Execution-Id:
      - h2mufwhbbhla
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2108'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 865fe12c42ff22960f6a4c0dc842f836;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89455'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - 991c92c2fb6da4e13327f2c940e8c8b9
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["This task_id is 2314 Read the file instructions_2.txt"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '132'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAAA//8DADVKtPXjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd79fbb6c202c97-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:06 GMT
      Function-Execution-Id:
      - h2mu06zsevu3
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '35'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 81c892e520f585f4261253a7f0e2698e
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 707cec9a32204a81c6c7d058f4286c2b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task with ID 2314 to read the file instructions_2.txt.", "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '133'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SaW6+6Srfm799PsbJu7TciIDVYd3IQEbAKAVE7nQ544iAihyqgdvZ37+B/Z3f3
        zUwmMnVKjfGM3/NU/ce//vrr7zotHrf+73/++vudd/3f/2O+dk/65O9//vqf//rrr7/++o/fz//v
        zkeVPu73/PP63f57Mf/cH+Pf//wl/PeV/3vTP3/97bj5nq7sIypKds5yKFlKaPPUVNQHOfggH5OJ
        efS9TvtX9UkAHN9kzmJpF1N2G2IYFm/G3LG5pvViv5lAfC8sou0vcTGaRQAIycqdGKt+akcagghL
        nayJjd+JMam8D9BX4C3NX1bZjt5Ke8GkmpxtGOvb3muPAfRsUxI3pini3n6TwPJwHhh+81c7mDdn
        Alm/E4KRprqTeA1N0Om3Y5ZpdMZgvpEO7uKoEeexX7U0fE+NKpvrEC+WvV8MjlJNINtXgSq7tVsM
        2+yLlf5+5sQ+ni8uT1hDQc3WW3LYS37B3R0a0DLIDKJ94yxlW/8yIOFli0R/0Hs6ieAE6Pf86Fax
        095tvEbJy15ihtj04SD5VwfFuS5Sto7MUArh+EIFsVI8Peg9HJO9v1GP/s1ieNkP7RQ05g2+0oER
        k2pj0SeHr6BcrP2JeUOptQLLrgOoaXsixjCcOWVLWwD7YGyJs/QZ4qFbB+sv7CTija5eCKYnWCi6
        pAqNN++kmK7YAlD97MF2j3RjSCpp6nWLIGfb771Oh2sUdkpmGDdGrqln0CzTHbVs3yVx7l7ChzDT
        c4TqT4jVwyl3RzizBZALHsl2WS+L2tOOipphN8Qr17imrD5kD1BfYs0sOLcuF2OkQwAqJvuvsjcE
        NxduMDr6yFxluy0mts4viEWvlnln/kK8lgUfoZU1MW2/I6GU9cOgavvHgJdpZSMGARNBMZIz2Vc3
        qR2cQXyBdvdTFtyCa1qwPjBRsRsISawkD5m5TRVI88MSB7tTwfm1MX1A3U7A4lM6tt3K3DVwPA8B
        OTi2hIbrR8Dr8S7eGHmCXtDauvqA1OFN9vv2bIwLbtsolQeZ6eCOBVvRdwTxbVXgtfvu2tG4xKba
        P1hCNl2M+SRJ8gPQWB1pRrQSUSa4gBTPcoglr68tz65ujdp8+SZ2n52LYVEdX0C2zwKrzaLhfR2j
        BBn6lDPt7UE4hXgTqdFLOxLz7FTtqErXBVLMm8C2dozdkbYfB8anZ2B6X67CkZFiA/P74yZffd2p
        lvR82ZwFgzlwcDhn1tFSh1ETiLMLnEL0NBmjQDimRF/EOBzpclfD4VNy3OxqM+XZtrXhMDaYbQ+h
        jYaAxwlUr+hCBSZG7QgDVVC2fb7I7mq37QS7gwDVacnxUu6NkNfG6EG9j5Z4Ib+vbk+XpIE6GjSG
        H5WYfpPQDiBdbj5Mf+wg7GrSYrQMlYbg7F6hPttwXRU/ekGhP59D6ixjWZnWRxuX53HXCuyw9qHZ
        vdbs4KZe+BRTU4CjLTDiCtmej6ale/B7Xm5MEe9fWLVQonsnormB53JRMCa4R6SksVXqhSi51w2a
        9ZEcqvrojtfniqI7DRbEXV0no/4mtQVPol6ZZZwv4ehhO4eoXF8JfpESTeaxxBC/xQzLx5tTjOoj
        1EGtbYG48S5BLFmMF/guCoSF08loh/AcBFA/K0r06piFXbbOB9Srix0zg0PLqffcAJjf85bg/ETc
        8XWTHHCu1pbhBf6kjEWhDXtR65mBVI2PoqBYYMp+TfaHfV1wVSzm5/2Q5vVv+Oi11wBURdHxqn6/
        jCmJFB0On4qzTV8OnKuF4chrkO50/JyvxvRZUhv6SfCZ7a/2LTcfgQBRFW6Yhcw4nbbVNQbt2T1Z
        mIi74vsang06BoqDl7KVp10WoxLurHnThXrsCh4+7Qmya3kiOvilMdFS9eH4NB+MCLWPhsXy8oC4
        s3zME1IV79dY+uB59o4lu6ApaoPGDRxewYfoC5WFnajpN2jcuGRE2u9S6aqJNarunz2VQ5m23eUm
        xYpmb/csuL9QSBfnrw3Pk90xL6Q4bdVQeIC2bbdzP1G3CZLVhIL2/SEmRx93+gzPmyLHvsKsnVsU
        /HW/P6D9kohO1k7jf+ZNfQlyQmb95x8VW0CSesU8T1oYv/mmGu7txI5u0BnT4iDLyrireqZn7wOf
        6qLR0XeRIeIsJR912cGNkC41De6308Kl29vX+qNH9wMYhhREhgLtILS00vityDy7MUHZiileJnpv
        dCLxXlBKm+pP/Q3qWRdgdLeYHA4n3RhUurLVQ961xNGWsTEGH2wpsz6QfaniUKgfowzCKrKJ6Ydi
        2iZnOYG4M312MuVbMQzVgMFciSXBi5Wd8uvxEClf+ROz7bJ+tlN4cy6KVSvV3M+3kM9/j5j1fc/z
        /O4yeikB7hVMxB6h4MNi9fLUeX7gSfmcWn6NiwliVo7k2LplyGsZfPgzLzz/bgzJVXEQUqc30XNZ
        T+vAu19AqHYp210ypxjEPlPgsPT2JNV3r3S8eidPkY+XiWrvXDSGb/Ky1ElcmViRbTn9gNkPECXS
        Aou7qWxH89p0wJ51zgzpiENabxQR7q/eYBYsPKOXKlmH4+5p43qsGmN8hVgGxekKkl6R5RaLk2aq
        Uf/xiJMd+3BMDpkAVr7QmDGeL2jaBrII1UnlVCXO1h1CYz0hIa8UhrffzJjMt0nh3ooKmfsrZFur
        fkGCky/O7680nDy3voFzWByYHR77dkr6AaBEMsVThnbFcLlJEaD1Qpn1sAsn5/ahUDVmTaXLdOSj
        u05jJAThQPsWvYsukAURGsffka3LOj7VURrD03Mpla6PdzhljZKgr7gPmDkcM3eo6aaCvrFvJMjl
        PByu+4eAqtI22P6rfN1Zj/6sD+1tvS9GOCwpCoQwZftSTtHkua8HMldCyYLHXXTb4A42ZPvQpd/D
        sC/GLRwVdX6dZhlXwzGx3Qu4SFCJ31jPkInHW4VmPWE76XJKWf1OJ8iVZcWIXmpG98kkE8RGxFha
        1yaSoK0GIBdvJEacpuF0VarL7/thhPRNyDI0Cesn/kzMeexP7fihfYcQ712yk3bYGEPt2P14km1r
        YoWT+Bhf4Dh2jpEsFW33chedsofjjWy+z0XYLW5fH+IPtqky88j4+oCOBFn8UpR4fcq2IGOIhigl
        3kkzDF6nbY7meUxHd30wOFV2OYzm6skOc7+LLMiSH1+yve0duEDjm6Ko5WnPjFtSFEyyZVD2C/bC
        ahuV7ShVgy7LV91mDjwCd9yeLgoomJhs031Eg4XWXkAzH9Ipl/OUi+scq/d1t2H2d1ognk1OCahy
        CW2j4IwGdWGIarPL11iY+u2s1ysf5PTmEQud1KI3i2SBZn7Hy3VkppOkvSb1x1enfTm4dXKqI5Dj
        0iROYfkhDzVZh8PbYXRdby13VGvXh4MSaeRChc4Y6q2ygEiVYxIsw73BTXFrI0k9Av7pbR9GCkZ1
        oHMaLJXG/dMPunR6MftoDXy6YrxYT6rFyf79BM4Tww1g6VtLpnnk41Iqn4Y/fM6HfYz678XeQL2P
        l8RaEx4ycVdGUJ+EB9H175COgVKV6NlNOnOe9YNPTrB8IPVjnelCv4l8Ej93B+Wy0LFr3j84f52X
        G3Q8xXjWD5oyaKsJHc9TwJyZx2iSXB6QabCkn3Vd8mGrvBx4ZrXLYjm4FGOySC1I9nnGzIO7aLuZ
        T2GuL7Z7fnN3cotk+ukTIddtEAomVy301DSJVnKxRMwwSQAHwQqY/qBqOm6fmqMeExyTLc4aPi2G
        l6lOSs3ItWWdO27hqqC5/uli5i0mLe0a/fRxKZy/LU9aX1EFMXnjqvD9YmXcPjISWRcTnwsbd/XR
        rQAaW34Rj3+sgm8TTYenH5RYyTaWK2bGOgG+czCuFvkO8evuZKHyXS+ZZZV5277E6KIWWv6i4sxT
        wxVFFHIUDGR3k8p0DMuNjNLiXTGtvlbFH14iYfTFQ2M9U25GTQkXV7tjde+zYhxK34GrcCb4I45C
        +E1ucg7y4WORnXT/IGo2rY3yzx4x93y6IWYSzwEb73Jm6OmLD5/72wc0hjvibFJl5gvnhuLzMsUo
        Wl/QuPD9xZ/11C2ao58+qNMyl8j2fTlxYRU+IgjG1ZmQi9C6/NU+X8g6mYhtJmkbjhl8bVDbxZNY
        mpe2g5dcRFi2+YYYTy8Lx+B+ElH/5BJzV8xF1COTLx+i1ZtYRj+543bKahiNUWfpzLeT8Y1z9Ey3
        R+YdhAufWJBd/uj1T7+mj0IoZLfNlbhRcOazvlFku98HOeBDk1JRLESI6t4krjAdjTJ5+hV8JcLw
        2zWuIWcPNwFSdv6vP9IRzN1NOeIxwqKyQ8WgUtWBQ8FttrU/q/ArmRsBnt6e4t0gLXgf9qOjWPt2
        jeVjPyLGxkIBa/9dE0uNtpx/b4MDFy81KXRDnE5m0zpQdkuXubKvtx1LUYRmPWGu0lmtoK4nHcTv
        7UPcM9wR/QznG1g7siJESmgxv5+t1gmtmI6wWLAkOC5UUxh25LG87VPhszqX8OwGfeZLqxjER+j9
        5vmsj7E7DSu/Un2hV8icRxSDmkY1muctVh4JcM42UwP6e7nG4355blkmZTqk/VnEw9GU2v6z66gi
        XD9A9Ax92sEl6UKZuHYlBzJWxrDq7j6a/QEzzvotnT6hRZEdBiuivb1bOtYHwwG9KFa4KaYCja/q
        c0FV+yBYeTVe2nhkCpSl/awpBK8u/K4SmiNBGjyikfqNppA1MkpifcO2h6/eivV381Ct2L1QZacV
        KQ/dl6/2Q+IxQ/rUblcXLkVIykVm0rObSi6FCVlBLTFy3U4hZbvuBapQh+zg7V4zD59vcBV5yDa1
        fE8Zw0BheavudFWdhpb/5m1/P3G2u9ru7FePC5Vs3im+TVeznfXIhjiPNlQ64xWfrvuVA9bx6NOh
        bVKjz/w9RYntKMTKl/uUZ/5rA/e3cmL73FLRj/dRFQprbET+o53YciOq8+9EK6PIpbVTWPDjDcck
        27ar3WuCak96MfdydsKJsckBV8Xlj/9C7qY3H+kdqbF8/nzC7opXPjyNJ2KWxqGdkm0RgXY0d3SR
        UWzQYXUpUbl+NBTm/IKKm8gGQ6Nb/HXfXtuEpm+px/3aY06ObYNnj9xS42f4YR5FoduKgjGgFKqC
        WBq/tdwL5AacQ2uwnS5nBQ+LpIS4HEy62j7vxVBPwQXSpf4hJravaRPEBah1dJNInr171IXGOCh1
        0lXk+v1qaOa7SOm/UkDsLjy1g+fXFdzXdEO2FYxty6yjCc+Y7DHwT1V0WSbfALzOJq4Ye0hIrGvz
        4xt2az0lpdthX6KRqDHTPNF2eYI3Dsw8TW40Clz+009jiys8OjCFoxmZAayXYcY2cf9GLItGAbTL
        JfyTPw5s0bx+vEsXi1WdfoyBdr98hkrGUy9Gb7XP0ay/bHM0zy3/WGICVvXIiReZdsrNRyKCbHcL
        dnROx7T76efl1mFGONwNfn3dNvCnHvLkkY5b2baQyp4bqpgvj4+iV96gXd4NthPMrzGyKcE/3sHT
        TZvcdluMPiwb54rFrczcWd9sVDkSovM8M8TtLTOhyqcbXrnX0JjMhduAvuYlXd4dkwuO+bR+eSMW
        TcMzBrPxRBBQ0FO+nt7uEMSHBsjdWuPjnvqp+OPh2X/j1xntEH3xeAP9JPr0Yzz1VlxlIv2tFztU
        gRROYXs0YZlikcptrBR0MdQWjHr3Ztbr0LYjK4yX6q6UCzFW1thSKt8nILnvMX1Z+uH42XUdGv0g
        I5r3fvGRnfY3iATbYvdm0SBqnkQdpuF9ItZy+HJeD5cGNCc7MPv82YVDxqbXr7+Jx+QD4mYXKeAr
        yy/uPZq5Q3KdHFWnbceshyKiKUF8A5Iawn/568SvsZLLYkcOjZW3fbBtc5QvxiMx5LIwePApLzDz
        MLP9J0Ms2BQXEL7IYocf34qBLqvDuv8QxxSrltfM3ED1aCs61myT8m2y12GZeuKPx1N+la0Irmty
        nvV8U4hix0vInqI5z/sNWolrQ4Gy8BDbzzwqXlZksQ6UzCFE5If2p49gVmuNmb5O3HWyCE3YC6qP
        p63zcadVSwEcXZg7qi/D0eUgw3iBiNhtrLRUdLwLxDSPcMc/VTtkF9tDo8F1CsHIi6GuGwfNfpGO
        nlgb87y9oMuOTHO/r9PvMfvUyPHKiulZZBXcjPJKSYfdlu2d+sj5zE8o/a5OzGNyz3liZ51qXZcG
        Ho6Da1D2am+/+sAS4lrBkrN8gSp1t2z248YQKvsHRGOnk3gbv4pJFUZZObTJgznaZWVQ9eUN6OLj
        gWnOaQynoX3Fqnq6VsSOcN0ObG2aklgnDrOU+yqcqHwf4KcXc96GGjWdFsBOb/vnH43vK8QKVKG4
        xgoUZjuCcnYgNKs3O5Qcu3O91SBHzoZpezqE40fHARr4U57z8awd4SB1SDZRSCw9ubf91RInaA5T
        TbQ5r+I/vmhM/UKlpNuFq7C0FUWAJsJr2+s5Zbdjg5bG58WI6HUFrb+bG5SrxR4v0VMzVqH0TSCd
        hBCv9jhOhxqcGo6HTiJEOH+L0tydGrTm2wMjD7pphWRam6jk+ZbC/P8N7n71AiC2R5JX44WjKaIH
        mkTJJJb+9A0xE/IGNbbyYpahPYrus4leoHeHmpBr2rmdaee+Ovtx9sunJ9XrAojy+4n8+GdU81L8
        5a/MHpZfY6QXq4HZ/9Fmt25bUSzcGM16OvPujksD1INyWOI9MVJK0EB98QaCeHnTITpqfEqkrwf3
        99ul4LfftN9qQwI/vzrzTTFKlbxRyA59mL5hCarrrQKgZ7uRLjZy6nKwpRIuJqfssIyeLk/sb6cE
        60fPDNHowpGunhcUv+DKNGw6Bk/WyQLix8Eh1r2LUDf7PRSzaiTb9462TIy5DkK1TYlhfHU0voZn
        jdbLY8YsZZcWU+K/MPSNc8N9G5ntn3zDFRcrqu6loejDyVmAo4sxOfz8QEDSCeI83vzJM0cz8nwU
        l5NJ3HMrFu01USsQupPDtsR2+WgS5YEu3tVk+H6JwknVYYPcbp0QfBvDdJh5Ap4PGZgxLta8/fGD
        Wd5UEp6/ajoFagfI7FYVlk9ukQ7ZwY2BPNwYy8PuxbtffjyvDzuUO6UdqUlttB/3b1pcA5dP9WYS
        UGElNaaofrgs064RtGiR/8lfWvUTgTr7KWKtRSEd2Ul7qJm2WBLHOFxm/TAuf+aBfzTPBRULI/71
        OxYN7dGKTnUGqPFhx/QdlGjy6tGDZ9a4xA6iidNsuAiQnZ0js57SvN9xogn4krsgWBlWiIenS67M
        +x0YPZ/a7OfuJkSqEjPTK+/FkLiyBYkRTLQeoUA8yLeg9sEBiD3sNnxyRe7DUXsVbPteipxvi3WA
        jvpnQ5V5f2IKg8CBYfFheCT1+896/NHP9bsk4fR6rl6QdscrwWZnhVJyHhJ4aobEtBKd3EkNHAqi
        /2xw9dsPc81VAtqj0THNdr3BZn5HJjs2sz4nxRgmlwY6R9nOeUth9B93kcN3PDpYxUXpjmKKbECv
        pcowXM1QFOtsgkk5v4kFvcmn1cV6rAOkjHSNLSPsk+G4Aa4HFtlExwxJWZ3Ev/z7V7/t6JmX4I+/
        NC4QuO1sVGDZL0wcz/6Kznkz2FFzIxgMp50++/iBzotiQdcfQy7GTHI6KDvVZc5C7xH9VMxDT+ZZ
        bBOcO3dQ5f6Cjv7DIhiiEXXiNvKRrliU6KbQp8x8JAKSnZVMcA6+MWa+1kF/dJ/4KfdF+id/C6jW
        Un4SknTc1mOiKp7psMfObkLu3WoZqhvJ8ftTTEW/8kUfopqZ87zs23Fh1d0vryD6LVinQ61ljmpW
        SCNEkTfGW3wXF8hHEpPdzS/CXiVeBPN+Hx3LNwoHZmo6kONSJ3snkI1ONZoYDlRZ/pnH/ZU/MJr9
        NkWX+tjyYIwaYBq/HxZwLdPR2O8u6txPZPumrJ39OqB5/+nP/tJAk5k3v9+BzPsraPiYVQzZTb+S
        nS5rRS8p/gvS4lP9Wa9hu9pTqOyrxDb8YYWruT6QdloQ9vs+IwP9Bn2C/qtep2suWLA8X12CleRm
        cG95MZU5r2CbSNaReBWjcm0/Lh3Rl+HX5e7CeIDLTg+qyPYl5WE96kiYZJMdf/nnrPfoUH99thm/
        RfjTP3W/5CoNrJ2GVur2ZkKPcgNL4+FSDIl1bNS/f6cC/vNff/31v34nDKr6/njPBwP6x9j/+7+P
        Cvw7uSf/FgTx30z8cxKBdsnr8fc//3UI4e9vW1ff/n/3dfn4dH//89dK+XPc4O++7pP3/3v9X/On
        /ee//g8AAAD//wMA7+9eyeMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd79fbffb286398-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:07 GMT
      Function-Execution-Id:
      - h2mukmqjm9ul
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '321'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0859e9ac3d8e9f206c664b076836b6f6
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e9042743a5963e4f2d39ca9ac8cd4db2
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I understand
      the instructions fully before proceeding.\",\n        \"speak\": \"I will start
      by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4365'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST2/bMAzF7/sUAs9y4DTJlvi2Q4EVO6zt/mBAPQSqxNhaJMqQaDRd4O8+OE6a
        zRm2XR+fHn+kuAdroABdK9a+cdmb91+u5352+9EsP9zQTH292y7Nvb2+v7t950FCePyOmo8vJjr4
        xiHbQCBBR1SMBorp6+ViepWv5ksJPhh0UEDVcDabLDJu42PI8lk+BQltUhVCsYcmBt/wmsMWKUGx
        mq8knLNf9Okil8CBlTtL+WrVSdB1sBoTFA978JhOuTE4hAJUSjaxIu4pAzFSP8G+JCGEKIHr0FY1
        pxIKcRSPBdxxL5ZwIwjRCA4iojKCaxSWEsdW94BpfTXhHYuNdSjaZKk6OHrr+qDp4L0iMylB/pof
        UaVAlqqhyae/pPbYylISyhjbV5X7zSu4VizOmJvgXHgaN2ycoqFXJj4n/DPl/0xZlpSJt6Tc8w+8
        8Ik+xCBj9JaGMuGORWJs0ohIR8tW2+THe0ZKbcTTWC0ZjP0XXlKJTevcs3jETYgomhg0orFUjWdP
        DartqcuTde7fX0mHDQ4hnTydy3FNF9dCyuOQ/7LSEYKK1fjIhkLvPT+/xDlBHECOPCV10EnYWLKp
        Xg+nBAUkDg1IsGRwB0Xefete/QQAAP//AwAswnpX5AMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd79fc9daa96306-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:26 GMT
      Function-Execution-Id:
      - h2muchw43cw7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17514'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9e66a6ba1f75a0310bf60c5be7d45e51
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85993'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.671s
      X-Request-Id:
      - 519baf55e68f852647f68ba6b40f27cb
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Read the file
      instructions_3.txt\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '273'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOwWvCMBhH7/srwu+cllatm7kp87Dt4mWDMYfE9NNmpklIvg5B+r8PYXPXB+/x
        LrAtFEyn2fTRFfcvb+vNqXt93Dx1z3o92a/eQx76VdfE5QISYf9Fhn+N0oQ+OmIbPCRMIs3UQtXz
        h6aeVIv5QqIPLTkoHCMX07IpeEj7UFTTqobEkPWRoC6IKfSRdxxO5DPUrJb4T99wPZPgwNrdSNOM
        EqYL1lCG+rigp/zXTMERFHTONrP2fD0Mnslf77VobSLD9psEB5FIt0KLHMnYgzXiYB0Jo52jVmxh
        feY0mOtL3k1LPvMWJUaJg/U2d7tEOgcPhcwhQsL6ls5Q1fg53v0AAAD//wMAomiF8WABAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a04d1c542a99-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:32 GMT
      Function-Execution-Id:
      - h2mua7jxcsol
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2627'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ed9a06c1a823797c626d8fac27ef9fbb;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89461'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 359ms
      X-Request-Id:
      - 89b95d811fa8f61694b444f8a84edb1c
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Read the file instructions_3.txt"], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '111'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a0639cea297a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:33 GMT
      Function-Execution-Id:
      - h2muxozjh88k
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '255'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3ef355deee0168fe327a320937d91cd5
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 1289e33dad2648754f2dd91fa43c625e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a directive to read a specific file called \"instructions_3.txt\".",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '143'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        2iFt/vvxf3zv9p//+H8AAAD//wMABS/kJ+MgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a06a8b5a2d94-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:34 GMT
      Function-Execution-Id:
      - h2mup1st1i30
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 06ba65c3169de47eae201ffe4127398d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - a40c762bdfe41013219591926ed9fa8c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I understand
      the instructions fully before proceeding.\",\n        \"speak\": \"I will start
      by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I need
      to read the instructions_2.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_2.txt file contains additional instructions that I need to
      follow.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file\\n- Analyze the instructions and determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5319'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySW4/TMBCF3/kV1jwnVZu2u2zeQIsEQrxwWXEJqlx7mpjaY8ueaFuq/HeUpqWQ
        IuB1zvGZb8ZzAKOhBNVIVi7Y/Pb1w4uHgj9tg/JYf168vL9/89zR/uPbm8U7yMCvv6Hi04uJ8i5Y
        ZOMJMlARJaOGcnbzdDkrpne3ywyc12ihhDpwPp8sc27j2ufT+XQGGbRJ1gjlAUL0LvCK/RYpQTmb
        LYoMLuEXYTnNgD1LeykVd0WXgWq8UZig/HIAh+kcHL1FKEGmZBJL4h7TEyP1IxwqEkKICrjxbd1w
        qqAUp+JJwB33xQpeCULUgr2IKLXgBoWhxLFVPWBazSe8Y7ExFkWbDNVHR29dHWvKOydJTyrIfs2P
        KJMnQ/XQ5P1fUntsaSgJqbXpVWl/8wpuJIsL5sZb6x/HDYOVNPTKxYeEf6b8nymrinLxjKTdf8cr
        n+hDNDJGZ2iQCXcsEmNIIyIVDRtlkhvvGSm1Ec9jtaQx9l94TSU2rbV7scaNjyhC9ApRG6rHs6eA
        cnvu8mis/fdX0nGDQ0iXnc/ltKarayHpcMj/udIRgoz1+MgGofdenl/jnCGOICeeijroMtgYMqlZ
        DacEJST2ATIwpHEH5bT72j35AQAA//8DAJiI1TLlAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a072afe91253-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:53 GMT
      Function-Execution-Id:
      - h2muv8z3ruo0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17764'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dcb69b51f3aa083ee78db58bfd28ce76
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85987'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.675s
      X-Request-Id:
      - f91ea15c250ddc7c00babe1f15f957b1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Write the
      task_id into the file output.txt Shutdown\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '292'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOy2rDMBBF9/0KMWvF2M6jifZZdVFCX5RSgiJNbCX2jGKNmkDwv5dAH9vDvYdz
        heDBgGutuD52k/uH1/Vps2qeji/rt8c8fc71flMvz6dDfP8CDbw7oJOfR+G4jx1KYAINbkAr6MFU
        i+W8qsvVaqGhZ48dGGiiTKbFfCJ52PGknJYVaMjJNgjmCnHgPspW+IiUwMxmGv7Vf7haahAW2/2R
        RT1qcC0HhwnMxxV6TL/OgTsEAzalkMSS3AqZBOlWHyjJkJ0EapSwOg9BUEmLSmw6boNXgYSVVfvQ
        oSLbo1ecJWYp5CLKkr+NSaU2i+czFTBq2AcKqd0OaBMTGEjCETQE8ngBU46f4903AAAA//8DADIh
        0fFuAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a0f679b86320-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:09:59 GMT
      Function-Execution-Id:
      - h2mu0j75tknq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2369'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f7cc33a4978115a3bb1337b6c20647cc;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89455'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - 2e8fbb267f580a1fd6a204be565b211f
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Write the task_id into the file output.txt Shutdown"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '130'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RXy66rvJKen6dY2lNaCoGAi3/GLUCAYAK59ggCIYEQrjbg8/KtrH3UrZ4wMCXZ
        Vf5u/ve/fn7+NGmZ38c///z8eb+G8c9/fdeyZEz+/PPz3//6+fn5+ffv9/9V5nWaZ9nrU/yW//58
        fbJ8/vPPD/+/K/9X9M/PH6nZxXSXojdib6WfkOu9XiSxJLEf8016BTOQC7pPkNnPa0IGdB71kRps
        NNnaqEcTdiVZBWLH++USq+WCGn3tBPLxURjTcAkSWRXSEe9XkKXTSUM1XHP3iXe1+uqnuCIhejtS
        RI0e5n7KPmkIPHKu9KJoo0fqpb5DGF0UsjFl0+Or6OMi9hQcalvtpp+zU6QDvtQdmZ7XXTrhIhug
        V84i9S4kZmzX8gWMlith7WXaxoS0fQLqUVKxnZRdzFhwSSBp9IF63igZY8EXAfBRogeQ2Ia3rjbT
        gt5OahAuJn1MYXBVSDYFCviwTrx57nIX+VnHY+fpa956Ntoa+YKUYH8D55jpXNNBXqo9je5D6ZEG
        owncdXwh82OjxSLnhSFITfui+/Zzi8lyP09Q5uaRetoNo/l+CB15DFIVW7OkGwzzeIPMx5XS7c0j
        aIGHMcEWQ4uT46dEtDIugArYrPGZOARNdGpytMhqhSO/NMu1qhQC+iTlKViAUw2h9iQZwe680IBu
        qnJ6jGdL7gwAmtcG7peLzq7o0fMD1jIw0oXlDwLh1a2wrexCNjd3VYb2wKnYvtPQm986EeDQEsDb
        fFN4rExeCai+25IZ5nM5G/XbBFuzclJwmoCW8+ejw9W+3PHuGAnlctHRFTxwbbo9JWm/uMKuketW
        bcj6lKB+8tbhC8HrfSWi1W7KhcyHCgQTNlS7X05s8vLAQvbs7rCzc/t+4oq0lun14FHcIOZNexQf
        4UXUFmfzdSiHOuRlsNz9SB0c7OOl9qQNsqYaY+8Ua+XgZGKCstd9DtCneKJ5rl46codSJZPyepVd
        M/E+kj+RFyi9aRjscpArFElng/Tt8Cn7JHSOsnO/rPCu8ZuUfO9LkT+hh2/OAbEZBV4HvFcDEQuR
        oXmwLRM+JUNY3eeXXnQc3pSFtV4SXs1QOdmRmgOxsR6gUozi5abtXHCPkUTtbmjY/L5JIURdKOCM
        9qlHunGnA5qqO7b9eu6XQLeP8J1nwIX7FZt4IJZUUTeje7Mu+uGozN1qPvQ2EV/o1JPTu7agLpZn
        IPNSwRa6jnPpy3/SmcqtH1L9ClBk64baZlDHE9ZyH86+igP5Sj/9vI/sBilt7lBcMRo3jzG3oIlP
        F2wTmGKStFwD70PfkrYyq3LOLxFIbYwO1G+OZTkVTpeDfPW5oHk8cLmE6skCuK01Im2AY22r7M6g
        i88nPomH2pvDKD/D52bFwXde/eexPhyVu+PqpHiKSj/7n4MD02vbU7U82vG8c3QAR3c+pP7w25Sh
        iGtAqn2dRqun4PX7vdmBglBDTqk9MNqsWAIX7rPFtpv0bDY7Agi17EwgwRabrroboSr8FBiTxown
        a6PoKGYfm+5DzmOjMH066LM5pZofiHHfVcoCVOQ/FDfVq1+kjXOHV6Z7gRCXpbFsEGvAui49EVLW
        9c24RAMUlfsIBDjRlB6mI4HEVgN62LMKzbyxidC3f2xwhxOaC74JwCxuQUCLvu9p/9AaFNrNCW/7
        0EuX1+FxRr948YfKM9jHqDvIXvlMTYOzDSFxVy7ywLFpCNsNo4ve5NAebwXdXY0d45/zA9CgyDN2
        3ZdtzNruwcNXD+nu7u376frcTeD51p2qt4/gDfZxl0DW+S3NzFotBeniqLJUBzq21+EN0cOucBST
        Aw9vsRUZy8LaALy1eMAuL6lsfWDnCfaEKISDBqVjpb5ltOw4iXCLH3isUZa7khsPTAPYfbwlyroz
        XIIyCd592MftupYasHfnd7DiJKtfP9KjANmyUglfiRAPx229oIvJH2ikSknKOH47wXgKrK9f6f1w
        fe4WuNbXNmiL9GR0tTdv0MYyh2BRE8tbbw05ga6PQrpN7QGNt2Ung8a/bKpmjsZ4R9QX0AlzcSAc
        ZzSVwRghzR9Kat4dtSTWWuZAefoajSZlmy7VvnLRSckO1I3kJSXbpG6Aj646toyoQHNzdzaQauxJ
        ZiHbG1QMiCmbj4RitzRCtOjRS5a9vATs7rZZumjiuUCwkQOs583TGzdY2fw9n2dkh56aZv9CBr2Y
        NPjqQyMCTCC3+I7dpN+WdHWyQnCNKMXbt7llQr69DfKv3ht2MnpTnGwikKlq0PhwsYxZchzhV8+x
        +hSzcuwKfQI9DxE9lY+rt6S1kSPeOK/p1pH9UhQdCZAlx1e8j/Wxn+B+G5DZtCfsUtPr50odNzB3
        afbtdzRmcMNcSabZwNeNo8TLsDYn5BnCKZDbSxIPE1wS2LYYBxvaBN58Wa9NhdMJIfTLT1ZfN+5/
        8OvUrUeDKdDBY7JK9ehTx/O6ljro/UmhOLm8DBY0ISgrZHkBEswIzZjeN9LlEs9E2JHAoJcLIXA9
        bRJsXz9DzD5ofoHlUghkSatKttrffHiMTME40+8eyyS/QOoRqaSaNqKxjEHoozTRmi8ein46ruQa
        Xd4CDWSpgZ7l7Jqgg3q/YFPN0nLuCneBzcV2sYrWs0fWynsDl8y84l++zltjucJdvbrUrMR73LzG
        agJ9Fd9Ie1vZbH4+H53Ms2tB92ivlSLydjUybbfBXz9MB56XdPmbd8h67x6NueZQDWzQCqy2E1/O
        TbnmYDupJ4wd98lGI9/oMqcPBHvbVkyXz4nKoK6lHGvdPYrnuep0RFf1g7p6G3rffHJH4XxzgzHk
        ejQ75s6Ui7gJqQaRns5P9eGjOfLOVG/9xehXQzgoWkY1bHG3g8esUiJQqfaB+p78KhkrG1kWyXzB
        0Zm63oSl1oTps4loModzTM/7DYFs53v0Vquvch61AwcEZzsccNutt3SjpstYnd94n7CCsde6UJFw
        etjYi+vQW0YadvIvX7birUUs2SgC4qp9StXThZRM/Eg5OixZjH35aTDhsUsraA+g0h33HNJBSlwL
        RZFKcSLtnJR5jR7Cx9Us7B65Y8wvt2pQuDhQsFtNejxsBd4EjS/sv/7aKErkIH2/DFRdzzhujrns
        wu2cH7GHz07Js3TswNzZEinl3WLMa1IP6OhefXqSsp6RW6F2yPebM44e9ildYq5bkPS4Av3qvzet
        qiwHieOuVOPOlbFwcFNlG52eFFN70w+68E7gxb02VL8iir55f/qrJ257SdLFXYmdwhahxnrmiTHr
        QPUhlT4mkT/xNZ241/EFbTecSeJpaTxKB0GASGZbbL2wiAbjRgQ0jnCn+lf/ZsnVJpQ+BEykC9ON
        77x58E05x9tDJLLFpJMLAY3EICzvnjfNQhn+5vng4+QjG5Q86eSuXx7YtRIjFeOhLVDdFDf8q7fU
        o6sj+s2zjnbgy6ULtBfoinDB+9VpG4tSz87IUl9VIJ/LJyKx2k+wBv+JD1ygxiwFcfjdn8jSzomX
        Q3nOoXq+uQD0/RyPTunUaNiL1u/7wFhkWUsQFh2LHr98ZNzi86iyxd1XX3SD7O5CBOveN+j5bkT/
        wX+VNwH1izKMyRefoCQJItzk+OmYCN6C2j54U/V5bePp2y+4WzxQ2zl3xme24g6dj+EFn0m4lF8/
        cWRgH4HiKPe8ZZvUnexWzKF76WD0619+n+Ihw5Z8GONFLgQVUult4vM5yDwWdUUFwOwPkYsV9Zpf
        /5cuvRmIVuR4c+g+I2VJVhcyn40hnoL8uECTfvJf/e+7QLfPgEXXwmbT0LKdjbZCgZMtZOJ2cj8b
        +aSKjWdjwt8/PJoXu78jRWve1NjVC1oEcZ6Uzyx0wXg7i8a8dw4d4l6hi4MGn9LRD/YTen1GRk2+
        7VJaJDFBiaS5NIiJl07KKjVBPGsaTtgxNiZlFZug3rsN3rLm3P/NS3/9ubIP5aiwPYD8fFTU27ql
        95uX4N52lLriXUAjCv0auH4V49/348CWyVLaxLfxnh27st+0coK20pj/5RdDnlYpJxcsrM93qZyH
        PCyUa2izYOXPN/T1s7ucttaa/g8AAAD//0yaTQ+yyrKF5/tX7LxTsgOC0M2Z8SUqH90IiJjc3AAq
        iqICdjd0cv77CXpyc6dOMFBVa62nKuiUY8+fQK2haEcvXAljP/tTuYMlzgy8UT8el/2j7UCJFzVd
        P9Zl+X5o6vDrf3lULV857qUKisDxad7nbj/PawjycGMT6RbcEhqGzgtYYXyi3jPJk/EtejGMFGJg
        nJG46UG3dWGspjY1X3Va8mVMBTj3Jzalo1/K0SW9Q/HO93S7ak0+ZRdV0JjRCuSbn8dFO3Zw1mMa
        vjcrW84fcIL7fU+IdK97MN7KpgZ648dISkQTMHzLOm1llgPRe6fxWb9fnb9+F3/9CQf+9g5DnXl0
        lWRq/82X+qynNBRPW5+zpgjASmEhPZL8A6aJXxG8SK6Ef3xBBV4NQhEH6Djrn7Q7N5WeNt1EPv6u
        KBmfmAOrWOmwYVtdyaRT28Jh1YqI2ZaXTMHJgRDenjkNt+GyH8fh4i7zg9KTxdFHfOGY6hnurPKF
        vvmEXvW9o+WttkTaGXxsMumHADrGYkLjJOk9G6Uug2yTydjYZhz01yrtoGooIoFVsuGju5ZiIH7s
        itomejaM7V4QaOItxuuZj8zv7wZ3Wugj2R4X/jSOdQx2G4SJDE/cp6yJkf6M+Yn6R+3YsKRSAzA/
        D9UUFj77+tm2Zld0v+cvf3IXk6B/+UMc9a+EK5TUULjjkrwNMy1rm40xpM8sp0H7nHzOnWsOR/Xc
        ET6/X9rmbKOvxNuKqJX/6RnZpxs4/x+K1h/WkE5WDBAI75hig4k+3zz5HR4p6sh1eC19/jgPMbxn
        WoYWn2pn05XBUigmTCEjucs2f4h38p2faArKGvDFux9gZR1KJBq7jn8qbdVBejVv9DTmQc8Ohpnq
        zLgL1NW22344CEYKLxW/kDJUz5xezq4Gn5oz0pTsa8DXzhTARnyadF2LSjNG7xeDr0Rp0WVa+lyG
        hhMBcNyt6epaZkmvRfoA+VXa0HzmDVMfWRWc/c+c56yeX/WTA7fwskdpircN4ecD0Rh7vakVWjkf
        hzZsQZk7B2yutJAzX3RvUBtFTpZzv37ILc5BOSrBrz64v/WmXz9f4nPvz/q3UcFTXlFv7y79lilp
        AdfLpYmjHe744Cu7Sk/hcYPbl/Pxx/QzpnDI1gh/8/UQVV0NNyOxsZmuUclszCQIu8UFhyo7AKZW
        tgW3XnWklqVX/lyPEViilKPaEDa99PSNSTcD0lC/oaifhjRIYeWtEzJ61tgTFzxdYPRkhWf/VdJ3
        zTVIqRuRe2zbfFHs7UwbhmVC53nsTxM4R7AsGgXdo1bzifBwW0jWoYW9SI4avtlAB+aiJ6LRJi+b
        BWpRwDPgJt6sjnk5WWOXgzTZNDiiklxOMXxLGnl9KF1ZrW1zwc9j+Nj5BepQ53FZNArhm2/xUQob
        n601XdCOZ1IiHYTXnmtUD7QAPZ8EhKrAx9MJu3AzoRg72mfweXcyBojdNqBbeXcHv/m0D8uWui8n
        tGmrshYounyn2x01SqKeFy7I8Tql7hNu/c/L0ms49wveiCpL2D2mHrz60CKyXGv215/B6PXiNCEb
        pRxDL77/+kMleQjYsHQlyJb5leJW2fmTEbxciNdOSed8yMcFpgHIFqOD3e4iJr0ouwNku1WIFrtY
        ASw2h+WPF8VG0frUfJximB8WPV3pH14+2aPcwOwRLbBfHppyKu5eDd2dwWn5AGnSic91DeNbLZBR
        ezA+8xUPjuZmScB2BP6I+sSCu2u1wGYiduWHb+8FGPTliKC73/u0TL1Ae3WbikZlI/n8bcIcqOp2
        pN4pE5veuJYFFBfJHUny41UyTQwKuDFfOV6Ba9gMc36AfJJabARik4xLohcaUbGABoQGn1XObqnJ
        cCqxd0TgpzcwMhWC1JlPEHCyZN3emIza2K/LUU/dCnzzxcwr7DGO7g5MpXeETqdzAeTZb+pNm1Z0
        e3ecfiGgItW+PG+lMK2cBu7L33lGsXuKSq2j5uwfTneMwtsDtPdw2MDZT+OADYRzGFo1PDdWP+cH
        1FNRRgNc3x4+RpPjlfJxIyBgy55H3aSxbenrX06JyrGV0c5mUXWrv7wDo4NM/XGPRhkuzwsLXRPR
        SyYo+JE280uamQvFHnvbCSBW1wfqjIYG+G53CiC4mWeizDxuvF8eOWwvzCJi1TzBa2nIRJ3zHfWO
        qORjva8HUN9fBGdzPZH8IU3QZXdMLeu8Bu3plkdaZRQeNpfviY/JONzAx+03ODgfvH4C0MvAafA1
        6srmCjAzGYwf7//6W3Zpalf3kqkjwhX4gI9u2cGuojEZxEhsBms/CPAsmduZ9y7AgMQ9guvYgTRw
        jgf7tb9JFmTLJaPWsDAbng0MwXM3NTiAn20/WeOt0EP8Zni7hGfAnEQbwOw30WJrRYlk78ZJ/+rT
        KlZWCVsa8gBFniVof14aM88wZBiuyzfFEgw5d6/LSV1FlUoUy6r7n74Lt9hDg3da8oHi2oLGp8+Q
        5hZNMqS62sHrqg/IYmuxhEYkmeCszzgo2kMyvEKTwG1w7LCdlGsurePNGSCWZPSbR2R48Sc19YoA
        r13PSaY+8ir4Sg4HxE95zVtf829QtOMXEgbj1fBWXbbwaSVo5u9yw7B6dfVZ72kEznUvzbxXJ2oo
        zHnBs3sWrNlvPshz/mBd4tQ6RlKCwyahfNK1yIWhckmpZ42zHq1NGaKIakid90dUHCKikz0zaLQ/
        oOYz5zc9ioqBriNs+lJifyTty3/ck8jK8dOtK/gw3j71cvpsmFi98m9eIPfgnJUfgcYTELTbDhun
        6NGTBbgLcPl4bbCZ48nn5BJlenMYzz9+OJn0WsHb5dITfeb7o+ptJ7gQthM226Djj31GNLiqxQ3e
        vEHFR3fFMyjZ6QKJbzvj7y8PtNYnma5rJeGzfrtQFWCOc+X6sNnlcbV0AeojnvOAzb7f56V1PeL6
        dG34RcQZtNmhIcyPRzAVnuJBcG0wIjNfGB2RnfWvH/VSQSpZaUVQV0Kmknkf48vipTjDzxlg9Dqs
        7wlbSXwDYLza0tXR7n3WuEsE62DhYeeWtr/5Ca66ICBZ24XliD6J8M1XZBHxpiHhFUnwXfk5EoP4
        0RNUFgSSlp2//Vv++P3uel4QirJnSfWdU8Dbpy6ou38+/MVNawy4sDWK1+394ZPibt3gCEqAbf8W
        8e88VgN3Qan1SRdgUnItAk2bVehK7rLP8pcsgyDoMiIuP6Y9caV34DfvyDth3/ADVjt4HqhEhA90
        +wkLlQOk7rX97kP4OJzzGoKntMLrW2UmUlR1N6iPQ0SLb16JvHcM07tv4i9f/fYj/O0bL7dqzvPb
        GlpZY6OFwrSkFY1Y0Fm9Kah/eXaANEPT6cNjUxKpjpxkvB1v7ZfPzfW8AqMywErrS9lD9fOO+NjC
        qQP7oeJEqDIh+dyOXQvfgEhENhcHm1aK34KZz1L7SMeEYz/OgSoPO5y5q3PTf/nTokc2GoT3up/A
        XdEgvmQ3NHT5qpRDwy3gzIfoNsvyOb+WA4xqDXx5WvKyMZP1Yoef87516H/+Oy2W5VyPtj36vZPp
        XsI67B81teEPcRjg8+gk83xREjL7K7DZahckBuqpl2ceAev980qELjnYQ1AU2vKUlHfsKE7Vs9LK
        Bfi4oA22dh5sWFglMoTbdMLewZJ9eq+a7McDFN382GxzEgtI8U2iBtBTPryx94JnMJpkeSpDzhr6
        GH77LUt/LO27rAEJSOkhIboIT0kHTp4MC8RcvH84D84zmQTgnag7Qm/Pdz/MfEc/b9mKzjw74Ttc
        xfC0RT52boFVTpdX6QC2UVbYPzVv+7e/GqNghb1FvrfZsCtiqOjpHkdN+kwmyotaF3maIAVUYska
        +iEKNWwHY4Saft5X32GA1zK2Q5L10jw/QdK4S+x9NmHz9RcgxP6VmpjeAC0iI9Of7/sNfR6HHWfL
        fLsBBhdCbM37Vh6FSQqS+P7G5byfHrMRINiI7kTUJ6ybcYkXy9++Ajwqw1f0XZCDb14RtGrf8HfN
        l7B93Y6IFJYEuv1ptOD4qgK6jhML0MHyHdiHSYCSZFqWX/3Rx6OKqJdean947/w7BDvTwOusdGc/
        Lbn6n+9VwL//+vvv//leGLSv0/kxHwZ8zuPnn/87FfinOBX/SJL8D5V/lwhkKOrzn3/99wjhz7t/
        te/P/35e9/Nz+POvvxf/PTf483l9isf///2v+Wn//us/AAAA//8DAFmrH/DjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a10b3d692d52-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:00 GMT
      Function-Execution-Id:
      - h2mumte6cs7e
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e2311e874873d9f8f20bb6d15634349c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e49a8657068913b8fb9405ef467bc776
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "instructing to write the task_id into a file named output.txt
      and then shutdown.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '157'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a1129ba61123-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:01 GMT
      Function-Execution-Id:
      - h2mudtpfazhf
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '27'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c52f9dc988f6ba22e190f985c66b2bc9
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e569ba45c31fef77e5c07dbddcb0479a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I understand
      the instructions fully before proceeding.\",\n        \"speak\": \"I will start
      by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I need
      to read the instructions_2.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_2.txt file contains additional instructions that I need to
      follow.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file\\n- Analyze the instructions and determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6293'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RSQW7bMBC89xXEnmnDiuzE1q1FWyDIoT207qEqDIbaSKxFLkOuYqOG/l5IsqFE
        RQ++znBnZpdzAlNABrpSrK2vZ3cP20/HTfj6Y/tS3IaHj8vPX563f+zL2r//YEECPf5GzeeJuSbr
        a2RDDiTogIqxgCy5Xa+Sm2SxSCVYKrCGDErPs3S+mnETHmm2SBcJSGiiKhGyE/hA1vOOaY8uQpak
        6UbCKD4Sq7UEJlb1CC03d60EXZHRGCH7eQKL8SIcqEbIQMVoIivHXUxyjK5b4ZQ7IYTIgStqyopj
        Dpk4g2cCj9yBOdwLh1gIJnEIhlFwhYJV3O9MIYxj6gFq2Dc85yOLJ1OjaKJxZc/0QzumXY9rsla5
        Yp6DfO0WUEVyxpWD5bcKhXGRQ6O7I0QR8LkxAYXF63JMfXyt3GAxE98j/j/gdTYTFx0MG22inR4Q
        XWxCJ6lY3L/S1xQCar56nehR7S8mB1PX13yRo8M8h0GulZdCnPf/pw9OWRyc3txrEkiFclqlgeje
        jhJjlDfz0+bdpMnykrBPeQ6buxZaCU/GmVjthu5ABpHJgwTjCjxCtmh/te/+AgAA//8DABJ48l3k
        AwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a11ddf3c233b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:21 GMT
      Function-Execution-Id:
      - h2mu2f5p9kar
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18485'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d68878224a912bb6bad2a118faccd419
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85978'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.68s
      X-Request-Id:
      - ecdcb0e9fb4ed893e3fc279e44d2d132
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I understand
      the instructions fully before proceeding.\",\n        \"speak\": \"I will start
      by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I need
      to read the instructions_2.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_2.txt file contains additional instructions that I need to
      follow.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file\\n- Analyze the instructions and determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file now.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7247'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSTY/aMBCG7/0VozkHRKAs29xWKkjbHlddqWoqZJwhcXHs1DNedoXy36uQ8FGq
        aq+2/LzPvOMDmgIz1JUSXTd2tPj6vPry8JTOlx9Xy+9vz36xWU6fPu9fJq/NChP0m1+kZXgx1r5u
        LInxDhPUgZRQgVl6dz9Pp+lkOk+w9gVZzLBsZDQbz0cSw8aPJrNJiglGViVhdsAm+LqRtfgdOcYs
        nc8+JXiBXy5m9wmKF2UvR3eLRZugrrzRxJj9OGBNfAIHbwkzVMyGRTnpNL0Tct0Ih9wBAOQolY9l
        JZxjBsPhcEGv0h3m+AiVeiEYnKgAZS1IRSCKdwyBfkcTqAC/hZrG8Ahc+WgLcH4PXEWBwu8dRDau
        PD9bn2gdtlauGOeYXMcHUuydcWXv8DBEGscSou6a4V5rQ+Rg6631+07NFecMMHyWvsU3VrmePIJv
        TP/3AvGXIW4gOhgx2nB96skRHR+Q4xg6qBJ4p70NbX2gY4R0BXUxt7LckNqdMvbG2qtau5Lfr7an
        tclp68PNP0t3qqY+6C/SjY8K5e1/uV7a1caOI15G56g1MW+jtW9nq6PZIJi7FtsEt8YZrtY9DjNk
        8Q0maFxBr5hN2p/thz8AAAD//wMAmYLVvr0DAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a1a93b612303-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:38 GMT
      Function-Execution-Id:
      - h2mukb2cobx7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12922'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 40ff45c85652f341002ef2cf667625f8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85980'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.68s
      X-Request-Id:
      - adc1a47abe9f5722a05ae91f535b6ab9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"2314\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '245'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SQwUrDQBRF935FuOtJyTRt1NmJUAS7kqJFW8pk8tqOJvPCzAsUSv5dKlq3B+7h
        cM/wDQzc0Yrr+ja/fX5dvFer+8c1vyxXevF2YlrM7fLhac09FLj+JCe/i4njrm9JPAcouEhWqIHR
        1d1cT3Ux0wodN9TC4NBLXk7muQyx5rwoCw2FIdkDwZzRR+562Ql/UUgwZaXwr75iXSgIi22vZFaN
        Cu7I3lGC+Tijo/TnjNwSDGxKPokNcinkIBQu9TZLFD2ljPfZnoeYhaGrKSaVbTAt9WyDCUaFvQ8+
        HXeRbOIAgyQ/J/jQ0AmmGLfjzTcAAAD//wMA5l6gPkEBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a20d3984871a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:43 GMT
      Function-Execution-Id:
      - h2muhxlit71s
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1607'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 46220daa6e4274a58d3cd05eead85a11;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89467'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 354ms
      X-Request-Id:
      - 0d54331ebd3abb937678c99f506e381d
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["2314"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '83'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SaWQ+6zLbm7/enePPe0jsCArXYdwyKyFCF4NjpdAARwQEZqoA6Od+9o/+d0+fc
        mIhEhqx61vP8Vv3HP/766+8mq4t8+Ptff/39rPrh7//1PXZNh/Tvf/31v//x119//fUfv8//cWbx
        yorrtXqXv9N/P1bvazH9/a+/xP868v9P+tdff7+EaUVBHA/1bBr3EubVI2PnpfdE4wkkEZ7VK2dh
        rzM0OaUaQ2GYgEuh/vDplpMR4ftdZ+bJuGWNb24dtNSnAzGbuuS8MTMB0i43ibfwt/7ck08BTLwt
        sKq+5yQ/XC8a8B0KsSrethkzgroHApc7C7UXruVqqXpAXqNIPyde2szYBTE8unXMHF3zumkcew2e
        5IxYoCpCNwX1awUHNnM6/a6/Nm1XW0V6gcd+9Uho8CmPui7WNgnOzc7u1PTSaIdR0xleKLYtnpef
        B5ixtcNCZkjZR7MNQT832hmrZp8mQxnHAE9On5h3otb1Gr/IanxtHWKCx7q5FVIZQM1rshWnrpsv
        j3sBZ6FeM1cxAj7lzHNQ1m6W9LTZbWwxWH8aEIuNRJwrNuvx+EoMvZ6TNV0ofYSo69cj1FmFWXjV
        nvVwyzcjGINasWBtVtnoe5ICgUuuxKSxbvdnsDyIcMeJhT8Hm1uXS4+O70Ih3kXwknFRRxTekrcm
        hves/f5ebWQQNMVmBzqIfDou/ABJ7+WOuSVl/tiNdgRHo7eYudvZ/sxvCwEiljosLII3H+0FfwDH
        5USHqmj9flOvCiju2pl4gvris4V9DKtruiGbHTnZvQ9lAUdT9Fm48BK/uyauDA87SDA8F0M9z0dZ
        hOodPJmpjQ97nt1PAYluELY98dIfknYzQ/gwIuae1qM9NrvMUBfqXSV492r9PsyDAqLb2yRb6Syg
        OXKjRp/HxYJthn2ARFGYUzAjzSWhvD4j+lG1WFPX0Y1sn/SeTCe7FkEJXynZ3qfRZmMkzEj0pRrP
        lHpohgGdNeYXMlWdMPKnIZVGOAzlnUrl1eJylDkvyNr1Eivw2GXTU1exurYFm5ipHnVzaAgKFDfJ
        IGYwhlnjVtEMO2oDlrDZIR5a55dWi/cTCXceZNM9LVPYdVOLNSv1kllH1xXS3msJX6e7mE00aFKI
        RWwxp+qymt9oEEB7PWYkEEep4/GybqB/sgHPWVd2jAnGDBIRdsyJinPCX2O4h8TfcmL0+gXNssjT
        xSnQWkaeH6cbI3nvATg3gRiudU0mRY4VuMjEo/OWfNBYmiPWm/JSUvOTH5M5pIaiXg9KS7y9fM/4
        RVgfQVO3AR6F3aabm6kX0W3wZ/Kr33lLzg207DVglD0JGuKt4kJWew5zokC2y7etHuG3Pn23eqLR
        Mt5HeJzokuBlmtt0aR1cOKSuQ/abg4+G9UnxgJpVSYz3rrf7/f48wrJxm9/66abl0nmgttK3xFVi
        5nMj6Hrge/+GC/vy6sap9DxoxuDJ8tPc2pRsgyMU/j5n/iqJs/Fwn3MYbRcxoosXzke/qmBujZDh
        B5I7tlmNBnrj1xYP2ot209ivjjD0zsCMPbbs6bZSY2jJ1JDACVKbCtrnjNhQhQyXa8KXq7aMoSmz
        Et/YQbQn2txyJCHS4+VhDFDjSpgimeIdlu9lzactcgXotCKm8xPF6LFa5QFoqh9Q4Xb3fSrWvYzW
        R3yg7SisOe8/4R5unUjJ6ugknEoTLtFjdcyx26Z5PTf9+QXq4BeEnI03nxxlM4O5vxXMdIvO7i2D
        HdEiXgh0vqa630yPqofuc9yy8P3iNr08PjlQEoXssCwDzuYO59qyTTW2tkU3eRxb9EJhpWxYLmxm
        ez6X8EDy4LjElk3BH4XMj0CTNQ3L3SjxMbY9DLu1IdKF16uc1utUQVupE2nuBKk/1vfcQ9/+QcJq
        DJLpQ7sRhI1aMNtPOWddGeA/z0sUIfHnIkIFWtzSN102QY3GrbCREVuMN2aoWcn7+in2kL2XT4bT
        S2UP/SoG1UzclK1P2ckermZwRsfjnhE/dNpsTtFS0CS5CknQlnbGtTc/gmsUNlsvyx711TmzwNWe
        e2J9XndOU7QQ1JwdKdWmqLF5uXo78Lp4J8p1ZNTSAsQXrD+vka1L9rRfI0IpunUypWJ6eCecapkG
        d1d44nlJjG6Mhc8LpGV7pK97afOxSrQcCGR38lsvNMrwQ0v6tUnMh7Lj09gHe2S5j4Ck8/bazXzX
        PuBZqyWtlveKt1/90oaLnBGCTw2nq5n0oMXnI3HMbYf6We4BbsN2JpZ+i7n8jA0FlJq4xEQoQ1Mn
        T8Hv/pj7IQ/Ut29dRlN1X5Hz0lsjWlHF0p6v7cz8zOyyGZ3OD3jbuw8zEUJ8UjVeAFWzG0ZutUb9
        lH1ecHdoQjYrL0c8M7UI5tYK//Q/fqq3gILt6YWFx95O5NaHlxbflDOzWu+VjeZDCeBqt2fy/Z7w
        RXJp4Lx6MbyU6dnmYfQUYHbkgazj55hQqTi/kLjxViSUxg2XmvxTwVm4r9mqeG/r8QG3EpW7+E6M
        SJIydpGCAM7HxmGW496y2dEOHkhvaYfVfX/g3PQVAw1FrdG6u33q9+KKc7QtzQ1dnKa9Pa1Pigtr
        1GzIVj1Edu01rvjTB9x964sKUxlr7TxihuF27Mazd3sgaqQnurzlaTJ187lBv35qLpTBf2fmHAE1
        y5J5U+Tak2WJvdZ0vcG8UXii8SbYMezejk/8crj47JS6IpIftsZszMt6VCo/Bv22jhiOb7duHHzc
        g7c6jlRCrMyYQPoZfdfz118ZXHoRXum7c0aYK9pZPYeGrCFp2RyxmILWtebac0APFxuyJQfVZ2a6
        TtFHtWbmrizHH6r6U4FDjIoY/eqRfWhzK+CCjx4LHa31R3xUgp+e0FqUnWTeBLcc9EAWKH1Ypj3o
        16iFWO4I809NUc+3i6vokUQY8S7pk7N6U8bwoosF/uDcrnmqqA608uHBwmAvdd14WSioeuPnn/XM
        1eZtwKqca7y4ryt7fC7tGOVRx7HEcfv1d7EIVzN1qGquN3bnxjuK9sqKET/GPBk1OkWwzcqKaqPw
        5OPJLHKoDlvMwou+z8bDG1O19Z0t2RLD9UeW5C6cqGBiveDIH5Y3xQHd7yUsbPTOHtMwmuGoloQE
        lQVJvyk6Be2rwmJe9A75PLyCGO75wcBjVHN7Wt7GFQTbw4tW64fGud0lAN1nv2VBi01/NsDV4IN2
        K0JOnoFklKkePF/+zAiJhIxP+7qFVbQo2MaXuvr7fw4sk2bFcn3XZVy3fAcGelxgODeTPz7KsgBo
        7odf/XTzARQLmmAts9Ba2Yl8XKsBeu+EJyEiW3RMXIo5mI+oJtdgL9W9ynoBrE1hM5ucnvZXj8Wf
        nyLmsHlm3AhqCoUUczqf8tDmL9XJYXVb7nH/fR/j8uJ5oJ5bDWvv98d/aLrTIFCOKZU+S+yP9wvu
        wci6CAPX8FfvqhdM5FAzK96v7D/vp5k/Mwny5aOen7Gh6blvr6k+8WPNj4cmhq3rbqjKT4bNxSUU
        8HD4hxhk6G22hqqE0BBHql7DrhvP4LlglFuJ+YDbZJSC3IPryeJU/vqtiSifEuQxf3yfd+33+8vT
        AD0KU2IZm5LP6ybVYJs3Hdu2j8bn13wrIC3yVlR4oGM9/vpv8Tg92WqeczQ9HS1Fi6d5YMZVI91s
        70ZHj0rms0DYxH4fTfwFV336YMifViJT/hTg5qRA4b598Sly7BiuGk6o8LDu/nBc2BjtjbRjfp7J
        fKyfIgViehtilh8hG/NbZsDZWZp4Y2VGwvcxW6HPsz2xzbsL+YTVK4YFpzvi7roHn5Oq2UPqMUrZ
        /nDm/M0uDdzzk4G1GjS//dWfd17u6bJQJDR99QTw5Vvf/m1VT/F2dLWinAkjRr7h8/H8dqEoR8K2
        59OK/8l7kjLfiBXvHzadtlcXJkm94dJbrpN+TxQMbBs8mCN1J3/k0hSjTUZ8PB2kd911WdfAcj+G
        xNBe53rOJcUCVoUDcZ8PCc017CgclbPDAiVbdfPCrh5oW2g6btMky4btyvOgEL2WuPPLzIbqZgjw
        +ZCBBMrw4oO2+VRqXlxKej9I7244am3z85Nk++0Py7lzcrCuzkj/+EXF2IywyQ975txLG037T76C
        NWo3ZMtPhi8u6nOvVYnoYbZ+RJwNza4Feas07JosHslY9FsDoqJQQv76VIiv2iZCakt3LPDGop6q
        xnJg3K+2IZ30yqfK/nSGPPAxrrb33p4IK1PoTvH89Q9r1BxGIqNvfqPLx32Pxqm0PLD48o2XqUV8
        en4eXFCHbUG56d15L9qJBdb9eaCL/UFBcyOHKeRXJ6cjWdCES0tjhm9+IeuvnjJdr3JopTAjZml1
        NutvUQVtcAnp7YkaNPqm6QB2S5F4m2iyZx0dVlCpxZJO37zb0mf00m2rqn/6msxL6+DB7bT3WPHt
        X3TdxBr41Wuk4oyVZJLLbkRHJXWIpUa3ZH5sUQ7FbWnQWexTzoxDL2uOTN/E8com+7ce8S1hmwUJ
        OTW3bQPgXAUqbtQx6ZZh16K3HGM63fgp+fUjFWVBTWwhrPgksFSBT5KuyeazvmSTk58pBP3dIeYx
        T9GcVOURlgflSEJLP6P54Ic5vOUIY1Wc/D/9CqmpGnz5RtGNy4vlgeFYNbGdR2iPostiAO3VM/+g
        VkmvvDoR3RZkS3xqOnzaymUKW36pCLkLp3qYrHcAhhtLZAUZQs0YNwVMgXZkxOvVL9+ZYh0tyoBY
        X3/JX626+uPHJHq20USD8oy2C9knBptNJI/LVIbYJFdmSAWr2XyOSljVZKRiaj99tmKuiMS0vP3x
        BxMr2vaX7+hSzg+I4WLTarbd9hi8rZ8NcKln2JK1QgUI9wn37SXAz/9sRzFNpgVHBZovqwWzBfFo
        U2zY+I8f0b79cHjqU6DHxUjYpX24Phute/rjRRSVw8Xma+eUokuITWJ9lJX9IM1cgPNSK0ZO094f
        q2TO0fITTyx41bE9Je1m1CzfvGD5m6/HndTk2gJHBQl0iaB3m5+OoESCzDzh/aiHW+I0YCwEldnX
        R1MPRPlUEOEPp4tXBT5dzRsKdVZi4u38OGkzFMSoc58yCQMrSWayXR117/i0sFizuJsvpaFBzvaU
        bV/xmvd35zxDFOAXhq//penHMuB5zxNGktvu5++iP/lr5V4lv/dMGKGQIk6aIw/ReFNbqu21O5DA
        G4V6sDaHCKR9IRPDnDt/QFHVwhiDQdbu26i5r8kz7BxXp5wI52Q4+2qEskdMKK9SkslyN8f6204+
        bL2CXddnx52mjntnS/kY3/lkSiloX79Ntp0b1OwQpjK83HBLwqrw7Kkwoh4tRDFlYb/5+PSXB8DS
        GmIcOvC5g3tRG06PLTMuTZhM7+s10DZDXOHlgsfZVMm3HD3j6UT5wlEy/hrXR1B7+0B+vGjMduoR
        PvsKM1MuTN6uJfEFhz49U7U67Gu+j9//1tcAL2b74yJoELwvAdajnYN6nxxz5DXthbjPmH/5lCBq
        F+WaEzfclNl4Xt4f+vKgHSmNb4ualav3CjnqVmQk5KtkfC/OFL2O2hoPl6PpUwZvByplT5n3tle1
        RBwB0C1FJX51wS4Z0/A8o18+aT1k2COX1BjyIivxYh3T7utHIkAb0WWBstjas3Va7dF7mZ7w6CQG
        6ka/rUCeHgNVz2urlrtLEQFdb2SsHy7s2y+pg4KjdqHaXjaTqV/Me10Jih3+5omMr/gnBU+dK2I3
        51syBRc1gptzBra6+dify1f7Qq+cDQwvXgYf4XQ8Ixs6EStbj9jzlkQNfPMR2xwCN5HVpKYg9uOE
        uSg7mfj1w+h1cU/EQ3iJWkSZA7iXr8x7H15oXs2EovWCXJmPnLv95ac5ONZTJevzTvAHIroCLF5+
        QfDDutts+8gA2U9qM2zEkDwXnOdom7cdsxP0qan03lG0CKwAn+z9AfG6EMafH2GOs9uj0Unt4493
        0EkbV/54fZc5krm8oAtdVPnkMNyg09IGttq86Y/3zYAWVUCslb7pRN4rnqoiOSVen5qZXI63FLq1
        UbJvvXeK5mxEKENtTdGcfHxupuvzv+utJzc+d06zh6/fxNXJ8xCX4Gr88jmzz/SOplyRNaijkOKq
        9ZxsWp9GD3IaPMlPD8eTecxR13YhCej87AZOrgHy3lVE4adfZRwL0MY2wtnuXfrUf/ICUnh4WNnm
        UzYaeTVCHn04cUUb1V++1CN2ZS7Wv7yMu/GlV3980RJdOeGb0yCgL68joRTUyaQF+ghniDhLv/W6
        TMVz+eNBv/zOpZxZjj4i3aVzZyM0LpqHoH35D7HX1EkkVUM5vCMxp9pizrMx0qBHYj9PjBi09f/4
        MbxtdGadjR0aIzn30KMPsy+vr212xWUM4qBpbPur99ewENA3zzM/PPcd/fKAX17E8sECRK8bba8F
        w4eQ/YzPyff9H3/1xbAlWbb05fOwzk2dqu2jsftPAb367e9YdqRLQvd63cOw4SvK91PU9UbezvDj
        G2EnvTo+7bsGSlnFhIhunw31ZAewPgYHOi483R/Om4hCL7eI+YY5+r0qhiXsjXNHHHMYs/5RNgX6
        Ux8x2Mnyy4N//RU/9SDtZknbNOinBw9BMOvpRVAJZV1xttXlJ+rNNshRFAQvKh7EqfvMynwEUPYp
        +/Lgmn+SIwaFGyEzrNWQyeJFsSBx0R3na9NK5HOeW8gDSyR4pwTZVN1cgPOxdZhnpW0yNa2gqPfg
        jlgof67JuN9HI1qfjgVZw3JbjzvNtNA5Oz3pVGgmn4k9rnS17Xck/igrXza3VQPDNGTsx99H4VbL
        qODGnV2bXLNnNmsR2O2lwgqibTa0sC6Q/dldiCNt5m588GMKfXyKsfLhn2x6n6FF7/c7xspDr7rp
        yxO077yFSmucIIa6BsNlv+VUZtmDP7756Tfv+PFUzucOF3/y9mRvaEKb6SHDjLzjH39Jo91lhnTa
        tYxs5cSePq0dICdOBeZ/yp0/R+65RT8++OPNVOoHgOtSMMn2fHogjh3VA9hbE+b7G076TR0USLyc
        jySx7GU2RWbbw3f9Msuge3takZZCM+InW9ltzmdBdmUwcn755WN/NNtVDlerJMTK75t6LivPAHTt
        RiwEhWmP1+kQoe96Z75So2yIHDvS9fot/ZlH9e0oC6BeJptsxXDjT+NrdPQ3fmzJpuFLe5KfqyPg
        ju5/+TUTe70HyFQF6GJ7t3zuHucY9FDfYFgnj5r/3q8Wp0c8K5/A5unGqaCdZ/wnP0zuSpfRByUr
        5ow19YcrdCNglrQYzcuhHuI7blHXfkJm68jo/szfhsXNxeJbcOzp61fR3YUnszo74+x4OzjQhvcj
        RnEp1cNB1uc/+v05f972n/mbHHgasy/vUzaejWrUhQ9IxEk0Xs+CK8vAKznDl+88b3KY04K6XQj0
        sVgubeolKkabzoroE57vZHgnTfrLV4S0E6u5L1UVfN7Kh1nx65WN1uc8IyOtN1S6H8/ZSJo5R537
        lunirOrJmGbU1RjTUxZqVmt/1qfR1b96x9bfeVsbLKUe6nCR0WtK5G56Rm+M3qr0YPaXF46b92Ch
        jAhPjKj5QjzzeAqHYvmk1clr0R/eQEkcEqdaudm4tpsKOqAPtgrclb1cKVLz6zcsSCSFT/0qFuBS
        yYwQ4Vxk0y3BDYqkkP2pr2ESL7PmJPcN5k7soTEJ7KP2vZ9vPlbqbz4p/vAcr1O7rPc9XUM4ffkM
        B8XdnjfqvYCSGJil6fLG+bU97X9+gLgg83oyxjlVq89nJm4+XXmfhucRgovX4Sa8VH/mpfrXrxDH
        qU/+PCJ0RqqTNgQf8+g7r5sj9J0PULgGUs29xpXRJj/tsZSXu5rvF9MKFP/oktUjarqJ3o7Hn/9l
        m0p6++yl4gKM0pewcCMumghrzvp33kzM5frgD7kiK7DCg0/IE7l8HLji/volWefl1P14l/7VOzrV
        xStjr1Z1kOhGIdt9+cjnl2+KeJ1gcRHZfHLyiGrnzcKjX75nj09quQBqUZNVzeZ6Ct+pAF8+/+Ud
        j5qDairARuVDF2p16uRdGmuwMFiPxcE2OvlIXhYcCulJbLUP/fmXJ07RzmG7hRLag7vSRcV5dBHD
        j32d8N/zjs1jIERMac2nyyqAfrn4N7/748f//u0K+M9//PXX//ntMHg11+L53RgwFNPwz//aKvDP
        9Jr+UxTlfzL5z04E2qdl8fe//r0J4e9P17w+w/8dmkfx7v/+11/yn90Gfw/NkD7/2+F/fK/1n//4
        fwAAAP//AwDA8guX4SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a21cfffb8708-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:44 GMT
      Function-Execution-Id:
      - h2muyymndhdd
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '116'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4a022cd3a264c827e75e856e25463568
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 04ab476af76a690d687ae1b0b32404b5
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a series of four numbers, \"2314\".", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '112'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AP//AwDEWjwG4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7a2245fdc1098-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:10:45 GMT
      Function-Execution-Id:
      - h2mug0szkz5s
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '38'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1d0e1136964bdb9a6bfba3ab0c3b3385
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - af65987bd188e2ee35ae31cc5e9624c5
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3281'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSTWvbQBCG7/0Vw5wlYzn4S7dQejA9Fdw6UBWzXo2kjVe76u6I2DH+72Utywly
        CPT6zsf7zMcJVY4pykqwrBsdz7//eno2m2S5ccnrj/23r0s9Wa9nj9PN7GmFEdrdM0m+VoykrRtN
        rKzBCKUjwZRjmswW02QySWbzCGubk8YUy4bjh9E05tbtbDx+GCcYYetFSZiesHG2bnjLdk/GYzqf
        LCN8633Tk+ksQrYs9E1aLKbnCGVllSSP6e8T1uT7ts5qwhSF98qzMBwgrWEyYYBTZgAAMuTKtmXF
        PsMUruI1QAcOYoYr8JVtdQ6ehWPYHcGRyJUpgSsCZTy7VgZUv01GfGAolCZofZ8RsrcXTdq6FiYf
        ZRi9t3IkvDXKlJ3fuiIolPMMnqkB5YEttCYnF+bI71whiC+V4JDq6G+rHOVgC6hp6NRoYTqTGH56
        +hgv2AXxs/GyzMTwaIQ+vtLHQDkxuVqZLmzo0I3jB0TSKVZS+brftSG6EJDxrQvFgmEFRav18dMl
        7KiwjqBxVhJ117ED6+E2fENi3/u+KK3/68KjDLtm56h/pusC737JiJo6n9uyByjClcMX7AIh9638
        HqWHuIBceTJzxnOEhTLKV9vuuzBFz7bBCJXJ6YDp+Pzn/OUfAAAA//8DAExl5wwBBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bd8a186d111e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:29:44 GMT
      Function-Execution-Id:
      - 8oexa6elfc1o
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16727'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3a927da112fcb18156b6029a8c89bfc3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86493'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.337s
      X-Request-Id:
      - d8ef6a5346b9d2900114521b3ad4761a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4386'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQY/TMBCF7/wKa85J1bRkaXMDLqxWYi9QWG1Q5drTxKwztuwJ290q/x2labeQ
        IoTE9c34vW88swejoQBVS1aNt+mbm9Xda3/9IV9trmY3d0vrn2+X73+svr77ePsFEnCb76j4+GKi
        XOMtsnEECaiAklFDkV0t8mw2yxaLBBqn0UIBled0PslTbsPGpdP5NIME2igrhGIPPrjG85rdA1KE
        YpnnCZy9X/QsXyTAjqU9S1k27xJQtTMKIxT3e2gwnnyDswgFyBhNZEncUzpipH6CfUlCCFEC166t
        ao4lFOIoHgu4414s4VoQohbsRECpBdcoDEUOreoB43o24R2LrbEo2mioOnT0reuDplzTSNKTEpJf
        /QPK6MhQNYR8+otrjy0NRSG1Nn1V2t96BdeSxRlz66x1j+NAbyUNWan4HPHPlP8yZVlSKt6StE/P
        eNEnehONjKExNJQJdywio48jIhUMG2ViM/5npNgGPI21ba19Ei1pDP0iL9nEBrcuoPDBKUR9WIEb
        RY9/I3qUD6fcR2Pt/y53MO+S02EdKxd3RbLBIffFZYQmQzU+x6HQ956fX2KeIA4gR56SOugS2Boy
        sV4PRwcFRHYeEjCkcQfFtPvWvfoJAAD//wMAA1+IHg4EAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7be0e1944e15b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:30:06 GMT
      Function-Execution-Id:
      - rj7txmm0erzj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17999'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 094d0cce8afe2a2effd67dd9a0ce36fa;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85993'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.67s
      X-Request-Id:
      - 6848ed9265103d1d9374f4f438bd3c6b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5382'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQY/TQAyF7/wKy+ekatrtsuQGEhIILhULCBFUTWfcZOjEk51x2O5W+e+rNC2F
        FCEkrn6e9z6PvUdrMEddKdF149Ln7z59WarPHx7vFj+uXt29f3O7Uy9kuX29pEeDCfr1d9JyfDHR
        vm4cifWMCepASshgnl3fLLLZbJZNE6y9IYc5lo2k88kilTasfTqdTzNMsI2qJMz32ARfN7ISvyWO
        mGfZ4jrBs/lZWNwkKF6UO5fm2VWXoK681RQx/7rHmuLJOHhHmKOK0UZRLD2mZyHuR9gXDABQoFS+
        LSuJBeZwLB4F2klfLPAtMJEB8RBIGZCKwHKU0OoeMK7mE9kJbKwjaKPl8tDRt64ONe3rWrGZFJj8
        6h9IRc+WyyHk9i+uPbayHEEZY3tVud96QSolcMbceOf8/TiwcYqHrBQ+Rvoz5b9MWRScwktW7uGR
        LvqgNzEkFGrLg8y0E4hCTRwR6WDFahvr8T8TxzbQaaxN69wDtGwo9Iu8ZIM1bXwgaILXROawAj+K
        Hv9GbEhtT7n31rn/Xe5g3iWnwzoqF3fFqqYh96fLCE2FcnyOg9D3np9fYp4gDiBHnoI77BLcWLax
        Wg1HhzlG8Q0maNnQDvNp96179gQAAP//AwATKUCdDwQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7be96dd33011d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:30:28 GMT
      Function-Execution-Id:
      - h2mur9vpbckh
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18156'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d5b22bcebb095e5d170d26c632fa324b
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85984'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.676s
      X-Request-Id:
      - 26c8f177e7a47c823d474a02b7bdb03e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6398'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSwY7TMBC98xXWnN2qSbYF+bpIUHFld0EERa4zTUxjT7An2ooq/47StMpuEIdK
        e33P896b8TuBLUGBqTUb1zaL918ev7tP/mH7p7nf74zT9epAT9/M4ePnp0eQQLtfaPgysTTk2gbZ
        kgcJJqBmLEElmw/rJE3TLJXgqMQGFFQtL7LlesFd2NFila0SkNBFXSGoE7SBXMsF0wF9BJVkm0TC
        JD4Rm0wCE+tmgtbpXS/B1GQNRlA/TuAwXoUDNQgKdIw2svY8xCTP6IcVTrkXQogcuKauqjnmoMQF
        vBB45AHMYSs8YimYxHOwjIJrFKzjobClsJ7pDFDHbcdLPrLY2wZFF62vzsx5qGAqzrgh57QvlznI
        l24BdSRvfTVafq1RWB85dGY4QhQBf3c2oHB4W465T9toP1osxEPE/we8zWbmYoJla2x08wOij10Y
        JDWL7Qt9QyGg4ZvXiS3qw9Xk2TbN237RaNXLa1kuzD9d8drhmOKV0iysDtW8ZiMxvJ0kppiv5uet
        TLPk7prwnPISNvc99BL21ttYF2OvQEFkakGC9SUeQa36n/27vwAAAP//AwDNdiC2AAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bf225ee913ff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:30:51 GMT
      Function-Execution-Id:
      - ldychram2zgw
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19104'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2155aa88a65bffdc923c5df7b26b42ba
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85975'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.683s
      X-Request-Id:
      - 040591b4971c1530b704fc79b33b4a1c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7380'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5yRMW/bMBCF9/4K4mbKkGxLbrklQwKjCJDBzZCqMBjqIjEWSYU8NW4M/fdClgwb
        Krx0fQ/33bt7B9AFCFCVJGWaOlp9f3r+Vt7uV+untPr4facznzx8vr+1y+VDBhzcyxsqGidmypmm
        RtLOAgflURIWIJLsa5rM5/M05WBcgTUIKBuKFrM0ota/uChexAlwaIMsEcQBGu9MQ1tyO7QBRJJm
        GYcz/GwslhzIkazP0iqOOw6qclphAPHzAAbDCexdjSBAhqADSUt9TGcJbX/CIbeMMZYDVa4tKwo5
        CDaKo4F76sUc1swiFowcK7BGQkYVsvvHDbsp0RJrg7blURvsrTzKyhkjbTHLgV9iPcrgrLblwN5U
        yLQN5FvVXxuYx/dWe2QGry2cEpta2gEWsR8Brya5xpvglNeklQ5mejza0Pp+VhJbX5KU8x4VXU8Y
        GpS7E+5D1/V/PnJgdvzU3ej8U52VBod1l6BJKOnLaemDscM/w/D94yY6JouS0+7j/jFGbjvoOLxq
        q0O1HXoFAYFcAxy0LXAPIu5+dV/+AgAA//8DAFdYgntpAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bfb15da91253-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:31:11 GMT
      Function-Execution-Id:
      - 8oexqudx57t3
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15654'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1af6aa228030c34c283d660fced188ca;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85974'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.684s
      X-Request-Id:
      - 4d4d442d5568a1e31fc6af4b2e9a73d7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect past decisions and strategies to refine your
      approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete
      tasks in the least number of steps.\n5. Write all code to a file.\n\nYou should
      only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I need to delete the
      GPT Agent using the delete_agent command.\",\n        \"reasoning\": \"The instructions
      require me to delete the GPT Agent.\",\n        \"plan\": \"- Use the delete_agent
      command to delete the GPT Agent\",\n        \"criticism\": \"I need to ensure
      that I delete the correct GPT Agent.\",\n        \"speak\": \"I will delete
      the GPT Agent using the delete_agent command.\"\n    },\n    \"command\": {\n        \"name\":
      \"delete_agent\",\n        \"args\": {\n            \"key\": \"GPT-Agent-1\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command delete_agent returned: Error: invalid
      literal for int() with base 10: ''GPT-Agent-1''"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8241'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySUW/TMBSF3/kV1n12qqYj7fDbEBIaIEDqxgMEVZ5zF5s6vpF9o22q8t9RSEpL
        0F4Qr+fE3zlXJwdwFSgwVrNpWp9t3n/5evP0cbt+/aZ+2Nbv6PbD1urq6pNZWgQJdPcDDU8vFoaa
        1iM7CiDBRNSMFah8fVnkq9VqU0hoqEIPCuqWs4tFkXEX7yhbXixzkNAlXSOoA7SRmpZ3THsMCVS+
        KQoJJ/jJeJlLYGLtT9Llq3UvwVhyBhOobwdoMB3BkTyCAp2SS6wDDzUpMIbhhEMZhBCiBLbU1ZZT
        CUpM4mTgIw9iCdciIFaCSXiXWLBF8fbzjbiqMXASXXKh/iUO7k6PqqGm0aFalCDPoRF1ouBCPScb
        i2b/myLo/jyCSWBIXUTBVrO4Fro5izUUIxoWe3wavqzQI+OfLec1Wq/D2CATtwmfa//MyTOYiY6d
        camZ3/R/O6cW9f4Y8eC8/6c1RmIvj/NPzl/rB93gGHbGmTXSsR5/m36ilqGHXsK9Cy7Z3bg1KEhM
        LUhwocJHUMv+e//iJwAAAP//AwAHl+IZewMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7c02abe7c2cf5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:31:31 GMT
      Function-Execution-Id:
      - 8oex316p2cp5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16795'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 278b50277617f9e2f251f42a79f106ba;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85986'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.676s
      X-Request-Id:
      - a07bc172473bc00e395dec7efd7f4be9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks!\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSQY/aQAyF7/0Vls8DIoUFlBs9VF2tWqlSK1VtVmiYmGTKZCY7dgorlP9ehRB2
        BVv1anu+9/w8R7Q5pmhKLaaq3Wjx8OPD5svn5NPz8s9+/rNYMT0tvn5MVqvFwxMqDJvfZOT8YmxC
        VTsSGzwqNJG0UI5pMl/eJe+Xs+VUYRVycphiUctoOr4bSRM3YTSZThJU2LAuCNMj1jFUtawl7Mgz
        povpROEL+1JPpjOFEkS7S2k5n7UKTRmsIcb01xEr4gEbgyNMUTNbFu2lMxm8kO8WOGYeACBDKUNT
        lMIZpnAunht0kK6Y4T1wGRqXA4uOAptniKRz6wuQksB6ltiYziqvk7EcBLbWETQ8THTT61PNhKrS
        Ph9nqF5LRdIcvPVFr/etJNjayAIsVIP1sA3Ohf1bimAZJJwkul51ja6d9j11BN+Z3vbzmvCvfa7B
        JlqxxnI1ZOSJTqBK7wi4iQT30PicYhf+LRo2tA2RoI7BEHVpXitwTXo30PfWuf/nPzjtMa0ajnze
        8+bGXlfUK1wyuTKhY3H9NfpGN/vy/Da0wcTJyNlP5ltsFW6tt1yu+6tjiiyhRoXW53TAdNI+tu/+
        AgAA//8DAO53j/aZAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd857be88056339-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:15:01 GMT
      Function-Execution-Id:
      - vae2ntxg4g47
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17565'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 375e0804361c98e5193dc35bdf5b39c6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - d96b8038fb8ec5870aff4c9ed5d2c9bd
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks!\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file.\",\n        \"criticism\": \"I need to make sure
      I understand the instructions before proceeding.\",\n        \"speak\": \"I
      will start by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4285'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTY/aMBCG7/0VozkbRJbSXXLbSv1AvfTQVu02FTLOkLjYnqw90SKh/PcqBBYE
        PXCdj8fPm8wObYk5mlqL8Y0b3X/5+X6b+c1qHR/n2Y/np+zX48evH55Xn3z6jAp59ZeMHDbGhn3j
        SCwHVGgiaaES8+zdwyy7e5hNZgo9l+Qwx6qR0XQ8G0kbVzyaTCcZKmyTrgjzHTaRfSNL4Q2FhPl8
        +lbhif1az2b3CoVFu1NpMs86haZmayhh/nuHntKRG9kR5qhTskl0kN6Sg1DoE+yKAABQoNTcVrWk
        AnM4FA8N2kpfLPBbTRBoK2BDktiaXgtsAmGIpEuQmmBtHZ330/JuLFsZwwJerHPQJtrP9QvL/bBh
        73UoryjjAtW5RySdONhQnWTO3wEh58DTLTYKEt8kVDIkvhRpnA6Dwwi+3xTn2uC/CU20Yo1NfqAv
        IBDtQV5vCFIbCRbQhpJi/x+v0bCiNUeCJrIhKm2oLl9IDenNkb6PH/jlFs8B0qnjtRxSXh1L0J4G
        /usXuVDQsbq8saHRz57Wr1WOEnuRg08ROuwUrm2wqV4OF4I5JuEGFdpQ0hbzSfene/MPAAD//wMA
        ak3hI+MDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd85844ed1c2d46-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:15:21 GMT
      Function-Execution-Id:
      - vae2zl4ntvqs
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16334'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dd757168d81a3747b7a380297d6f9492;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85998'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.668s
      X-Request-Id:
      - 07c81354f8f0c55669d398be0c2e98fb
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks!\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file.\",\n        \"criticism\": \"I need to make sure
      I understand the instructions before proceeding.\",\n        \"speak\": \"I
      will start by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the file instructions_2.txt. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions tell
      me to read the file instructions_2.txt, so I will use the read_file command
      to do so.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file.\",\n        \"criticism\": \"I need to make sure I understand the instructions
      before proceeding.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5238'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTY/aMBCG7/0VozkbtIGmu811eyithFS1VSs1FTL2kLg4nsie7CKh/PcqBAqC
        HrjOx+PnTWaPzmKBptZimtZPHj//fP5o2x8vX5YvO/4alosPsWs/ZWaZ22dUyOs/ZOS4MTXctJ7E
        cUCFJpIWslhk757ybPaUz3KFDVvyWGDVymQ+zSfSxTVPHuYPGSrskq4Iiz22kZtWVsJbCgmLLJu/
        VXiGnxv5o0Jh0f5cmr3PeoWmZmcoYfFrjw2lEziyJyxQp+SS6CCDJgehMETYlwEAoESpuatqSSUW
        cCweG7SToVjit5og0E7AhSSxM4MWuATCEElbkJpg4zxd9tNqPpWdTGEBr8576BId5oaF1WHYcNPo
        YG8o0xLVpUcknTi4UJ1lLt8BIe+hoXtsFCS+S8gyJL4Wab0Oo8MEvt8V59bgvwlNdOKMS81IX0Ag
        OoAavSVIXSRYQBcsxeE/3qJhTRuOBG1kQ2RdqK5fSC3p7Yl+iB/49R7PEdKr07UcU94cS9ANjfx/
        X+RKQcfq+sbGxjB7Xr9VOUkcRI4+ZeixV7hxwaV6NV4IFpiEW1TogqUdFg/97/7NXwAAAP//AwC7
        8ofl5AMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd858c40d5562dc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:15:41 GMT
      Function-Execution-Id:
      - vae2glvonghx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16096'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4816931e58ca8eea585e8ffb32e0b6d1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85998'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.668s
      X-Request-Id:
      - f842009ee7c0e063a273f9f256d88534
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks!\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file.\",\n        \"criticism\": \"I need to make sure
      I understand the instructions before proceeding.\",\n        \"speak\": \"I
      will start by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the file instructions_2.txt. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions tell
      me to read the file instructions_2.txt, so I will use the read_file command
      to do so.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file.\",\n        \"criticism\": \"I need to make sure I understand the instructions
      before proceeding.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_3.txt.
      I will use the read_file command to read the file.\",\n        \"reasoning\":
      \"The instructions tell me to read the file instructions_3.txt, so I will use
      the read_file command to do so.\",\n        \"plan\": \"- Use the read_file
      command to read the instructions_3.txt file.\",\n        \"criticism\": \"I
      need to make sure I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will now read the instructions_3.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6211'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQYvbQAyF7/0VQmcnxHGcDb72UMK2PSwtlDYlTMaKPZvxyMzIm0Dwfy+2E7xJ
        YcvSqzTv6ZPmndHkmKEuleiqtpOHxx8fdVg+2V2y+PT0+Dn9+rNKX17m7stzU2CEvHsmLRfFVHNV
        WxLDDiPUnpRQjlm8XKXxfJUulhFWnJPFDItaJsk0nUjjdzyZJbMYI2yCKgizM9aeq1q2wgdyAbM4
        SVYRjuZj42ERobAoO5bSeN5GqEs2mgJmv85YUbgae7aEGaoQTBDlpMNkJ+S6Fc4bBwCwQSm5KUoJ
        G8zgUrw06CRdcYPfSgJHJwHjgvhGd1hgAgjD0RshkJJAVDhsTQ7GCfeFvbEE3EjdyFROMoU1HI21
        0IRB0Eu3wtv+oeaqUi7vPHOGwNMNRq9pPKnAzrhiRHpFE0DIWqjofUwRBP4/rNoqNxBN4Pu/HN4A
        G5l6xvsx2hsx2oRqmLUGR9RbVupAEBpPsIbG5eS7n857y5vz7GjPnqD2rIly44r7CaEmdbi69wdx
        fHwf8WDXRtdkXTb/K1hOVTRMurnUHZDyxX0mh0b3drQYMW709xGeJ/HiSthTXmA3rsU2wr1xJpTb
        IWSYYRCuMULjcjphNmt/tx/+AAAA//8DAGw4SwotBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd85945cdaf112f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:16:02 GMT
      Function-Execution-Id:
      - vae2gk5d9cje
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16444'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3b05a9c57ea518b4ceadab68465963f4;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85998'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.668s
      X-Request-Id:
      - 284372b6b35b02831e8f0e9c581e728c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks!\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file.\",\n        \"criticism\": \"I need to make sure
      I understand the instructions before proceeding.\",\n        \"speak\": \"I
      will start by reading the instructions file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the file instructions_2.txt. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions tell
      me to read the file instructions_2.txt, so I will use the read_file command
      to do so.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file.\",\n        \"criticism\": \"I need to make sure I understand the instructions
      before proceeding.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_3.txt.
      I will use the read_file command to read the file.\",\n        \"reasoning\":
      \"The instructions tell me to read the file instructions_3.txt, so I will use
      the read_file command to do so.\",\n        \"plan\": \"- Use the read_file
      command to read the instructions_3.txt file.\",\n        \"criticism\": \"I
      need to make sure I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will now read the instructions_3.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to write the task_id into the file output.txt. I will
      use the write_to_file command to do so.\",\n        \"reasoning\": \"The instructions
      tell me to write the task_id into the file output.txt, so I will use the write_to_file
      command to do so.\",\n        \"plan\": \"- Use the write_to_file command to
      write the task_id into the output.txt file.\",\n        \"criticism\": \"I need
      to make sure I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will now write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7238'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SST2/bMAzF7/sUBM9O4LRNWvg2DAsQ9LAeMqDDPASKzNhaJNGQ6CVd4O8++E+b
        rsOw5UpKv/f4yBOaAjPUlRLtaju5vX/8cFzb48Nj+mm5/uiKLz9n5v6qWT7US48J8vY7aRl/TDW7
        2pIY7lo6kBIqMJst7uazq7v54jZBxwVZzLCsZXI9nU+kCVuepNfpDBNsoioJsxPWgV0tG+E9+YjZ
        bD6/SfAMPzduFgkKi7Ln0m2atgnqio2miNnXEzqKz+DAljBDFaOJorx0NtkL+W6EU+4BAHKUipuy
        kphjBmNxbNBRumKO64oCgQoEnsFxIDA+Smh05y+CMOzYWj5MYQWx4sYWEKtGoOCDB6kIVElepjkm
        r/mBVGRvfHmZSAKRL9KprfKDxAQ+R+ofior7zZgxgWbnlC86jf/g6WDEaBPdAF2BJ+r/OrUniE0g
        WEGlfvTcXqAAZW0P9KS7/YSn3kGELe26STtVMb78h3KsSe0vX8nBWAueD38ZblBok+eDGNP44x68
        cjSI/5beG48qlG9P6fW6B8D7Lo4+gHNEsdFdNrvG2qcXV72z0WDuW2wT3BlvYrUZcJhhFK4xQeML
        OmKWtt/ad78AAAD//wMA3V1Le9gDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd859c7fec62d25-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:16:26 GMT
      Function-Execution-Id:
      - vae20gsvbqf5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19703'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 84407494c070782a7673cc708f06a176;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85996'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.668s
      X-Request-Id:
      - d0f49baf99eaac44bb4d42fa9d196536
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3479'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6STwW7bMAyG73sKgmcniNE1WX0rsGHtDuuAZqe5CBSZtrXIlCHRSLLA7z6odtIt
        GXLZlSL5fz9JHdAUmKGuleimtZPF03Oql4uHyn77tHhe3j98/VJ+Fv9kP259iwm69U/SMlZMtWta
        S2IcY4LakxIqMEvnH+azeXp3O0+wcQVZzLBqZXIzvZ1I59duMruZpZhgF1RFmB2w9a5pZSVuQxww
        WyzuEnzrfYqn8zRBcaLsKXT3ftYnqGtnNAXMfhywoXBs650lzFCFYIIolgjpWIijgUPOAAA5Su26
        qpaQYwZjcHygncRgjo8QatfZAoIoL7DegydVGK5AagLDQXynI2pYpVPZCZTGEoiDgoR8Y5hgWysB
        NSTFF1EbAqadTHNM/lT1pIJjw9UgvbwiEM0oE/vVsZeOzv0eDJfONyqm/80wpO0EglAbzoVbq3jQ
        nMD3MGRHm6tRq2kUF7FhDF4znuc8gXtWdv+LLvKuEZ0BaW/EaBOa4xKY6BWAOHQ+FiuBR1ANlM5a
        t/3XPkBp3XklZPcQ8aksjTbEYvfn/kNLanOU2hpr/2PbF5MehPrkeHTjOC9ujlVDA8Np9GeYylfn
        pzo8xNy38kvMI8QryMiTc499gqVhE+rVcHqYYRAXP7vhgnaYzfqX/t1vAAAA//8DAB6nl/kpBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315d9daaa1e271-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:32:50 GMT
      Function-Execution-Id:
      - 3nyo5k2g016x
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '13826'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 774bd18ba67f422c0c209807593320fe
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.334s
      X-Request-Id:
      - 43d72c43278a03824885875f7754dcc3
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file to determine what actions to take next.\",\n        \"reasoning\": \"The
      instructions_1.txt file contains the necessary information to determine the
      next steps.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_1.txt file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4624'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SST28TQQzF73wKy+dNlKVqEvYG4hIh1APtBRZFk1ln13TGs53x0oQo3x1t/jQl
        URBcbT+/n2feBrnCAm1j1PrWDSZ3X/KfDx/5k9zXn/Wu7Z6epvyV2S78hylmGBY/yOpBMbTBt46U
        g2CGNpJRqrDIx9PxaJy/m9xm6ENFDgusWx3cDG8H2sVFGIxuRjlm2CVTExYbbGPwrc41PJIkLPJR
        PsrwtPzUGI8z1KDGnUr5ZLzN0DaBLSUsvm3QUzoujsERFmhS4qRGtMcMoiT9CZtSAABK1CZ0daOp
        xAIOxUODVtoXS7xvCIRWCixJY2d7LOAEGiCSqUAbet1K87dDXSks2dEQZvDMzkGXaDfXC+Z9B2zw
        3kj1x5adpMTsNUckk4Kw1CeYK2bQn2dY0m6XkO3fIq6BZRmiNztsDVCRUvQsdBhbKSSlNp0bt87I
        3nMAD/+Ef4WrLGUA78W49S+6mPsb0RmQjaxsOfk91QyEaAdAkrrYi43CDIyHZXAuPLPUl3bG2i4a
        JbeGHp+WS7ZMom59fn9qyTwerf7jE69FocT99m12zN5BfRE9MZ72xi9OZ2wm1ueJ3Tf62ZP8EuUI
        sQM58JSyxW2GSxZOzXyfNywwaWgxQ5aKVliMtt+3b34DAAD//wMA6sAApjIEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315e13cd3ae247-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:33:10 GMT
      Function-Execution-Id:
      - 3nyo1h9nuuv5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15238'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d61095eca799b8eb837a45f6b50d0d84;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85993'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.67s
      X-Request-Id:
      - 8d7317b894e7b64aac61ac26291b6513
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file to determine what actions to take next.\",\n        \"reasoning\": \"The
      instructions_1.txt file contains the necessary information to determine the
      next steps.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_1.txt file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5655'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSQY/aQAyF7/0Vls8BkUWkS249VbSHVuq2Wqmp0OzESQZmPOmMo4Ui/nuVAMsW
        RNVebT+/zzNvh6bEHHWjRLvWjt5++nL3/mHtHj+U7cds8fj5p4R0NftmV4uqxAT904q0HBVj7V1r
        SYxnTFAHUkIl5ml2n02ydD7PEnS+JIs51q2MpuPZSLrw5EeT6STFBLuoasJ8h23wrpWl+DVxxDy9
        S+cJnpefG1mWoHhR9lya3s/2CerGG00R8+87dBRPi4O3hDmqGE0UxdJjehbi/oRdwQAABUrju7qR
        WGAOx+KxQRvpiwU+NARMGwHDUUKneywwEcRDIFWCNPS6FZfTsWwEKmNpDAt4NtZCF2mY6wXLvgPa
        O6e4/GPLICkwec0RSEXPhuszzA0z6M9ThuOwi0n3bxG2YLjywakBWzyUJBScYTqObQSiUBsvjVur
        +OA5gq//hH+Dqyh4BO9Y2e0vupr7G9EFkA5GjDbRHagWwEQDAHHsQi9WAgtQDipvrX82XF/bKa27
        oITsFnp8qiqjDbHY7eX9sSW1Pln9xyfeikKBh+375JS9o/oqeqwcHYxfnC7YVKgvE3to9LNn+TXK
        CWIAOfIUvMd9gpVhE5vlIW+YYxTfYoKGS9pgPtn/2L/5DQAA//8DAIuT8eQyBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315e93fca310ae-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:33:29 GMT
      Function-Execution-Id:
      - 3nyoezqb9zuo
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '13237'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dc83318c6d59f37c4c0d0ab7b598291e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85983'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.677s
      X-Request-Id:
      - 9ceca16382e7eeda32cf150db44aed85
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file to determine what actions to take next.\",\n        \"reasoning\": \"The
      instructions_1.txt file contains the necessary information to determine the
      next steps.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_1.txt file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I will use the
      read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6706'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SS34vTQBDH3/0rhnnelqS99kreBAWLgoj6opGwt5kme83+YHdiiyX/uyRpie0d
        otzrzM738xl2TqhLzFDVkpXxzez+4+fFt1+mDW9+Pr5PPtTrd7vd6wPJZmPefkKB7uGRFJ8n5soZ
        3xBrZ1GgCiSZSszS9WadrBdJuhJoXEkNZlh5ni3nqxm34cHNkmWSosA2yoowO6EPzngu2O3JRszS
        u+VC4BQ+NTYrgexYNlNpnd53AlXttKKI2fcTGoqX4OAawgxljDqytNxrOstk+xVOuQUAyJFr11Y1
        xxwzOBfPDTpyX8zxS01g6cigbeTQql4LdAR2cAiaCbgmYBn3hS5BW3ZDYacbAteyb3nOR57DFg66
        aaCN48AwWrArhofKGSNt+Q+Z8xzFn56BZHRW22qSfT66N64JpPfB+aAlX1EHrb/Cp12e9fCNtKPC
        DL6+YMcbzA1FBc1a6WhG1BYs0ZBINrahj5QMW5BmQGhbDZnKhUCK/3un6EnuL6QX/95T2MjqxOUY
        zzlPbtFKQ6PGFffGVobq9ozHRv92ipg0ruZvr36xTO8uhoPlWTa3HXYCd9rqWBfj9WGGkZ1HgdqW
        dMQs6X50r34DAAD//wMAIvTlbmAEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315f0aadb0111b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:33:52 GMT
      Function-Execution-Id:
      - 3nyo0snirji9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17338'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2f817dac91592999e0f844aeb66b36d1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85972'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.684s
      X-Request-Id:
      - 6187db5134c465c928d9a11bc2d401ce
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file to determine what actions to take next.\",\n        \"reasoning\": \"The
      instructions_1.txt file contains the necessary information to determine the
      next steps.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_1.txt file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I will use the
      read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I will use the write_to_file command to write the task_id into
      the file.\",\n        \"reasoning\": \"The write_to_file command is the appropriate
      command to use to write the task_id into the output.txt file.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I am writing the correct task_id into the output.txt
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      the task_id into the output.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"2314\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7784'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTY/TMBCG7/yK0ZzTKrvdLSU3JDhUQkJoFyFEVpXrTBNTx448Y9pS5b+jfHRb
        Cqw4RfJ4nveZeI5oCsxQV0p03djJ648PtzsOHxaHd+X7qj7sef+oq5/hUxG/fMUE/fo7aRk7ptrX
        jSUx3mGCOpASKjC7mS/m6fw2nS0SrH1BFjMsG5nMpvcTiWHtJ+ksvcEEI6uSMDtiE3zdyEr8lhx3
        gPs3CZ7h58LdXYLiRdnz0SKdtQnqyhtNjNm3I9bEJ3DwljBDxWxYlJNO0zsh141wzB0AQI5S+VhW
        wjlmMB6OBdpLd5jjY0WBQAUC52ETg1QUwDiWEHWnyCAeNt5av5vCEnbGWuAqChR+5yCycSVIRSCK
        t6txMgLt61q5YppjchkbSLF3xpVD9oNxmrrulw2SfweA4b6omib4Jhh1URIPkan7PPte+zRWuUFl
        Ap+ZXsi5pFxBdDBitOF6IC3BEfUN5DiGDqoEllCpHz2u5xagrAVHunvRcOhDGda08YH6IOn+69+U
        uSG1PSX1rxH/W3ya44Bqk9OGjNf+WBCnahpSfsNeyahQXu/W5UMPgLfWjvOdp+eou9E30drDs1Vv
        NgrmrsU2wY1xhqvVgMMMWXyDCRpX0B6ztH1qX/0CAAD//wMAorkiIekDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315f992965e1d7-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:34:10 GMT
      Function-Execution-Id:
      - 3nyopc29ny3b
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12653'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8f5ddf833543797bd86e7d5df2b78e26;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '82627'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 4.915s
      X-Request-Id:
      - 13116bf0f18ee8f57acc500776a4a0fe
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4155'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RTwY7aMBC98xUjnwmCAgvLbdWuunupulLbS1MhEw+JizOO7EmBovx75ThZKGzV
        63szfu/NjE8DAKGVWIHICslZWZlk8Rm/+U9uMX14+miq4+RoXt4fFo8fnua/Hl/EMHTYzU/MuO8a
        ZbasDLK2FOnMoWQMr07ulnfT2fLdctkSpVVoQltecTIdzROu3cYm4+l4EjtrL3MUKzgNAABE5WxZ
        8ZrtDsmLFdzPZsPInCXP7GQ+7Vi2LM0FMb5fDACaaK6wOsMAf2+Lo1Qwh/4v9RZ01gRESO+1Z0ks
        hmcys8RI7RxOKQUoFVzYOi/Yp+GdCHYEHjiAqXgGX9jaKPAsHcPmCA6l0pQDFwiaPLs6C9H8ejLi
        A8NWG4Ta9xWhet1imS1LSWqUiuGllEPpLWnKo96XAmGrnWfwjBVogq01xu7fUgTtgW0rEbgSJCmo
        SaEL6RXsC8lAiKot2yAoS3itXxlJUTqBrx7fNn0p86/QaUoJPJA0x994a5UtKGR0pabIEh5iRn9l
        KHOadaZ92S8gJAj9pdwh+NohPF+mvJHqzg3NETa4tQ6hcjZDDFu7Tu8rlLteaK+N+f+e27CjVMRn
        mmF/TN2obm6JZIlR4XWsVyaky69PMBKh9tx+O/feRGuk85NSI7qrb/rzF1tN2hfreGvhC3i21evv
        EJoUHsQKxi3QDAB+DJrBHwAAAP//AwDxOvw4cAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4cac22caec13ce-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 22:04:54 GMT
      Function-Execution-Id:
      - l4a1w35i3ewz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5912'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dceb34cc34315c8c3705bd8abd96fa82;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86412'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.392s
      X-Request-Id:
      - a117ea319e755e1e78c394a736ef4217
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them and understand what needs to be
      done.\",\n        \"plan\": \"- Use the read_file command to read the instructions_1.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5260'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xTy27bMBC8+ysWPFuGHTmO41tzaQO0aA99V4VBU2uJMbUUyFXjJNC/FxTl2JGL
        tteZ3ZnhavQ0AhA6FysQqpSsqtokVx/wS/qGv5fzm/ebz3fq9buv818mfbyxb7ffxDhs2M0dKj5s
        TZStaoOsLUVaOZSMQXW2WC7S+fLi+rojKpujCWtFzUk6uUy4cRubTNPpLG42XhYoVvA0AgAQtbNV
        zWu2OyQf5GaLq3Gkjp4n9OWsZ9myNCdEOluOANqYrrRaYYB/dMPRK6RD/8K+A501ARHSe+1ZEovx
        kVSWGKk7xFNGAcoEl7YpSvZZ0IlgT+CeA5iJWyDEHNiCQ5kDlwiaPLtGhff49cWE9wxbbRAar6no
        JsLousOUrSpJ+SQT41N9h9Jb0lREk49/UTV6h+YBQnypyYPMcx2GpHmxAlxKhmParTXG3g99ayMp
        WibwyeOfw/7PY7OMEnhF0jw84tlcEMiR0VWaIku4Z/CMtR8EUk6zVtpXw2tXcofgG4dwCw3l6MIH
        PY8EfbfCiTa4tQ6hdlYh5pqK4et9jXJ3MLrXxvz7m1J3wyjSjg+96Q91VhuSFUb956MOIkhXDNsW
        iTB7XD+PcwjRBenzZNSKvuDtoeliq0n7ch0bFtru2dbPP4LQlONerGDaAe0I4OeoHf0GAAD//wMA
        +knvYVwEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4cac6509dc22ff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 22:05:05 GMT
      Function-Execution-Id:
      - l4a1sugd39e9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5934'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 07b68ba24f3fe62d2e1ae32e2d8e896e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85909'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.727s
      X-Request-Id:
      - 892b4b4795bf7da7fad3ed5cc43dbb51
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them and understand what needs to be
      done.\",\n        \"plan\": \"- Use the read_file command to read the instructions_1.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      likely contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6223'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xTQW7bMBC86xULni3Djho79S1oewjQQ4A0KIqqMGhqLbGmlgq5Qpwa+ntB0Ypj
        uWh7ndmdGa5GhwRA6EKsQKhKsqobky7v8eun98unq4fHb3qeLT9sMpTVx9vPTw/VvZiEDbv5iYqH
        ramydWOQtaVIK4eSMajOFzeL7N1NNp/1RG0LNGGtbDjNptcpt25j01k2m8fN1ssSxQoOCQCAaJyt
        G16z3SH5IJct5pNInTzf0NcDy5alOSOuEoAupqusVhjg7/1w9Arp0J/Z96CzJiBCeq89S2IxOZHK
        EiP1hzjkFKBccGXbsmKfB50IHgnccwBzcQeEWABbcCgL4ApBk2fXqvAev86mvGfYaoPQek1lPxFG
        1z2mbF1LKqa5mLzVdyi9JU1lNPnyF1Wjd2heIMSXmjzIotBhSJqzFeBKMpzSbq0x9nns2xhJ0TKF
        R49/Dvs/j81zSuGWpHn5hRdzQaBARldriizhnsEzNn4USDnNWmlfj69dyx2Cbx3CHbRUoAsf9DIS
        HLsVTrTBrXUIjbMKsdBUjl/vG5S7wehZG/Pvb0r9DaNINxl6czzURW1I1hj1X486iiBdOW5bJMLs
        af0yzhCiD3LMk1MnjgXvhqaLrSbtq3VsWGi7Z9u8/ghCU4F7sYJZD3QJwI+kS34DAAD//wMAEgLs
        2lwEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4caca6ab6661ec-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 22:05:16 GMT
      Function-Execution-Id:
      - l4a1dfppxior
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6396'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 08401251155731cb4367b9fb8c76a325;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 1a8d7577cf973608ddc968669bbac68e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them and understand what needs to be
      done.\",\n        \"plan\": \"- Use the read_file command to read the instructions_1.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      likely contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      likely contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7206'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RT0Y7aMBB8z1es/BwQkIPj+IBeuUrVSW1V6ZoK+ZwlcYm9kb0RSCj/XjmGAqmq
        673O7M6M17vHBEDoQqxAqEqyMk09un/G788fHxZr+cU8zkv1VH14UU+fHrf8efki0tBBr79Q8blr
        rMg0NbImG2nlUDIG1eliucjultls2hOGCqxDW9nwKBvPR9y6VxpNssk0drZelihWcEwAAETjyDS8
        Ydqh9UFuPn9II3XxvKLvZyeWiWV9TWTTBKCL6SrSCgP8oy+OXiEd+hv7HnRUB0RI77VnaVmkF1KR
        ZbT9II65DVAuuKK2rNjnQSeCJwIPHMBcrMEiFsAEe6cZgSsEln630QVoy9QD1HLT8pgPDFtdI7Re
        27Jn+qYN06bHFRkjbTHORXrt5lB6stqW0fJrhaCtZ9eqMDMPjHUNBt8XIgVPcEnfevx3oFBQBBXJ
        w2xNLW2MNYJvb2n8f7qBi3KatdLeDIdu5A7Btw5hfaWuyDlU/KbL8DG+Qbk7W+x1Xb/nUy3tx7mI
        cl16XqHT6//aICsNRqebaQ0CSVcOly8SofYicYly0z/c1Vk2vTsn7FOewua2E6dD6M4XIbbaal9t
        4u6Fq/BMzZ+DEdoWeBArmPRAlwD8TLrkNwAAAP//AwA8EGtChAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4cacf10f2c638a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 22:05:28 GMT
      Function-Execution-Id:
      - ecstyqbwa1gl
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6427'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 623cdfffa9b324fbae99f0ddf4e246de;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85387'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.075s
      X-Request-Id:
      - d4082c56db7821b48f86c0d9ee74b0e3
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them and understand what needs to be
      done.\",\n        \"plan\": \"- Use the read_file command to read the instructions_1.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      likely contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      likely contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to make sure I understand the instructions completely before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions tell me to write the
      task_id into the output.txt file, so I need to use the write_to_file command
      to do that.\",\n        \"plan\": \"- Use the write_to_file command to write
      the task_id into the output.txt file\",\n        \"criticism\": \"I need to
      make sure I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file now.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8210'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQW/bMAyF7/4VhM5J4Mxt0+a209BbC2wYinkIFJmxtciSJ9JLgMD/fZBlp4m3
        oj2az/zeI8VTAiB0IdYgVCVZ1Y2Zr57w+5af0y86fW535qB+vxyfbrP0xd+wF7PQ4ba/UPHYtVCu
        bgyydjbKyqNkDNTl3f1ddnOfZVkv1K5AE9rKhufZ4nbOrd+6eZqly9jZkixRrOGUAACIxru64Q27
        PVoKuNWqBwWPs+eFnD0MKjuW5kJ4WH5KALqYrnJaYSj/6H+OXiEd0pV9X/TOhIqQRJpYWhazV1E5
        y2j7RZxyG0q54Mq1ZcWUB04sDgIeORRz8QiV/IMwjIAFSGOAKwSWtCfQtv/Qlti3KoxIMyAHj2AR
        C2AHVLUMhTtYaEnb8ty7GZGBXUtbLHIxu8zgUZKz2pYxyNeJTcy1RbSv4d6ynqIbI22kzuEb4duZ
        rigTiPKatdJUj4sabWu5R6DWI7yzvC3unMfegMNq/heVGpT70eGgjblYqHWHDyw10rrZ+OiD8s+b
        W1ljNLoiTfJIX07P5fK5IuBzGLMf8Tz6OUgfZsiU204MF9qNpyp22mqqNpEXzpXYNedLFtoWeBRr
        SPtClwD8TLrkLwAAAP//AwDKgKDyHQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4cad388fb42986-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 22:05:38 GMT
      Function-Execution-Id:
      - ecst0bi9u5h0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5647'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a255defa3a199c67fae568bdf5ec815b;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '84878'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.414s
      X-Request-Id:
      - aabb12030598c2cc89625a04e17fac59
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4156'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xSy27bMBC86ysWPMuGXT+a+AMKuGjRAk2ABlVg0NRaok2RAneFOjX07wVFKXac
        9HGd4c7MLueUAAidixUIVUpWVW1G778Weyq+f1z8osPd9ks53Zv7Tw/fjh+e1g+fRRom3HaPioep
        sXJVbZC1s5FWHiVjUJ0ub5azxfJmPu+IyuVowlhR82g2Xoy48Vs3mswm0zjZkCxQrOCUAACI2ruq
        5g27A1oSK7idz9LInC3P7HTxrmfZsTQXxOR2kQC0MVzptMIA/+geR6sQDumFewd6ZwIiJJEmlpZF
        eiaVs4y2u8MpswHKBJeuKUqmLOhEsCfwyAHMxBqodI3JgVh6hu0TeJS5tgVwiaAtsW9UWI020zEf
        GXbaIDQ0vAivNx2mXFVJm48zkV5aeZTkrLZF9LsrEXbaE0PhpAFNwK4T+ZtfCtLmb9t1CiVC5YhB
        1rV3tdeSEXbOA5eBlXS4DlUbaWOeEdwT/kH6P5JdCyuvWStN1XBdi9gJoaXGByPJsAZZXZxQOe9R
        RT0rqyH6S8833ahGeRicfmpj/v2Lg06UadOhKv3Or5oSAkWH5/tchZC+uC5YJIZ94vjrAw4huiB9
        nsy2ou90O5Rb7LTVVG5ik0LBiV393H2hbY5HsYJJB7QJwGPSJr8BAAD//wMAijGmA04EAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7d069c8022f8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:30 GMT
      Function-Execution-Id:
      - nb7zglvimyyp
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6208'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b26a797c945cf84babd2d42cc3603321;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '83127'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 4.581s
      X-Request-Id:
      - 166e559a25eef38edf97001225048299
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first goal
      is to read the instructions_1.txt file, and the read_file command is the most
      appropriate for this task.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5228'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xSXWvbQBB8169Y7lkydo1d47dS+hEotNCUPFTBXE5r6Wzp9nq3agRG/72czkoc
        JQW/zuzOzC5zSgCELsQWhKokq8bW2fsf5XHhi88fPv6k77ef/nTqTh2+/GX37evhTqRhgx4OqHjc
        milqbI2syURaOZSMQXWx3qyXq/VmtRyIhgqsw1ppOVvOVhm37oGy+XK+iJutlyWKLZwSAABhHTWW
        d0xHND7ILdarNFLPnhd0tAEQTCzrC2K52CQAfUxXkVYY4N/DcPQK6dC/sB9AR3VAhPRee5aGRfpM
        KjKMZnjEKTcBygVX1JYV+zzoRPBMYMcBzMUNGMQCmMChLIArBG08u1aFe/zu3Yw7hr2uEVqvTTlM
        hNHdgClqGmmKWS7SS32H0pPRpowmtxWCwY4vpUH7a1xTkKZ423RQqBAa8gzSWkfWackIe3LAVWCl
        P06j2VqamCqDXx7/I31Fsqmwcpq10r6ZPhaNb10wkgw3IJuLRypyDlXUM7IZo7/0fNPNW5TH0elR
        1zUYerwmcxTp07Ej54tfVSTEifpP35lEkK6cNisS4zVx/XWUMcQQ5JwnN704l7kfWy322mhf7WKb
        QrM9k30qvdCmwE5sYT4AfQJwn/TJPwAAAP//AwDOvP1zSAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7d3d9f3f2ab1-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:39 GMT
      Function-Execution-Id:
      - nb7z0318omai
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5958'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6e14bab6440d69429a34824fe91ab955
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85914'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.724s
      X-Request-Id:
      - 84a4185e053660e09d3a33e7b12f0277
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first goal
      is to read the instructions_1.txt file, and the read_file command is the most
      appropriate for this task.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The next instruction is to read
      the instructions_2.txt file, and the read_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_2.txt file.\",\n        \"criticism\": \"I need to ensure that
      I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will now read the instructions_2.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6172'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xSwY7TMBC95ytGPqdVS2gova2QkJYD4gAXCKq8zjQxjT3GnqiFKv+OHDe73e4i
        9frezHtvRu+UAQhdiw0I1UpWxnWzd1+a/d334+/1xz+fPtSmkGW/+Lx4//eOukMQedygh1+oeNqa
        KzKuQ9ZkE608SsaouizXZbEq1+WbkTBUYxfXGsezYr6ace8faLYoFsu02QfZoNjAKQMAEM6Tcbxl
        2qMNUa4ol3minjwv6FVxZplYdpfE8m0GMKR0LWmFEf4xDievmA7DM/sR9NRFRMgQdGBpWeRPpCLL
        aMdHnCoboUpwS33TcqiiTgLPBB45gpW4B4tYAxN4lDVwi6BtYN+reE/YFnM+Mux0h9AHbZtxIo5u
        R0yRMdLW80rkl/oeZSCrbZNMvrYIFo98KQ063OKag7T166ajQotgKDBI5zw5ryUj7MgDt5GVYX8d
        zXXSplQz+BbwP9I3JLsWVl6zVjqY68eiDb2PRpLhHqS5eKQi71ElPSvNFP2556tuwaHcT04H3XVg
        6XBL5iQy5FNHzhe/qEiMk/Qfv3MVQfrmulmJmK5J6y+jTCHGIOc8lR3EuczD1Gqx01aHdpvaFJsd
        mNxj6YW2NR7FBhYjMGQAP7Mh+wcAAP//AwD5qUNQSAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7d7708ff2bd8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:48 GMT
      Function-Execution-Id:
      - nb7zcib451oj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5702'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7caa6d07f7b67dfb4ab1bf4458eb7e34
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85912'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.724s
      X-Request-Id:
      - ed88b02632085c28ed87afe583aeb191
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first goal
      is to read the instructions_1.txt file, and the read_file command is the most
      appropriate for this task.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The next instruction is to read
      the instructions_2.txt file, and the read_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_2.txt file.\",\n        \"criticism\": \"I need to ensure that
      I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will now read the instructions_2.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The next instruction is to read
      the instructions_3.txt file, and the read_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_3.txt file.\",\n        \"criticism\": \"I need to ensure that
      I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will now read the instructions_3.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7136'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RTy67aMBDd8xUjrwHxKA+xbhe0ulIr3aq6aipknCHxTeJx7UlBQvn3yjG5QPqQ
        2J6T8/Bk5jwAEDoVGxAql6wqW45Wn7Pi08H+Om1f9rL48PSy/vn6/JR9/PL+W7YSw6Cg/Ssq7lRj
        RZUtkTWZSCuHkjG4Tpfr5XyxXK9mLVFRimWQZZZH8/FixLXb02gyn0yjsvYyQ7GB8wAAQFhHleUd
        U4HGB7vFcjqM1DXzhl51LBPL8paYzwYATWyXk1YY4O/txzErtEN/F9+CjsqACOm99iwNi+GVVGQY
        TTuIc2IClAjOqc5y9knwieCFwBMHMBFbMIgpMMHRaUbgHIGlL3Y6BW2YWoBqtjWP+cRw0CVC7bXJ
        WqYV7Zh2La6oqqRJx4kY3qY5lJ6MNlmMfM4RDJ4YtPHsahUGB9o/1mEI0qT/rtD65QgVeQZprSPr
        tGSEAzngPLDSF/2itpQmdhzBV4//sX+oaz9GOc1aaV/1fwEaX7vgKRm2IKubQStyDlX0M7LqHtJl
        /TXHW5RFl3HUZQmGjo/1jnbNsNuoy/v/WKhQKSbdzatXSLqsv4uR6F4VLa417vT91Z3Np++6hm3L
        S9nENOJyF013IOKgjfb5Lq5iOBLPZN/uR2iT4klsYNICzQDgx6AZ/AYAAP//AwBQzJV/kwQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7db10ada2dba-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:59 GMT
      Function-Execution-Id:
      - nb7zezbx24iq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7314'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dc41740074c66e9c45360cd25c83fb09;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85911'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.726s
      X-Request-Id:
      - 68066131eb07e6c6395dacd61ad23766
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first goal
      is to read the instructions_1.txt file, and the read_file command is the most
      appropriate for this task.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The next instruction is to read
      the instructions_2.txt file, and the read_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_2.txt file.\",\n        \"criticism\": \"I need to ensure that
      I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will now read the instructions_2.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The next instruction is to read
      the instructions_3.txt file, and the read_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the read_file command to read the
      instructions_3.txt file.\",\n        \"criticism\": \"I need to ensure that
      I am using the correct filename for the instructions file.\",\n        \"speak\":
      \"I will now read the instructions_3.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The next instruction is to write the task_id
      into the output.txt file, and the write_to_file command is the most appropriate
      for this task.\",\n        \"plan\": \"- Use the write_to_file command to write
      the task_id into the output.txt file.\",\n        \"criticism\": \"I need to
      ensure that I am using the correct filename for the output file.\",\n        \"speak\":
      \"I will now write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8156'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3xSTY/aMBC951eMfA4ImvKx3NpDJW6Vuruq1FTIJEPiTWK7nslChfLfK8dhF7Ki
        1/f8Pjwz5whAqFxsQGSl5Kyx9WT1vaiekfHr6Y+efzrMF8+PT9v1j+P628/qRcReYfYvmPFFNc1M
        Y2tkZXSgM4eS0bvOl+tlsliu10lPNCbH2ssKy5Nkuphw6/ZmMktm86BsSRYoNnCOAACEdaaxvGNT
        oSZvt1p9jgP1nnlFJw8Dy4ZlfUU8zJMIoAvtSqMy9PCv/nHI8u2QbuJ70JnaI0ISKWKpWcTvZGY0
        o+4HcU61h1LBpWmLkin1PgEcCDyxB1OxBY2YAxugsmXIzVEDlwj0lxgbaEnpogdYUrUbfoqQmaaR
        Op+mIr72dSjJaKWLYP5YIhyUljUoTezazM8IFN2Li0Hq/H5arywRGkMM0lpnrFOSEQ7GAZeelVSN
        O9la6lBnAk+E/7G/02psmDnFKlPUjCeImlrnAyTDFqwzrypHkBCmMrTEPsNHjH3JoqwunkdV16DN
        8V6jIOziy6qHP3zYtJYNBs+bP4+ipSvGR3K90GDwpb7ZI0EpXxH2iBoutvlbs77dUDLVnRgOtbtc
        rDgorajchQB/tcTGvh20UDrHk9jArAe6COB31EX/AAAA//8DAKvL0pAkBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7df5ce542252-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:28:09 GMT
      Function-Execution-Id:
      - nb7zbinbcbt1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6110'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b2a6ed8b3871a60067fb74de1d7f21f8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85908'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.728s
      X-Request-Id:
      - 661b45ed48a0bcec8da99b19c7f43483
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4257'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RRy27bQAy86yuIvehiGzJSJ7bOLdA0QNGgj0sRGOsVLW0tLYUlZbsx9O8FJTtO
        0fS2mBnOzJKnBMD4wuRgXGXFNW09vXv89GP/sKeH3eK5wI/PXz98eVxt3Pt3vD+QmegEbX6hk8vU
        zFHT1iiewki7iFZQXee3y9tFtliuFgPRUIG1jpWtTG9mi6l0cUPT7Cabj5Md2xJNDqcEAMC0kZpW
        1kI7DGxyWK2Wk5G5Rl7ZebY6s0Ji61fEPLtLAPqxXEXeocI/B/EYpeWQ/0ofwEi1IsYyexYbxEyu
        pKMgGIY9nFKpqCsr4TSHUyp4lDSH9B4Ovq6BxUaBzW+IaAsfSpAKwQeW2Dn9A6/nMzkKbH2N0PFF
        oer1gDlqGhuKdAJpRMsUfCjV/1vleYwo/R6hQbDgarQRulBg1MZDHm0HQ7G8Y7iHgFiAELQYtxQb
        tW1rG9TxO+Pb2XDwUg2UosFqViy7BoMAo6jdvz9SZxe9eOe5UfvPFFBBbtHuXm0o0AHwiK6T/8Sn
        vVqd37pibaAGL0q1tbEcD3DpqIo3avV9b8537C8HNVsfPFfrccF6VBZqX+5tfCjwaHLIBqBPAJ6S
        PvkDAAD//wMAr+BRskIDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb3f9aecf813f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:51:39 GMT
      Function-Execution-Id:
      - d29pcimyggdv
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3665'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - bb8788b9c5f1f78814c5225cc9f08291
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86427'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.382s
      X-Request-Id:
      - e19e585d1b0d4b3091068dc5dae781a8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=\"{''thoughts'':
      {''text'': ''I will start by reading the instructions_1.txt file using the read_file
      command'', ''reasoning'': ''This will give me a clear understanding of the tasks
      I need to perform'', ''plan'': ''Use the read_file command with the filename
      argument set to instructions_1.txt'', ''criticism'': ''None'', ''speak'': ''I
      will now execute the read_file command''}, ''command'': {''name'': ''read_file'',
      ''args'': {''filename'': ''instructions_1.txt''}}}\", type=''ai_response''),
      Message(role=''your computer'', content=\"Command None returned: Error: ''NoneType''
      object has no attribute ''lower''\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1205'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SSQYvbMBCF7/4VD118cYyzqdM2t1yWTSmFQtkWSgmKPYmVWhohjTdZlvz3Ijtp
        2uv79GbmPfSWAcq0agXVdFoa6/vZ+6+fvteP6+Nm19PT5x+tOc7Nc79fHJ7DcFRFcvDuSI3cXGXD
        1vckht2Em0BaKE2dLz8s66r+WNUjsNxSn2wHL7NFWc9kCDueVYtqPjmHqA+kVnjLAED5wNbLVvg3
        uahWeHhXFRO5r7zT5Q0Ki+7v+qKqMuAyndaxaSipP8e306J0GsX/do9i4D4pSsdoomgnqrjDhp2Q
        G1vY4KQjrrFLrCP2HGBf0WuhKNBNurTABlqErBdqIQw6UzMIQTpCIN1u96YnNGytdi1ORroRJdVp
        S9DhMFhygkiS/MZFCcM4O27npZylgI7wFEbfvxg+8ItpqYVxI1xv8ohr6BJPfKIXCsWIbgcEkiE4
        aqEdKAQOiKLFuAOk04L8Czv69uopx/Qf0OkIxyljMLsULO/5RCEv1bW1y60+tTfOxG4bSEd2qcIo
        7P+2q4xr6axWqEbhkgG/skv2BwAA//8DABPBU8WuAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb4366adc2c38-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:51:47 GMT
      Function-Execution-Id:
      - d29pzt1u1u89
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2055'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fe9770c8356f9a9575b7119903cf9033;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89716'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 189ms
      X-Request-Id:
      - 4d01dc75117c7db24a49009833e6ee2c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. As for my latest
      action, I attempted to execute the read_file command with the filename argument
      set to instructions_1.txt, as per the instructions provided in the AI''s message.
      However, the command returned an error stating that ''NoneType'' object has
      no attribute ''lower''."}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4631'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xUTW8TQQy951dYe9nLJkqafpEjQpRWHAoC9VChaDrj7JrOzmxnvCRRtP8deTZt
        EloESMDV9rPfe+PxZgCQkclmkOlKsa4bOzz7cHXzev3uzc3V+wd9Obmerj9eXFy/XZqHsjnPCkH4
        u6+o+RE10r5uLDJ516d1QMUoXSen56cn45NXk0lK1N6gFVjZ8HA6OhlyG+78cDwdT3pkG1WJ2Qw2
        AwCArAm+bnjO/h5dlHbjs+OiT+1m7tJHx+fbLHtWdg83PToaAHQ9u8qTRgnfpuJ+lrDDeDA+BYO3
        EslUjBRZOc6KXVJ7x+iSEZucK9+WFcd8BpucccX5DPJLWJK1wGEN7KGNCFwhWIo8X5DFCNrXtXJG
        srpCfQ+0SCXkIodWi8A4n4x4xSAAwBVFjkAuVek2BHQMhgJq9mE9ygvIA6roHbkyMej77YELuASt
        UgP3RCmgMonSPiMJArGwTEIjSGLhrfXLZyyhCf4bGTQj2J9pPEZwnvvhMjs54hAPRRMDRbBey+qI
        PgWGFgs81Ac+bIsrFeEO0YFBi4wmKW+sciL688+NXhJXKbfrqULZ1jImIgunF539wxdKJhAn+cU/
        c3k7QPwt/rKVOhCTpliLn58qiiDmgoqxrTECV4p/Z1FFyiGZl/f2BzU9PFH8tZJnS1V7Q4s11Ost
        Z619MORK2/+P2KC63/ud/+NbdmJp3zQdCKdqFAq7mcJMhbK/H09IqRnlXddl27PTPd6fbEGOYjXv
        f7vcoMi+eTpPGTmDq2wG4xToBgBfBt3gOwAAAP//AwCgLf+D8gUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb45be8fe112a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:52:00 GMT
      Function-Execution-Id:
      - d29pry08d1qe
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8300'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c23b88d7bae87cd954e711953376c07f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85921'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.719s
      X-Request-Id:
      - 6b3a067c2014e1e12bfad3ef42cfcb67
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created. As for my latest action, I attempted to execute the read_file command
      with the filename argument set to instructions_1.txt, as per the instructions
      provided in the AI''s message. However, the command returned an error stating
      that ''NoneType'' object has no attribute ''lower''.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''assistant'',
      content=\"{''thoughts'': {''text'': ''I will try to use the list_files command
      to check if the instructions_1.txt file exists in the current directory.'',
      ''reasoning'': ''If the file exists, I can then use the read_file command to
      read its contents and follow the instructions provided. If the file does not
      exist, I will need to check if it is located in a different directory or if
      it has been deleted.'', ''plan'': ''Use the list_files command with the directory
      argument set to the current directory to check if the instructions_1.txt file
      exists. If it does, use the read_file command to read its contents and follow
      the instructions provided. If it does not, check if it is located in a different
      directory or if it has been deleted.'', ''criticism'': ''This plan assumes that
      the instructions_1.txt file exists and is located in the current directory.
      If it does not exist or is located in a different directory, I will need to
      modify my plan accordingly.'', ''speak'': ''I will use the list_files command
      to check if the instructions_1.txt file exists in the current directory.''},
      ''command'': {''name'': ''list_files'', ''args'': {''directory'': ''.''}}}\",
      type=''ai_response''), Message(role=''your computer'', content=\"Command None
      returned: Error: ''NoneType'' object has no attribute ''lower''\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2173'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTTY/aMBC951eMfA4RFMJ2ufXQA+2hWrXq16pCxp4kXhJP5JksVCv+e+XAJhTa
        63sevw+PXxIA5axagTKVFtO09eTu4cO3H7v7j3t5//P5e5cv28VXfio+Hx7mn6YqjRO0fUIjr1OZ
        oaatURz5E20CasF462z5dplP8/v5oicasljHsbKVyTzLJ9KFLU2m8+nsNNmxLlGt4CUBAFBtoKaV
        jdAOPasVLObL9MSMkiM7ezM7s0Ki65HI87sE4HjyVpEzGNHH/uxJKXpD/ku8BwPVEVGa2bFoLyod
        SUNe0Pc1rEGLYNMKWhACPKDpBEEqhIDabgpXIxhqGu0t7J1UPRVRrxsEHcquQS/AKHHeeZbQmRiP
        N7NMDpLCthNwAgGlCx4taA8YAoUMvlQI79bAXVkiRwcdO1/2CrVj6cV5UBcCU6HZgSsGE4AHx8Lg
        fA+ZLoToxrqARij8hi0WFPDi4ptUg4020LOz0SC0tfZRr2P8n5uhi1Hruox/O7qOcVvZZbIM1kVs
        zxJyOvi5fRqhHgQn0WL/vAyRKKiuaX+jNKS9FABPko7unIBjqMnEPxEr1mBdUeBVIArnw5Vm2CJ6
        sFijoM3UeeWOr7unCucdV5uAmsnH/WOhdlhN5bzFg1rBtAeOCcCv5Jj8AQAA//8DANyzsErsAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb4e86869114d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:52:18 GMT
      Function-Execution-Id:
      - d29pjwq9uvcf
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3940'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f84d1b6d1af7d30d3fd522ce5f1abad3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89473'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 350ms
      X-Request-Id:
      - 53c2ba58d98f6d08c2f569a44b60ae6b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI attempted to execute the read_file
      command with the filename argument set to instructions_1.txt, but it returned
      an error. The AI suggested using the list_files command to check if the file
      exists in the current directory before using the read_file command. The AI provided
      a plan to use the list_files command with the directory argument set to the
      current directory to check if the instructions_1.txt file exists. If it does,
      use the read_file command to read its contents and follow the instructions provided.
      If it does not, check if it is located in a different directory or if it has
      been deleted."}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4948'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RTTW8TMRC951eMfE6ifDQtza0ghIoECKkSB4Iix57dHeK1V55ZGqjy35HX+eqW
        Q7nOm3nvzdjvaQCgyKolKFNpMXXjRjdfP34r23cf7ni7+DK/fv928Wf2mT5d3cz83VYN00TY/EQj
        x6mxCXXjUCj4DJuIWjCxTq/fXC8mi9urWQfUwaJLY2Ujo/l4MZI2bsJoMp9M82TLukS1hKcBAIBq
        YqgbWUvYoudEN50vhhk6a17AtzcHVIJodwHM57MBwD67qwIZTOXvXXPWSu6Qn8l3xRhcqijNTCza
        ixqeQRO8oO8O8bTyqbRSUoW2rIRXiScXDwDuJBVX6h4eyTloGUEqBEcs64IcMphQ19pbkACmQrMF
        KroW8iyxNWldXk/HshNIA4A7YmEg33WZNkb0ApYiGgnx93ilhpcWImoOnnyZfTxUCHf3wG1ZIgta
        aJl8+VpPrzEAGyxCxAviiNp2xEfeMTxUxPkiFboGagSLgrEmj8+0iKGJyEkg+dHGIDNtHPbXbJz2
        r730I0nVYWfPOpZtnVQYJW39783+74nGcF8ACdiAPISerRc3SeSpCCTJaffJuFu6CM6FxxeC0MTw
        iyzaSx3wQU5aJ68k6ZAumBTR9HAaLBUF9tYL8dBcaYYNogeLDgVt/9gmkpAhrvPFeyg3qLdHJAP7
        4TEqh21fJMXrGvPM+cF6vDqW/YRl4LRBJhgfVTvlg4GV36tDiPfHNKuCPHG1zhFJiWYJzSnsirzF
        nVrCpCvsBwA/BvvBXwAAAP//AwA3JCIyQAUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb51cffdc62c3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:52:29 GMT
      Function-Execution-Id:
      - d29p11mxshd1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6452'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f391b271e2314fc970923516e60d0383
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - ace81de7c8ad0b28164d4c5383d3276c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      attempted to execute the read_file command with the filename argument set to
      instructions_1.txt, but it returned an error. The AI suggested using the list_files
      command to check if the file exists in the current directory before using the
      read_file command. The AI provided a plan to use the list_files command with
      the directory argument set to the current directory to check if the instructions_1.txt
      file exists. If it does, use the read_file command to read its contents and
      follow the instructions provided. If it does not, check if it is located in
      a different directory or if it has been deleted.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'',
      content=\"{''thoughts'': {''text'': ''I will try to use the list_files command
      to check if the instructions_1.txt file exists in the current directory.'',
      ''reasoning'': ''If the file exists, I can then use the read_file command to
      read its contents and follow the instructions provided. If the file does not
      exist, I will need to check if it is located in a different directory or if
      it has been deleted.'', ''plan'': ''Use the list_files command with the directory
      argument set to the current directory to check if the instructions_1.txt file
      exists. If it does, use the read_file command to read its contents and follow
      the instructions provided. If it does not, check if it is located in a different
      directory or if it has been deleted.'', ''criticism'': ''This plan assumes that
      the instructions_1.txt file exists and is located in the current directory.
      If it does not exist or is located in a different directory, I will need to
      modify my plan accordingly.'', ''speak'': ''I will use the list_files command
      to check if the instructions_1.txt file exists in the current directory.''},
      ''command'': {''name'': ''list_files'', ''args'': {''directory'': ''.''}}}\",
      type=''ai_response''), Message(role=''your computer'', content=\"Command None
      returned: Error: ''NoneType'' object has no attribute ''lower''\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2484'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3xTXWsbMRB8968Y9Gwfvjh2Gr81lBYHWgj0oVCKkaW9OzU67SHt1W6D/3vRObGd
        D/I6o92Z2V09jADlrFpCmUaLaTs/ubq7/TG/qTbd16S/1bez9lP5+a6cNV+2/65u1DhX8OY3GXmq
        Kgy3nSdxHA60iaSFctdy8WExn86vF1cD0bIln8vqTiazYj6RPm54Mp1Ny0Nln3RNaomHEQCoLnLb
        yVr4nkJSS1xeD32yxFHyxJYXl4+ssGh/IhYX5QjYH7w17Axl9Ofw9qCUvVF6Jj6AkX1GlE7JJdFB
        1PhEGg5CYRjDClqE2k7IQhh9IkhDiKTtunKeYLhtdbDYOmkGKqNBtwQd676lIEgkudaFJLE3OVpa
        l4XsZIxNL3CCSNLHQBY6gGLkWOB7Q/i4QurrmlJW75ML9aDgXZJBPB3VhWEaMvdw1dEEaOeSJLgw
        QKaPMbuxLpIRjn+xoYojnTV+larACpaMs8/Tv2HgGP/U/mX+t028dP56SudhCqyqPDDLlMZYYeu8
        f2cpwgMIJ9npsNSETFTsPW9fCaKL/CenPddBYDlqBaLn03YCl+DZ5I+RZ61hXVXRi5gcHx83OmFD
        FGDJk5At1OPd7Z8OUFUuuNSsI+nEIR9hEu6O96lcsLRTS0wHYD8Cfo32o/8AAAD//wMAUKD6wfED
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb5b6bc931103-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:52:51 GMT
      Function-Execution-Id:
      - d29pmd2q5a3a
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4099'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2d929a3b5470f265bc26fe45e3dd5b4b;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89397'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 402ms
      X-Request-Id:
      - ee8312bd18b534232640cf33de0d74d7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI attempted to use the read_file
      command with the filename argument set to instructions_1.txt, but it returned
      an error. The AI suggested using the list_files command to check if the file
      exists in the current directory before using the read_file command. I decided
      to use the list_files command with the directory argument set to the current
      directory to check if the instructions_1.txt file exists. If it does, I will
      use the read_file command to read its contents and follow the instructions provided.
      If it does not, I will need to check if it is located in a different directory
      or if it has been deleted."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the list_files command to check if the instructions_1.txt file
      exists in the current directory.\",\n        \"reasoning\": \"The AI suggested
      using the list_files command to check if the file exists in the current directory
      before using the read_file command. This will help me determine if the file
      is present and accessible.\",\n        \"plan\": \"I will use the list_files
      command with the directory argument set to the current directory to check if
      the instructions_1.txt file exists. If it does, I will use the read_file command
      to read its contents and follow the instructions provided. If it does not, I
      will check if it is located in a different directory or if it has been deleted.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"list_files\",\n        \"args\": {\n            \"directory\": \".\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command list_files returned: [''instructions_1.txt'',
      ''file_logger.txt'', ''instructions_2.txt'', ''instructions_3.txt'']"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6209'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTQW7bMBC86xULnmXDhiPH9geCNCjQtDkUqAqDptYSG4oUyFXs1tDfC5KSo9gF
        eglyneHszCyWpwSAyYJtgImKk6gbNbl9/PT9bvX0VbzU5vHuRt3s7OfCPvx5WJP+wlKvMLtfKGhQ
        TYWpG4UkjY60sMgJ/dT5crXMZtn6dhWI2hSovKxsaLKYZhNq7c5MZovZPCpbx0tkGzglAACssaZu
        aEvmGbXz4xbrLI3Uq+eIzpY9S4a4GhPZPAHoYrrKSIEe/hEeRy+fDt0b+wBaozzCuHPSEdfE0ldS
        GE2owyJOufZQzqgybVmRy/2cCPYEHsmDOXuqEKR2ZFvhC7jtfEpHgr1UCHiUjhxIDVQhiNZa1ASF
        tCjI2N9TuIeDVApah+GFRV5sg1KYuua6ADIBBEkO+oAOPLE3SplDUI3dobHmRRZYTHOWjgNb5M5o
        qcuY+pvUInoq6Sh4urOpRWqtxuJq+qhbCvcguP6I6I3iOqb+77oOkqpAeVTzGoHbsq391h2Sj/SP
        Ou8WVFhJUkhXx7QXrGuQPw9MJLp0OLS+wNWd+Q5Rcy57MZbb8vI8IzGsIMqvew8hQpA+T6471v+I
        bvgabC+1dNU2XpD/Ho5Mc/45TOoCj2wDswB0CcDPpEv+AgAA//8DAKWPlpmNBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb5fa3a112331-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:53:03 GMT
      Function-Execution-Id:
      - d29p0cc5w1mw
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5149'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 667319bbabfef11358a12603c49babfd;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - d386ca1f5a7259a40c586ab837c4546a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      attempted to use the read_file command with the filename argument set to instructions_1.txt,
      but it returned an error. The AI suggested using the list_files command to check
      if the file exists in the current directory before using the read_file command.
      I decided to use the list_files command with the directory argument set to the
      current directory to check if the instructions_1.txt file exists. If it does,
      I will use the read_file command to read its contents and follow the instructions
      provided. If it does not, I will need to check if it is located in a different
      directory or if it has been deleted.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'',
      content=\"{''thoughts'': {''text'': ''I will try to use the list_files command
      to check if the instructions_1.txt file exists in the current directory.'',
      ''reasoning'': ''If the file exists, I can then use the read_file command to
      read its contents and follow the instructions provided. If the file does not
      exist, I will need to check if it is located in a different directory or if
      it has been deleted.'', ''plan'': ''Use the list_files command with the directory
      argument set to the current directory to check if the instructions_1.txt file
      exists. If it does, use the read_file command to read its contents and follow
      the instructions provided. If it does not, check if it is located in a different
      directory or if it has been deleted.'', ''criticism'': ''This plan assumes that
      the instructions_1.txt file exists and is located in the current directory.
      If it does not exist or is located in a different directory, I will need to
      modify my plan accordingly.'', ''speak'': ''I will use the list_files command
      to check if the instructions_1.txt file exists in the current directory.''},
      ''command'': {''name'': ''list_files'', ''args'': {''directory'': ''.''}}}\",
      type=''ai_response''), Message(role=''your computer'', content=\"Command None
      returned: Error: ''NoneType'' object has no attribute ''lower''\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2489'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RTTW8aMRC98yue9gyrpREk4tZeWqJKVaUc+qEKGXt218HrWdmzARTx3ysvBAKk
        rXqd55n3MZ7nAZBZk82Q6VqJblo3uv16/41s8XF6t/nx8PnRze+/fK9kNSnvV6HIhqmDl4+k5aUr
        19y0jsSy38M6kBJKU8fTu+mkmBbFux5o2JBLbVUro5t8MpIuLHlU3BTjfWcXVUXZDM8DAMjawE0r
        C+EV+ZjNMCmK4R45UZ7Q8e34gAqLcidgejseALu9tpqtplT92b/dMyVtFM/I+2JglyqZitFGUV6y
        4QnU7IV8H8McSoSaVshAGF0kSE0IpMyitI6guWmUN1hbqXsoVb1qCCpUXUNeEElSr/VRQqeTtbgY
        57KRIZadwAoCSRc8GSgPCoFDjoea8H6O2FUVxcTeReurnsHZKD15PLILQ9ekV7DlUQRoY6NEWN+X
        dBdCUmNsIC0ctlhSyYFeDb5ylWMOQ9qac/dvCDjaP42/9P+2iEvl1ym9NpNjXqbADFMcYo61de4v
        SxHui7CSlPZLjUhAyc7x+ooQbeCn5PY1DzzLkcsTnadtBTbCsU6HkbJWMLYs6cImh8PjWkUsiTwM
        OZLE9EFFMuD9lpwSigJDT+S4TfEl6tYp7/+5g/+L8o//IscnXtMTheEeP0y/+qNDRL6MpWFjyy2a
        bS8ZSmsOxvrKbfPscF+7l0PLSuttrBeBVGSfji0Kt8c7zKw3tMlmKPrCbgD8GuwGvwEAAP//AwD2
        3pBc2QQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb6902b69112c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:53:27 GMT
      Function-Execution-Id:
      - d29p9m13p9nl
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5715'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 378dd13b7aac366dd1efc1e775f3324f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89395'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 403ms
      X-Request-Id:
      - e581a9f40e0ec5bf83d596ac93fa6415
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI attempted to use the read_file
      command with the filename argument set to instructions_1.txt, but it returned
      an error. The AI suggested using the list_files command to check if the file
      exists in the current directory before using the read_file command. I decided
      to use the list_files command with the directory argument set to the current
      directory to check if the instructions_1.txt file exists. If it does, I will
      use the read_file command to read its contents and follow the instructions provided.
      If it does not, I will need to check if it is located in a different directory
      or if it has been deleted. Based on the latest development, I planned to use
      the list_files command to check if the instructions_1.txt file exists in the
      current directory. However, the command returned an error, so I will need to
      modify my plan accordingly."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the list_files command to check if the instructions_1.txt file
      exists in the current directory.\",\n        \"reasoning\": \"The AI suggested
      using the list_files command to check if the file exists in the current directory
      before using the read_file command. This will help me determine if the file
      is present and accessible.\",\n        \"plan\": \"I will use the list_files
      command with the directory argument set to the current directory to check if
      the instructions_1.txt file exists. If it does, I will use the read_file command
      to read its contents and follow the instructions provided. If it does not, I
      will check if it is located in a different directory or if it has been deleted.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"list_files\",\n        \"args\": {\n            \"directory\": \".\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command list_files returned: [''instructions_1.txt'',
      ''file_logger.txt'', ''instructions_2.txt'', ''instructions_3.txt'']"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The instructions_1.txt file exists in the current directory.
      I will use the read_file command to read its contents and follow the instructions
      provided.\",\n        \"reasoning\": \"Since the list_files command returned
      the instructions_1.txt file, I can use the read_file command to read its contents
      and follow the instructions provided.\",\n        \"plan\": \"I will use the
      read_file command with the filename argument set to instructions_1.txt to read
      its contents and follow the instructions provided.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7486'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yTT2/bMAzF7/4UhM6OYa9IWuTW3jIMGIb9wbB5CGSZsbXYoifRbYrA332QFSdp
        umy7vieSv0dQ+whA6FIsQahasmq7Znb74e1Xuy0eHuj51zuquvtbTL889p/ff+sKErGvoOInKp6q
        EkVt1yBrMsFWFiWj75ot7hbzdJFm89FoqcTGl1Udz26S+Yx7W9AsvUmzUNk7WaFYwj4CABCdpbbj
        NdMWjRvbzdM4WKeZ5/bkMrFszoy7LI0AhkBXk1bo5e/j4zDL06F7MX4ULTVeEdI57VgaFvHJVGQY
        zbiIfW68lAuuqa9qdrnvE8SDgTv2Yi4+1QjaOLa98gHc+k3CO4aNbhAMYumACQoEi7JMYAVPummg
        dwhcB3E9PlXUttKU/rEXQbODA5FLchGfD7coHRltqisE2Ylg0rGEFo/N+TpzAh+1UQgrqOUjgmx8
        wbMHLq8QF7ghizGsQEkzJtMMspLavJg3hQHa/HX+RdaukSbE/OfqnjTXo+VVI1sEaau+RcPgkD3M
        H2b+z76V1ayVdm0AuXBdh3I7OcEY4umADmyv7sfjhZpjjou20laXZxeMKV0ofx1pghhBDjy5GcTh
        0ofp5MVGG+3qdbgmf/aOqTv+CKFNiTuxhHQUhgjgRzREvwEAAP//AwBj4eVAZQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb6e70a0222c3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:53:41 GMT
      Function-Execution-Id:
      - d29pyq74vrlp
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5165'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3a9f4a178f2753626ff9331718b7a376;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - b4f4cc118a7a3b32433e9f0d1b701ad7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      attempted to use the read_file command with the filename argument set to instructions_1.txt,
      but it returned an error. The AI suggested using the list_files command to check
      if the file exists in the current directory before using the read_file command.
      I decided to use the list_files command with the directory argument set to the
      current directory to check if the instructions_1.txt file exists. If it does,
      I will use the read_file command to read its contents and follow the instructions
      provided. If it does not, I will need to check if it is located in a different
      directory or if it has been deleted. Based on the latest development, I planned
      to use the list_files command to check if the instructions_1.txt file exists
      in the current directory. However, the command returned an error, so I will
      need to modify my plan accordingly.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'',
      content=\"{''thoughts'': {''text'': ''I will try to use the list_files command
      to check if the instructions_1.txt file exists in the current directory.'',
      ''reasoning'': ''If the file exists, I can then use the read_file command to
      read its contents and follow the instructions provided. If the file does not
      exist, I will need to check if it is located in a different directory or if
      it has been deleted.'', ''plan'': ''Use the list_files command with the directory
      argument set to the current directory to check if the instructions_1.txt file
      exists. If it does, use the read_file command to read its contents and follow
      the instructions provided. If it does not, check if it is located in a different
      directory or if it has been deleted.'', ''criticism'': ''This plan assumes that
      the instructions_1.txt file exists and is located in the current directory.
      If it does not exist or is located in a different directory, I will need to
      modify my plan accordingly.'', ''speak'': ''I will use the list_files command
      to check if the instructions_1.txt file exists in the current directory.''},
      ''command'': {''name'': ''list_files'', ''args'': {''directory'': ''.''}}}\",
      type=''ai_response''), Message(role=''your computer'', content=\"Command None
      returned: Error: ''NoneType'' object has no attribute ''lower''\", type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2721'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQwU7DMBBE7/mKlc9tlCqkRP0BaJEQHBFCletsmgXHG9kb0YD678gOULjO2/HM
        +DMDUNSoDSjTaTH9YJfXj7unG9w9lrf3O7ud6tfyrvp4GO/bhk+1WkQHH17RyI8rN9wPFoXYzdh4
        1ILx1dW6XlfFurgqEui5QRttx0GWZV4tZfQHXhZlsZqdY9BHVBv4zAAA1OC5H2Qv/IYuqA1UV9eL
        mVwiL7Ssv6GwaPvHVVcZwHmu1jEZjOpzup2DYjUM/7KT6NlGRekQKIh2ohYXaNgJuvQLWxisdg4b
        EIYxIEiHYCnIviWLAQz3vXaJmg7NG1CbTsgF8aOJM8J+lctJIBoATxQkALl0ZUbv0Qk05NEI+2kB
        h1GABDzK6GOsdoDes89hC+9kLTicy/TcUDtBP6WGoI1h35A72ilX31POP5tUS45Ct/eoA7u4KwgP
        v5MVuQZPagNFEs4ZwEt2zr4AAAD//wMA2lbOPkMCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb77e4dd7e245-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:54:01 GMT
      Function-Execution-Id:
      - d29p8vmpxrgd
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1385'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 04c0c5276cffdc5442c30f4c2a2fe791;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89337'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 442ms
      X-Request-Id:
      - af53588a70207b3e204eb0e38951f937
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI planned to use the list_files
      command to check if the instructions_1.txt file exists in the current directory,
      but it returned an error. I will need to modify my plan accordingly."}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I will use the list_files command to check if the instructions_1.txt
      file exists in the current directory.\",\n        \"reasoning\": \"The AI suggested
      using the list_files command to check if the file exists in the current directory
      before using the read_file command. This will help me determine if the file
      is present and accessible.\",\n        \"plan\": \"I will use the list_files
      command with the directory argument set to the current directory to check if
      the instructions_1.txt file exists. If it does, I will use the read_file command
      to read its contents and follow the instructions provided. If it does not, I
      will check if it is located in a different directory or if it has been deleted.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"list_files\",\n        \"args\": {\n            \"directory\": \".\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command list_files returned: [''instructions_1.txt'',
      ''file_logger.txt'', ''instructions_2.txt'', ''instructions_3.txt'']"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The instructions_1.txt file exists in the current directory.
      I will use the read_file command to read its contents and follow the instructions
      provided.\",\n        \"reasoning\": \"Since the list_files command returned
      the instructions_1.txt file, I can use the read_file command to read its contents
      and follow the instructions provided.\",\n        \"plan\": \"I will use the
      read_file command with the filename argument set to instructions_1.txt to read
      its contents and follow the instructions provided.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The instructions_2.txt file needs to be read. I will use the read_file command
      to read its contents.\",\n        \"reasoning\": \"The instructions_1.txt file
      instructed me to read the instructions_2.txt file. Since I have already used
      the read_file command before, I can use it again to read the contents of the
      instructions_2.txt file.\",\n        \"plan\": \"I will use the read_file command
      with the filename argument set to instructions_2.txt to read its contents.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7808'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yTQW/bMAyF7/4VhM6O4TRImuW4W4ZhRbddhnkIaJmxtdqSIdFthsD/fZBlJ2m6
        bLu+J5LfI6hjBCBUITYgZIUsm7ae3T9++Pb4/l338JB+6iR3uNjLtMDPH/GZchH7CpP/JMlTVSJN
        09bEyuhgS0vI5LvOV+vVMl2ly3QwGlNQ7cvKlmeLZDnjzuZmli7SeajsHJYkNnCMAABEa03T8o7N
        E2nn293fzeNgnWde2Kt0dNkw1hfGej2PAPpAVxklycvfh8dhlqcj92r8IFpTe0Wgc8oxahbx2ZRG
        M+lhEcdMeykTXJmurNhlvk8QR4MO7MVMfK0IlHZsO+kDuN0i4QPDXtUEmqhwwAZyAktYJLCFF1XX
        0DkCroK4G55K0zSoC//Yi6DYwUjkkkzEl8MtoTNa6fIGwd2ZYNKpgIZOzfk2cwJflJYEW6jwmQBr
        X/DLAxc3iHPaG0sxbEGiHpIpBixR6VfzpjBg9n+df5W1rVGHmP9c3YviarC8qrEhQFt2DWkGR+xh
        /jDzf/YtrWIllWsCyJXrWsKnyQlGH08HNLK9uR+PF2pOOa7aoi2vzy4YU7pQ/jbSBDGAjDyZ7sV4
        6f108mKvtHLVLlyTP3vHpj39CKF0QQexgXQQ+gjgR9RHvwEAAP//AwD1U+MzZQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bb7c1cd562a5d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 17:54:16 GMT
      Function-Execution-Id:
      - d29pt6f5syj0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5384'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - af5f573b20a327ac130e697123f38a0b;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 2685075173fd89eac29e5bd77147f9de
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=\"{''thoughts'':
      {''text'': ''I will start by reading the instructions_1.txt file using the read_file
      command'', ''reasoning'': ''This will give me a clear understanding of the tasks
      I need to perform'', ''plan'': ''Use the read_file command with the filename
      argument set to instructions_1.txt'', ''criticism'': ''None'', ''speak'': ''I
      will now execute the read_file command''}, ''command'': {''name'': ''read_file'',
      ''args'': {''filename'': ''instructions_1.txt''}}}\", type=''ai_response''),
      Message(role=''your computer'', content=''Command read_file returned: This task_id
      is 2314\\nRead the file instructions_2.txt'', type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1214'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RQy07jMBTd5yuOvG6jtClp6ZIdSEggEIw0GkWufduYJnawbwQI9d9HdvqApc+5
        5+XvDBBGizWEaiSrrm+ny8c7I8s/uwf7rIvN+70vX7+W+5ZvXq6XT2ISFW7zRopPqly5rm+JjbMj
        rTxJpug6q1bVVVFVqyIRndPURtmu52mZX0158Bs3LcpiNiqHIHck1vjOAED03nU91+z2ZINYY75Y
        TEbmEnlhF/MjyY5l+0O1qjLgMFZrnFEU0b/pdgyK1Sj8yk6gd21EhAzBBJaWxeRCKmeZbPqFW3zI
        gOPsHLcILD2TxuYLnqQ2dgduCMYG9oOKtUM9y/mTsTUtYQini3hdJ0y5rpNW53huzg944sFb0pBg
        Gfa10XBbzMvZApE++ZNGR2CX7JJvsvwVP4/xuTjuOZyGia2xJjS1JxmcjeMCu/68Wxir6VOsUSTg
        kAH/skP2HwAA//8DAIsIH9hIAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc71f8dfb2b24-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:04:42 GMT
      Function-Execution-Id:
      - d29pjwc8nyml
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1471'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2cabf4955308f8ddbe470e11ea70f2f0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89713'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 190ms
      X-Request-Id:
      - 664bb5ddd3718b6d0370d1b06416ec7c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I started by reading
      the instructions_1.txt file using the read_file command. The command returned
      a task_id of 2314 and instructed me to read the file instructions_2.txt."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4529'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSy4rbQBC86yuauehiG2sXy0bXvWxeSxZyCIRgZkdtaeKZaTHTwgajfw8t2V4n
        2UAOuVZ1VfXrlAEoW6sKlGk1G9+5+fr5vW2f17ty9/jpw+cH9JE+xsfD1/7p6PZqJgp6+YGGL6qF
        Id85ZEthok1EzSiuRbkpV8uy3KxHwlONTmRNx/P7xWrOfXyh+fJ+WUzKPukGVQWnDABAdZF8x1um
        PYYkdstVOZuo18wb+m51ZplYuxui2BQZwDB115I1KPC3sXjKku4w/RI/gpGcIEqnZBPrwGr2ShoK
        jGFcxCnnlvqm5ZRXcMoZj5xXkL+Dg3UO+oTALUJEXW931iEY8l6HGphGcGRtSBx7I0Ol7d2CjwxS
        m88gj6gTBRsaMf3ye21xrb3iWIPHf3GHPtnQvN2dJHdOBwl90M79ZYaD5XakBA3aI+jY9B4DQ0KW
        Jv7MFmsTLVtjkxf/JwrjpKlDvb9ZXaADmP+cPUj4eUS5lugk8movjejYTLe8OEvFW2bDoM4vMVx+
        Q+1ssKndTmeT/0hM3fV1lA01HlUFyxEYMoDv2ZD9BAAA//8DAG+2VmKOAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc74c7a2f7f6c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:04:51 GMT
      Function-Execution-Id:
      - jeyrzohpf7lo
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4383'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0d29606f0adb8bd061c5207afd38e09e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85927'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.714s
      X-Request-Id:
      - 6652a02eb085fe0e4a3502775d75a8a5
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created. I started by reading the instructions_1.txt file using the read_file
      command. The command returned a task_id of 2314 and instructed me to read the
      file instructions_2.txt.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''assistant'',
      content=\"{''thoughts'': {''text'': ''I will use the read_file command to read
      the instructions_2.txt file'', ''reasoning'': ''The instructions_1.txt file
      instructed me to read the instructions_2.txt file using the read_file command'',
      ''plan'': ''Call the read_file command with the filename argument set to instructions_2.txt'',
      ''criticism'': ''None'', ''speak'': ''I will now call the read_file command
      with the filename argument set to instructions_2.txt''}, ''command'': {''name'':
      ''read_file'', ''args'': {''filename'': ''instructions_2.txt''}}}\", type=''ai_response''),
      Message(role=''your computer'', content=''Command read_file returned: Read the
      file instructions_3.txt'', type=''action_result'')]\n\"\"\"\n"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1445'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SQS2/CMBCE7/kVK58hCgmPwq2XSuVCEa1aqaoiYy/EJfGm9kalQvz3ygmvnnr0
        fDMejw8RgDBazECoQrKq6rI/Wc7Nz+qhXOCyoS+9er1f28XbcvVEc34RvZCg9ScqPqdiRVVdIhuy
        HVYOJWO4dTC+G4+S8SQZtqAijWWIbWvuZ/Goz41bUz/JkkGXbLzcopjBIQIAELWjquacaYfWixmk
        06TXkWvllWbTE2RiWd7o6TQCOHZPK8goDOp76+2KwtPQ/+luRUdlUIT03niWlkXvChVZRtv+wiN8
        Sw/GenaNYtTABA6lBi4QNqbECzNkfZ7GvGdovLHb1hGseWtTVFXS6hiei8sBHHLjLGqQwNLvcqOB
        NpBmgyEEfFNb4T/NWWiOxWnE8bxGbIw1vsgdSk82LPJM9WWsMFbjXswgaYVjBPARHaNfAAAA//8D
        AEIw6LQ9AgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc7b4bd1813ce-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:05 GMT
      Function-Execution-Id:
      - jeyr2s6fvinx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1294'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6072d58f376fd3976ed52b96aeeb9452;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89656'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 229ms
      X-Request-Id:
      - e00c5dbcc52edf0d04c3b58edda4ad6b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was instructed to read the file
      instructions_2.txt using the read_file command. The command returned a task_id
      of 2314 and instructed me to read the file instructions_3.txt."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4518'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3yST4/TMBDF7/kUI5/TKqGkXfWI4AASh5X4J8iq8jrTxK1jB3uiVlT57sh20i0p
        cH0v895vMr4kAExWbAtMNJxE26nF5vHDofjO7cem518fv21+HvTrL28OfXt8++4XS/2EeT6goGlq
        KUzbKSRpdLSFRU7oU/P1w7rI1ps8D0ZrKlR+rO5osVoWC+rts1lkqyyPk73jNbItXBIAANZZ03a0
        I3NE7XxcVqzSaL103tirV6NLhri6MfKHIgEYIl1jpEAv/wgfxy5Ph+6P+iBao7zCuHPSEdfE0hdT
        GE2ow4+4lNpLJaPG9HVDrvQ5URwNPJMXS/YeTlIp6B0CNQgWebXbS4UgTNtyXQGZIAZXake2F35T
        t8uXdCbw3y5Llt6mW+TOaKnrWPGpQagNVyCdT9sbpczpLg+k/l9HCgGmQdhL6wgcYTcGXvECd++k
        rv++y5yzU1xHxM//XP8kqbmGa94icFv3LWoCh+Tr74HnPcJKkkK6NpbNXNchP05ONIZ0uuCIcXdA
        TxJnrsizWG7r+d2jMS0Sx+/pJ4gAMvKUemDjUxumN8f2UkvX7OK1/btzZLrrk2RSV3hmW8iCMCQA
        T8mQ/AYAAP//AwB0wdZ15gMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc7e32a342c68-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:16 GMT
      Function-Execution-Id:
      - d29powcp1vp9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4360'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1b1077a3aa83b7597be136e68438e16d;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85927'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.714s
      X-Request-Id:
      - 2f75602abe9e68e0fdc6343280956e55
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"This task_id
      is 2314 Read the file instructions_2.txt\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '294'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQTWvCQBCG7/kVw55NSEyMkmt7aCsihRZaSpF1Myarm92wO7a2kv9eNlFDr+8z
        7wdzDgCYLFkBTNScRNOqcP78tL9b/+xf87evTFXrdLl8qNTLarX6Xb+ziXeY7R4FXV2RME2rkKTR
        AxYWOaFPTfJFPovzebLoQWNKVN5WtRSm0Syko92aME7jZHAeHa+QFXAOAABYa03T0obMAbVjBWR9
        jG+4NY4wyS+QDHE16nkWAHTDsNpIgV786E+HGj8M3b/mXrRGeYVx56QjrolNRiiMJtT9DzgQdwf4
        llTD4z1M0yQDMmCRl0A1wk4qBKkd2aPwk91mGtGJInZJ666xbCe1dPXGIndG+2hHpr21MqlLPLEC
        4l7oAoDPoAv+AAAA//8DAPaFu7zEAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc80bc9b06368-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:18 GMT
      Function-Execution-Id:
      - d29pm2ve54m1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '525'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 124bc5e3a45c7bf05182d0aca79bc5e3
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89455'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - 9484afc8c3af7144dd20184aa86af9eb
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["This task_id is 2314 Read the file instructions_2.txt"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '132'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        fwAAAP//AwD6HCtc4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc81b68fc2afa-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:20 GMT
      Function-Execution-Id:
      - d29ptmggqonq
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c1d4fbdb547ceaa30525d6ab147c1869
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 2d180bfc4c91e4917f513b48ee6469d0
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task with ID 2314 to read the file instructions_2.txt.", "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '133'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /1j+7T//8f8AAAD//wMAt3/quOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc827ed31e1cf-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:22 GMT
      Function-Execution-Id:
      - d29psy44ghbo
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '31'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d5ead87883518380d11b2c33078a9d4f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - cc302b93b06bec1be2ead08857aacdc9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was instructed to read the file
      instructions_2.txt using the read_file command. The command returned a task_id
      of 2314 and instructed me to read the file instructions_3.txt."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I will use the read_file command to read the instructions_1.txt
      file.\",\n        \"reasoning\": \"The goal is to follow the instructions in
      the instructions_1.txt file, and the first step is to read the file using the
      read_file command.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to instructions_1.txt.\",\n        \"criticism\": \"\",\n        \"speak\":
      \"\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5396'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSQY/aMBCF7/kVI58BQbLAwm1X6mFbqVXb7ampIq8zxF5iO7InCyrKf68cJ5QF
        Vb2+zzPvjWdOCQBTJdsCE5KT0E09XX/9+Pr5y8Y93vP18+bw7W3/wf5+kp++320eiE1ChX15RUFj
        1UxY3dRIypqIhUNOGLouVver5Xy1Tjc90LbEOpRVDU2z2XJKrXux03k2X8TK1vMK2RZOCQAAa5zV
        DRVk92h8aJdm60lEfz0v8XKgZInXFyBbpQlAF9NJqwQG+Wf/OHqFdOjf2feis3VQGPdeeeIm/sAA
        hTWEpv+IU26ClDOStq0k+Tz0ieIA8EhBzNkTHFRdQ+sRSCI45GWxUzWCsFpzUwLZXuypMp5cK8Kk
        vkhndCQIb2c5m1x2d8i9NcpU0eJZIjQO35Rt/bmtQ2qdwRI4EPf7QpVgd5BmizsIeHTCEjS+y9CH
        uw1ynaGpuYn2P/452kGRPPc0XCNwV7UaDYFHCq7/9xFOkRLK62h2RX2DfD+SCLrJuJ0hxs1yQpJY
        c4581Za76nqnEYyDxPLb9GOIPsiQJzcdG86oG++J7ZRRXhZxk+GmPNnmfG5MmRKPbAvzXugSgF9J
        l/wBAAD//wMAYyNAScIDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc851fb812dbe-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:33 GMT
      Function-Execution-Id:
      - d29pds0g34qh
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3680'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 171a0cfde4e7a2a1ee6c2192629d924d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.712s
      X-Request-Id:
      - bddf4bb402008d221ee2ab3b190aafcf
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Read the file
      instructions_3.txt\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '273'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQTU+DQBCG7/yKyZ6BQChUOWuN3kz0YI0h22XaboXdzc60Nmn472ahlXh9n3k/
        MpcIQOhW1CDUXrLqXZcsX18Ob0+0fqd1bk731D9X/vH0sPpZuQ8p4uCwmwMqvrlSZXvXIWtrJqw8
        SsaQmld3VZlVy6IcQW9b7IJt5zgp0jLho9/YJCuyfHIeSe5Q1HCJAACE87Z33LD9RkOihkUeT2Bu
        nGFeXCFblt2sl4sIYJiG7a1WGMTP8XSqCcOQ/jWPorddUIQk0sTSsIhnqKxhNOMPJLTao2J9QmAL
        HmULEsih0lutYKs7BCN7bEEbYn9UYTc1RcpnTsU1crhli602mvaNR0nWhHxi6/6qhTYtnkUN2SgM
        EcBXNES/AAAA//8DACPQqNXJAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc876ae701163-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:35 GMT
      Function-Execution-Id:
      - d29pldfgt73m
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '755'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4832e78e7037a380834118feb6dcde10;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89461'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 359ms
      X-Request-Id:
      - 988b2c63d8c7ecb7166d24d6f1337f51
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Read the file instructions_3.txt"], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '111'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc8886e8e811f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:38 GMT
      Function-Execution-Id:
      - d29p667wow7e
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '29'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 747188b576d00050d0bb5fde98b0f891
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 83af6265207d7d1007d260bc1f547bd1
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a directive to read a specific file named instructions_3.txt.",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '138'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc895ee02e178-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:40 GMT
      Function-Execution-Id:
      - d29pfbhwk0d1
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6ad1e71c8718d364962e4e7cd5227067
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 0d36cdbac75f9cd5b8bf3e9db5569c5f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was instructed to read the file
      instructions_2.txt using the read_file command. The command returned a task_id
      of 2314 and instructed me to read the file instructions_3.txt."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I will use the read_file command to read the instructions_1.txt
      file.\",\n        \"reasoning\": \"The goal is to follow the instructions in
      the instructions_1.txt file, and the first step is to read the file using the
      read_file command.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to instructions_1.txt.\",\n        \"criticism\": \"\",\n        \"speak\":
      \"\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the read_file command to read the instructions_2.txt file.\",\n        \"reasoning\":
      \"The previous command returned a task_id of 2314 and instructed me to read
      the file instructions_2.txt.\",\n        \"plan\": \"Use the read_file command
      with the filename argument set to instructions_2.txt.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6216'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSwW7bMBBE7/qKBc+yIUexHPhYoECTU4umh6IqDIbaSIylpUCuagOG/r0gKTmO
        jaLXedqZoXZPCYDQldiCUI1k1fXtYvPt6a3+/px/+bR/uqOf2cGsP0vpHr8Wm0MmUj9hXt5Q8Ty1
        VKbrW2RtKGJlUTJ611XxUKyzYnP/EEBnKmz9WN3zIl+uFzzYF7PI8mwVJwcnaxRbOCUAAKK3put5
        x2aP5LzdfVakEb1nXuDVZqJsWLYXYH2XJwBjbNcYrdDLv8LHMcu3Q/chPojWtF4R0jntWBKL9B0q
        Q4wUfsSpJC+Vghsz1A270vtEcQJ4ZC+W4hEOum1hcAjcIFiU1e5VtwjKdJ2kCtgEMVBNju2g/Evd
        Ll/ykcF/uyxFeuluUTpDmuoY8dwg9Bb/aDO4s61FHixhBZIubT/EhR63mddxfSspJv345ysOmpuz
        J8kOQdp66JAYHLJP/X+Ospq10q6LYVfU9Sj3M4lgTOdFTDVu9uCbxJlz5Stbaevr9UUwPySO37af
        S4QiU5+SRjFdzDifjnjVpF2zi0vz5+PY9OfLEpoqPIotZEEYE4DfyZj8BQAA//8DAF7lYXytAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc8c6aa3c2c38-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:05:52 GMT
      Function-Execution-Id:
      - d29p77cbdc8j
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4097'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - beafffa2d490030270c06b2642cb9461;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85933'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.71s
      X-Request-Id:
      - 424511258e14f524e747b4c1f1f5ec87
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was instructed to read the file
      instructions_2.txt using the read_file command. The command returned a task_id
      of 2314 and instructed me to read the file instructions_3.txt."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I will use the read_file command to read the instructions_1.txt
      file.\",\n        \"reasoning\": \"The goal is to follow the instructions in
      the instructions_1.txt file, and the first step is to read the file using the
      read_file command.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to instructions_1.txt.\",\n        \"criticism\": \"\",\n        \"speak\":
      \"\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the read_file command to read the instructions_2.txt file.\",\n        \"reasoning\":
      \"The previous command returned a task_id of 2314 and instructed me to read
      the file instructions_2.txt.\",\n        \"plan\": \"Use the read_file command
      with the filename argument set to instructions_2.txt.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n        \"reasoning\": \"The previous
      command returned an instruction to read the file instructions_3.txt.\",\n        \"plan\":
      \"Use the read_file command with the filename argument set to instructions_3.txt.\",\n        \"criticism\":
      \"\",\n        \"speak\": \"\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7035'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RSy47bMAy8+ysInZ0g2TTOIudemluLPlDURaCVGVsbW3Qlqg4a+N8LWXEeXqCX
        HjXD4QwpnhMAoQuxBaEqyapp69nm4+7V0/uOvh++Vn+On7pqV+9+ZQf8Vpy8SIOCXl5R8aiaK2ra
        GlmTibSyKBlD12X2nK0X2SZ7GoiGCqyDrGx5tpqvZ+ztC80Wq8UyKr2TJYotnBMAANFaalreMx3R
        uNBuvVmmkbp53tGrzYVlYlnfEZvFcwLQx3QVaYUB/jEUR6+QDt2D/QBaqgMipHPasTQs0hupyDCa
        YRHn3AQoF1yRLyt2eegTwQuBJw5gLj5Ap+savEPgCqGzmnHPtD/oGkFR00hTAFMkhhKW7rjXBWjD
        NABDKXluPc/5xPNcpPdeFqUjo00ZDT9XCK3F35q8uxpYZG8NFiANaOPYehXW+X/GbS1N9Pzyz+k6
        zdW1n5ENgrSlb9AwOOSQ4eYBwzpCGAyPSd1dymkYZTVrpV0TE01Y16I8jkwk+nT8xUvON58YokbN
        w1yT1tKW0/+PxDhtbHEb8UE/PZen1fLdmHBIeQmbm15cbrEfj1IctNGu2scDCIfpmNrrzQptCjyJ
        LSwGoE8AfiZ98hcAAP//AwBmwWgzBwQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5bc9240cae2d76-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 18:06:07 GMT
      Function-Execution-Id:
      - d29psygmzrk0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4621'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d52c8d5f4001b84a6d415c1910518946;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85933'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.711s
      X-Request-Id:
      - bf555698838a46991fb48ccd55c49535
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=''Command read_file
      returned: This task_id is 2314\\nRead the file instructions_2.txt'', type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '868'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1yQUWvCMBSF3/srLnnW0lprh28DfXBssMEmG3NITK82M0265FYF8b+PtNWyvZ4v
        55x7cg4AmMzZFJgoOImyUsPs5Wm8Udkhfs4+7h/V+9t8Of85lvOHKJst2cA7zOYbBV1doTBlpZCk
        0S0WFjmhT40nd5M0TrMkaUBpclTetqtomITpkGq7McMoieLWWTu+QzaFcwAAwCpryorWZPaonY9L
        7wYt6St7Oh51kAxx1eujKAoALu1phZECvfrZvG2L/Gno/nQ3ojXKK4w7Jx1xTWzQQ2E0oW5+YQFH
        7qCbHcICLAqUB8yBgzBlyXUOZMAi98pWKgTBlcIcVkxqR7YWfopbxyGdaMVCeC3w5rRItdVNGHG3
        h8UMzBZGSTwGj68BmEOJtxoqsC361zDqGlg35HJdxLZSS1esLXJntF/lyFS3wUzqHE9sClEjXAKA
        r+AS/AIAAP//AwCGiEGDQQIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca425da972958-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:35:34 GMT
      Function-Execution-Id:
      - skyqrlp34ceb
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1285'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d3f6ca1d73a7b3afa14fb181f6e31442;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89803'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 131ms
      X-Request-Id:
      - c642a0978f881921275e8e63b6436b9f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created. I received a command
      to read a file called \"instructions_1.txt\". The command returned a task ID
      of 2314 and instructed me to read the file \"instructions_2.txt\"."}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4522'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSTWvbQBC961cMe9FFNpIdO0a3XlJaSKGQQtOmmPVqIm2yH2J3RARG/73MKnbS
        hkIOvb735r23O3PMAIRuRA1CdZKU7c3i8uv1hb7+/nCzGvHj7W78TFdte/jwo6rM7ZUoeMIfHlDR
        aWqpvO0NkvZuplVASciu1Xa33VSby4syEdY3aHis7WmxXm4WNISDX5TrsponhyhbFDUcMwAA0Qdv
        e9qTf0QX2a7cbIuZesl8Ra9Xzyx5kuYVUe12GcA0t+u8VsjwzySes7gdxj/iExi8YUTIGHUk6UgU
        L6TyjtCljzjm1Pmh7SjmNRxzwpHyGvJP8KSNgSEiUIcQUDb7e20QlLdWugbIJzCx2kUKg+JHxf1q
        SSMBa5d5AXlAGb3TrmXXm7/F1Vl8xrEBi++xLyB6eE/PxkP0qUxvpOMe3/4pf9LUJYpRJy2CDO1g
        0RFEJHa7E2/73Ilkr4ImrXS0nPHFO2Qw9igf/9+XTpwzD6SFcUd2P9txpgztvM7TK1jx1jKfpkk8
        X8V0Og9xr52O3X5eHJ9IJN+fr0do1+AoaigTMGUAv7Ip+w0AAP//AwAQkWzFkQMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca4541dfe10a5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:35:44 GMT
      Function-Execution-Id:
      - skyq55ohgq24
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3650'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c1f9436a3ea4a6f2e90e93873e825776
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.712s
      X-Request-Id:
      - dad44e437507ff1a7331411282599f8d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created. I received a command to read a file called \"instructions_1.txt\".
      The command returned a task ID of 2314 and instructed me to read the file \"instructions_2.txt\".\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n[Message(role=''assistant'', content=''{\\''thoughts\\'':
      {\\''text\\'': \\''I will use the read_file command to read the instructions_2.txt
      file.\\'', \\''reasoning\\'': \\''The instructions_1.txt file instructed me
      to read the instructions_2.txt file, so I will use the read_file command to
      do so.\\'', \\''plan\\'': \\''Use the read_file command with the filename argument
      set to \"instructions_2.txt\".\\'', \\''criticism\\'': \\''None\\'', \\''speak\\'':
      \\''I will use the read_file command to read the instructions_2.txt file.\\''},
      \\''command\\'': {\\''name\\'': \\''read_file\\'', \\''args\\'': {\\''filename\\'':
      \\''instructions_2.txt\\''}}}'', type=''ai_response''), Message(role=''your
      computer'', content=''Command read_file returned: Read the file instructions_3.txt'',
      type=''action_result'')]\n\"\"\"\n"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1507'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RRTU/jMBC951eMfG6rhJCm2xsrtFIPq9WivaBlVRl72hhsj2VP+BDqf0dOGrog
        OPq9eR8zfikAhNFiDUJ1kpULdt7+/nn+HC7Kux/p2694fRUuW77qWqnRlddilhV0e4eKJ9VCkQsW
        2ZAfaRVRMmbXarlaNlXTNsuBcKTRZtk+8LxeNHPu4y3Ny7qsRmWf5B7FGl4KAAARIrnAW6Z79Ems
        oa7q2cicIk9s2xxJJpb2P9VqVQAcxmodGYUZ/TvMjkG5GqZ32QMYyWZEyJRMYulZzE6kIs/ohyts
        4FEmOK4N0muIqNA85Acoci5DTBBRargRxieOvcrt07Za8BPfiAX86fBtNiL30Q9ylukeNpdAOzir
        q/PBfTJADQ6/Mj6bjL/LhBrIA3cIVjImBo0PaCk49DyDDfR5ItPZaLsz9lTl0XA3UBn10iHIuO+z
        EBJyDv8q99OFuJMMG0gd9VaPvSfzj0b10Ugcb36Yji92xpvUbSPKRD5/QGIKb38jjNf4JNZQDsCh
        APhXHIpXAAAA//8DAKlGGyLsAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca4b63e0dc518-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:35:59 GMT
      Function-Execution-Id:
      - skyqgu0ugzw5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2460'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a58c8852a28cd34dcf72d22e4cb7358d;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89649'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 233ms
      X-Request-Id:
      - 7e180e4b8e94e89b114e3ff9657ea3b4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and received a command
      to read \"instructions_1.txt\". The command returned a task ID of 2314 and instructed
      me to read \"instructions_2.txt\". Based on the latest development, I used the
      read_file command with the filename argument set to \"instructions_2.txt\".
      The command returned that I should read the file \"instructions_3.txt\"."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4693'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSy46bMBTd8xVX3syGRGRSSJo/6PT9XpQq8pgbcINtZF+aSBH/XhkDkxJVmkW3
        5/g8bJ9LBMBkwXbARMVJqKZebD6+TbfuU3KSrx++Hd59eDgeV+nn74f3v8/bNyz2CvP4CwWNqqUw
        qqmRpNGBFhY5oXddZdssXaWbLOsJZQqsvaxsaLFepgtq7aNZJOtkFZSt4yWyHVwiAADWWKMa2pM5
        onbeLtm+jAP1lHlFp5uBJUO8viLuX2QRQBfaVUYK9PCP/nDI8u3Q/RXfg9bUHmHcOemIa2LxEymM
        JtT9Q1xy7aGcUWXasiKXe58ADgSeyYM5ewUnWdfQOgSqECzyYn+QNYIwSnFdAJke7FmpHdlW+Ju6
        /XpJZwJ/dpmz+NrdIndGS12GiC9z5f2knHAsQOFzsmJwBp5dWtK8W1NzHWp9/af6JKnqKY9qrhC4
        LVuFmsAhefO723Z38yRhJUkhnZpewSJIB9rARMHBWKBKOvC95g6uQX78r98U3Lt4HMigvtmHv3QI
        npJm3bgt57MKxPhmQX5bZSzRFxn65Lpjw5K7cdLsILV01T6Myc/akWmmxTOpCzyzHSQ90EUAP6Mu
        +gMAAP//AwBijbkfRQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca4f44dd8230b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:11 GMT
      Function-Execution-Id:
      - gomhkume4wsb
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4422'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0d46732b8f9c2ec998ed782e0a49bb0a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85921'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.718s
      X-Request-Id:
      - bbe6e71c04620f1ca46d2910efabfd6e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and received a command
      to read \"instructions_1.txt\". The command returned a task ID of 2314 and instructed
      me to read \"instructions_2.txt\". Based on the latest development, I used the
      read_file command with the filename argument set to \"instructions_2.txt\".
      The command returned that I should read the file \"instructions_3.txt\"."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n        \"reasoning\": \"The instructions_2.txt
      file instructed me to read the instructions_3.txt file, so I will use the read_file
      command to read it.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to ''instructions_3.txt''.\",\n        \"criticism\":
      \"There is no criticism for this plan.\",\n        \"speak\": \"I will use the
      read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5664'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTS2vbQBC+61cMe8lFNnb8jI/tIbS00NIGClExa2ksbSztqLuzsYPRfy+rtfwK
        lOTQ6/ft99BoZh8BCJWJBYi0kJxWddmbff86+bKt84x/3P/KP3/76B7+lE7uPjyt7l9E7BW0esKU
        O1U/paoukRXpQKcGJaN3HU7n08lwMpvdtURFGZZeltfcG/UnPXZmRb3BaDAMSmdljmIB+wgAQNSG
        qpqXTBvU1tvd3o3jQJ0yz+j59MAysSzPiPF8EAE0oV1BKkUPP7aPQ5Zvh/YivgUNlR4R0lplWWoW
        8YlMSTPqdhD7RHsoEVyQywu2ifcJ4IHAHXswEZ9gq8oSnEXgAmFrFOOSablWJUJKVSV1BkyBaJ+w
        tJulykBpphYgx7XjPu8YvKqfiPg8y6C0pJXOQ+DPAsGgzC4TDLIzGjOQR38uJINGzKzPXyFY+YxZ
        DJbgfaUVv7lrXUodaj7803uruGhpj2pZIUiTuwo1g0X20TenpBto6/jR4Y5fvTyf6XEMq5cWrw0+
        K3K2C77umxrFKlW2Os7WICgLmuBIwZoMcKEs+K+7drA1ys1/XIWQ1cTdSh58Xm2kH2KocZF71Vaa
        /HqZA9H9h2BxqnGhv97929Fw3DVsWx7KJroRh8NqugsTa6WVLZZhm/2VWab6eIBC6Qx3YgGDFmgi
        gN9RE/0FAAD//wMARF/N+tQEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca54768a1222e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:25 GMT
      Function-Execution-Id:
      - gomh6nwapqkn
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5392'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 31547ddde6bdb09ec37bde6a30db69a5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85923'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.718s
      X-Request-Id:
      - 7a4e3973becca5964734b02b2802641c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and received a command
      to read \"instructions_1.txt\". The command returned a task ID of 2314 and instructed
      me to read \"instructions_2.txt\". Based on the latest development, I used the
      read_file command with the filename argument set to \"instructions_2.txt\".
      The command returned that I should read the file \"instructions_3.txt\"."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n        \"reasoning\": \"The instructions_2.txt
      file instructed me to read the instructions_3.txt file, so I will use the read_file
      command to read it.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to ''instructions_3.txt''.\",\n        \"criticism\":
      \"There is no criticism for this plan.\",\n        \"speak\": \"I will use the
      read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the write_to_file command
      to write the task_id into the output.txt file.\",\n        \"reasoning\": \"The
      read_file command returned a task_id that needs to be saved, so I will use the
      write_to_file command to write it into the output.txt file.\",\n        \"plan\":
      \"Use the write_to_file command with the filename argument set to ''output.txt''
      and the text argument set to the task_id returned by the previous command.\",\n        \"criticism\":
      \"There is no criticism for this plan.\",\n        \"speak\": \"I will use the
      write_to_file command to write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6759'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xSz2vbMBi9+6/40KUXJ8RLnXQ57jDoYbDCCoN5BFX+Ymu19HnSZ5oR/L8PWXaa
        OhR22PU9vR+S3ikBELoUOxCqlqxM2yy2D19y+bn+hN/pYXOfOW9/m8e7r7yibYsiDQp6+oWKJ9VS
        kWkbZE020sqhZAyu2eZuk2f59uPtQBgqsQmyquXFepkvuHNPtFitV1lUdl5WKHZwSgAAROvItLxn
        ekbrg13+YZ1G6jXzks5Glollc0FstrcJQB/b1aQVBvjHcDhmhXbo38QPoKMmIEJ6rz1LyyJ9JRVZ
        Rjs8xKmwASoE19RVNfsi+ERwJPDIASzEPbzopoHOI3CN4FCW+4NuEBQZI20JTAM4sNp6dp0KN/X7
        9ZKPDOHsshDppbtD6clqW8WIb+8rwcg/EJpLbeHQOa7RvTmbgif4546a51XaRtrY4vFd9YvmeqAC
        aqVBkK7qDFoGjxzMb67r38yTlNOslfbmfGmHoD1YgjMFB3LAtfYQes0dfIvy+b/+SnTv02kPo/pq
        DuHSMficNOsmXTVfUSSmN4vy6ypTiaHI2KewvRiH208LFgdtta/3cTthxZ6pPQ9caFviUexgNQB9
        AvAz6ZO/AAAA//8DABfl2CU0BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca5a2d95f22fc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:38 GMT
      Function-Execution-Id:
      - gomhhqn90sia
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4268'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b35619a8552b1c1c49af5540dd11f713;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85918'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.721s
      X-Request-Id:
      - 04ff2d9b53bac26af51cad86813e1165
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Write the
      task_id into the file output.txt Shutdown\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '292'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQ0UrDMBSG7/sUh1yvpXXrLH0Ab+bAgSIiMmJ61salOTU5ZcPRd5e0m8Xb/zt/
        vp9cIgChK1GCUI1k1XYmvt9t8zp7/Nlg495ed8X2YWOqp5f2O92aZ7EIDfr8QsW3VqKo7QyyJjth
        5VAyhlezdbHOs7xI0xG0VKEJtbrjeJnkMffuk+J0mWZTs/eyRlHCJQIAEJ2jtuM90xGtFyWsVosJ
        zMYZZsUVMrE0c76+iwCGaVhDWmEI38fTSROGof9nHkNHJiRCeq89S8tiMUNFltGOf6CtZ9cr1rYG
        Jjg5zQjcILD0x72uQFsmkHDQBsHKFiugnrueEz4zSFuFYwu+6bmik03E1TLcdOKgrfbN3qH0ZIPS
        M3V/a4S2FZ5FCekYDBHARzREvwAAAP//AwCqmVEd3AEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca5cb49bc22fa-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:41 GMT
      Function-Execution-Id:
      - gomhx7u02drz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '599'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 891c9b1ec2bf0b95c3ee06e80134c1cc
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89455'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - b2fb0d650ebc962e6e633b490b0fad58
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Write the task_id into the file output.txt Shutdown"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '130'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        9fHnv1//x/xv//mP/wcAAP//AwDcKXHg4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca5dbce01232a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:43 GMT
      Function-Execution-Id:
      - gomh9lsooydz
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '20'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f1e811462cfa4b6847c9e3aa3d570c14
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - b5e464e72307890778cad5fe778a3031
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "instructing to write the task_id into a file named output.txt
      and then shutdown.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '157'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca5e8dfebf22a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:36:45 GMT
      Function-Execution-Id:
      - gomhx5izoaz5
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '108'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e43f0f427fae3080d46fa1a71cc67672;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - cbcfe418eb1065f9b471634c84421041
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nYou
      should only respond in valid JSON matching the folllowing schema: \n{''$schema'':
      ''http://json-schema.org/draft-07/schema#'', ''type'': ''object'', ''properties'':
      {''thoughts'': {''type'': ''object'', ''properties'': {''text'': {''type'':
      ''string''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string''},
      ''criticism'': {''type'': ''string''}, ''speak'': {''type'': ''string''}}, ''required'':
      [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''], ''additionalProperties'':
      False}, ''command'': {''type'': ''object'', ''properties'': {''name'': {''type'':
      ''string''}, ''args'': {''type'': ''object''}}, ''required'': [''name'', ''args''],
      ''additionalProperties'': False}}, ''required'': [''thoughts'', ''command''],
      ''additionalProperties'': False}\n"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and received a command
      to read \"instructions_1.txt\". The command returned a task ID of 2314 and instructed
      me to read \"instructions_2.txt\". Based on the latest development, I used the
      read_file command with the filename argument set to \"instructions_2.txt\".
      The command returned that I should read the file \"instructions_3.txt\"."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n        \"reasoning\": \"The instructions_2.txt
      file instructed me to read the instructions_3.txt file, so I will use the read_file
      command to read it.\",\n        \"plan\": \"Use the read_file command with the
      filename argument set to ''instructions_3.txt''.\",\n        \"criticism\":
      \"There is no criticism for this plan.\",\n        \"speak\": \"I will use the
      read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the write_to_file command
      to write the task_id into the output.txt file.\",\n        \"reasoning\": \"The
      read_file command returned a task_id that needs to be saved, so I will use the
      write_to_file command to write it into the output.txt file.\",\n        \"plan\":
      \"Use the write_to_file command with the filename argument set to ''output.txt''
      and the text argument set to the task_id returned by the previous command.\",\n        \"criticism\":
      \"There is no criticism for this plan.\",\n        \"speak\": \"I will use the
      write_to_file command to write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n        \"reasoning\": \"The instructions_3.txt
      file may contain further instructions, so I will use the read_file command to
      read it.\",\n        \"plan\": \"Use the read_file command with the filename
      argument set to ''instructions_3.txt''.\",\n        \"criticism\": \"There is
      no criticism for this plan.\",\n        \"speak\": \"I will use the read_file
      command to read the instructions_3.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7713'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTS4/TMBC+51eMfNlLWvVBu6E39oBAqBJIuxfIqnKTaWyaeCJ7su1S5b8jx01f
        KyE4cP0+f49MZg4RgNC5WIDIlOSsqsvB/bfl7PXDZPlgdx+/PE1mj/Zhuful6NPXZv5dxF5B65+Y
        ca8aZlTVJbImE+jMomT0ruN5Mp+NZ8k46YiKciy9rKh5MB3OBtzYNQ1G09E4KBsnCxQLOEQAAKK2
        VNW8Ytqicd7ufjKJA3XOvKCT+ZFlYlleEO9HSQTQhnaKdIYe/tE9Dlm+Hbqr+A60VHpESOe0Y2lY
        xGcyI8NoukEcUuOhVLCiplDsUu8TwCOBe/ZgKj7DTpclNA6BFcLOasYV02qjS4SMqkqaHJgC0T1h
        6bYrnYM2TB1ADdcND3nP4FXDVMSXWRalI6NNEQIfFYJFmV8nWOTGGsxBnvxZSQaDmDufv0Zw8gXz
        GBzBv5XW/Ndd61KaUPPpj947zaqjPWpkhSBt0VRoGByyj747J91BV8ePDvf85uXlTE9jWL92eG3x
        RVPj+uDbvpnVrDPtqtNsLYJ2YAhOFGzIAivtwH/drYOrUW7/4yqErDbuV/Lo82Yj/RBDjavcm7bS
        FrfLHIj+PwSLc40r/e3uT6bjd33DruWxbGpacTystr8wsdFGO7UK2+yvzDHVpwMU2uS4FwsYdUAb
        ATxHbfQbAAD//wMAdM6wZdQEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5ca6382de51101-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 20:37:03 GMT
      Function-Execution-Id:
      - gomhlm6azmht
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5305'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 59c2dbac80eec7d54cf5829695673a57;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85918'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.721s
      X-Request-Id:
      - 3f03cb185506283d9af14236018f7e22
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\n        You will receive the current summary and your latest
      actions. Combine them, adding relevant key information from the latest development
      in 1st person past tense and keeping the summary concise.\n\n        Summary
      So Far:\n        \"\"\"\n        I was created\n        \"\"\"\n\n        Latest
      Development:\n        \"\"\"\n        [Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=''Command read_file
      returned: This task_id is 2314\\nRead the file instructions_2.txt'', type=''action_result'')]\n        \"\"\"\n        "}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '944'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1yQzW7CMBCE73mKlc8kIgl/5VaJqopUVUXiVipknIW4JN7U3hRUxLtXTgKovc54
        5tvxOQAQOhdzEKqQrKq6DKfLt+yHs9FkOau3X68vx2y12D/S6fCc0pMY+ARtP1HxNRUpquoSWZPp
        bGVRMvrWeDKbjJNZPJ62RkU5lj62rzlMo3HIjd1SOEyHcZdsnNyjmMM5AAAQtaWq5g3TAY1r69oe
        j7gh7+4o6U0mluVdT4YPAcClO60grdCr7+3bDuRPQ/eH3YqWSq8I6Zx2LA2Lwd1UZBhN+wsZHKWD
        fnYEGVhUqL8xBwmKqkqaHJjAovTKTpcISpYl5rAW2ji2jfJT3CaO+MRrEcGqwFvSIjfWtGUs3QGy
        BdAOkjQegbevBZhDhTcMF9iB/hGSniD6IZfrIrHTRrtiY1E6Mn6VY6pvg4U2OZ7EHIatcAkAPoJL
        8AsAAP//AwC4S5LDQQIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5dd377df2102ac-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 12 Jun 2023 00:02:38 GMT
      Function-Execution-Id:
      - oq8gi688z9nn
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1316'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - adf3b6a62b45b55944ade273e63b5dde;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89784'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 144ms
      X-Request-Id:
      - f8ec65a8d6a2fa6450c7d8bf4ab4f0c1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\n        You will receive the current summary and your latest
      actions. Combine them, adding relevant key information from the latest development
      in 1st person past tense and keeping the summary concise.\n\n        Summary
      So Far:\n        \"\"\"\n        I was created. I received a command to read
      a file called \"instructions_1.txt\". The command returned a task ID of 2314
      and instructed me to read the file \"instructions_2.txt\".\n        \"\"\"\n\n        Latest
      Development:\n        \"\"\"\n        [Message(role=''assistant'', content=''{\\''thoughts\\'':
      {\\''text\\'': \\''I will use the read_file command to read the instructions_2.txt
      file.\\'', \\''reasoning\\'': \\''The instructions_1.txt file instructed me
      to read the instructions_2.txt file, so I will use the read_file command to
      do so.\\'', \\''plan\\'': \\''Use the read_file command with the filename argument
      set to \"instructions_2.txt\".\\'', \\''criticism\\'': \\''None\\'', \\''speak\\'':
      \\''I will use the read_file command to read the instructions_2.txt file.\\''},
      \\''command\\'': {\\''name\\'': \\''read_file\\'', \\''args\\'': {\\''filename\\'':
      \\''instructions_2.txt\\''}}}'', type=''ai_response''), Message(role=''your
      computer'', content=''Command read_file returned: Read the file instructions_3.txt'',
      type=''action_result'')]\n        \"\"\"\n        "}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1583'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RRy27bMBC86ysWPNuGJcWx6qMRtHAurYH01BQGQ64l1iRXJVeJgcD/XlCPuC2S
        I2d2Hrt8zQCE0WIDQjWSlWvtfL3/dr//8p23pn6ozHlVf/0t9/H+VHXbz7mYJQU9/ULFk2qhyLUW
        2ZAfaBVQMibX/La6XRVVXt30hCONNsnqluflYjXnLjzRfFkuR+MuyhrFBl4zAADRBnItH5hO6KPY
        QFkUs4G5Rl7Z9WokmVjav1Sf1hnAZajWkFGY0B/97BCUqmH8J7sHA9mECBmjiSw9i9mVVOQZfX+F
        HbzICOPaIL2GgArNc3qAIucSxAQBpYZHYXzk0KnUPh7yBZ/5USzgocG32YDcBd/LWcYT7O6AjlCU
        +U3vPhmgBocfGReT8VZG1EAeuEGwkjEyaHxGS61DzzPYQZcmEp2MDkdjr1VeDDc9lVAvHYIMdZeE
        EJFT+Ee57y7EjWTYQWyos3roPZn/b1SORmK8+WU6vjgab2JzCCgj+fQBkal9+xthvMaz2MCyBy4Z
        wM/skv0BAAD//wMAoukDlewCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5dd4214de72be3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 12 Jun 2023 00:03:06 GMT
      Function-Execution-Id:
      - oq8gs0e2832b
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2192'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - be4349561b1a862e8ac90648b7b176bf;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89631'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 246ms
      X-Request-Id:
      - 07af53f14046348b3a3c9b073c5d444c
    status:
      code: 200
      message: OK
version: 1
