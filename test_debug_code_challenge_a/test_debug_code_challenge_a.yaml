interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3678'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST2/bMAzF7/sUBM9KFs/N6vq2w4Dt0GHAUAzoPASKzFha9A8WvSQN/N0Hx047
        JD30JOCReu9HUUc0NZaotGTlop3d3ufLYptbq3RW/LyPbv3wPXt4+vHl0T0+ocCw/kOKpxtzFVy0
        xCZ4FKhakkw1ltnHYnlT3N1khUAXarJYYhN5ls+XM+7adZgt8kWGArskG8LyiLENLvKKw5Z8wrLI
        Pwh88X7Ws7wQyIGlfZbubhe9QKWDUZSw/HVER+ls2wZLWKJMySSWngfI4Jn8MMCx8gAAFbIOXaM5
        VVjCJE4F2vMgVvgVkg6drSGxbBnWB6A9qY6Nb4A1gQo1gfGncx4PwAESEey05FOd2ja0YNK8QvF/
        QksyBW98M8Z8vjbdGWuhMX8JHIH0YGqSEDbX1iB9DTrshuyN2YPhy7BopR9zZjAm0avwXToTjEPS
        Kh5YB7/aGDt0Oyd9fWmuWsNGmeTGhG/vP100pEhye37N01RvfMu34oxhvTivdapcbdVLRyPHK34X
        0LJtLr/FWBh6X4wm1DPDiWPCqXyPvcCN8Sbp1bhvLDFxiCjQ+Jr2WC763/27fwAAAP//AwAfByg2
        igMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac3a18bff2a99-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:27 GMT
      Function-Execution-Id:
      - k85egm63omla
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8537'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e6ee75a7799d736acfdcb251763d930a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - 93a62fece04bf88a4d7390235f18dbbe
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by executing the code in code.py to see what the error is.\",\n        \"reasoning\":
      \"Executing the code will give me an idea of what the error is and how to fix
      it.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will start
      by executing the code in code.py using the execute_python_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4628'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5yTT2/bMAzF7/sUBM9OlsxJ//i201AM66HYTvMQqBZja7FETaLnFIG/+6DYSYoU
        vexkgHx870dQPqDRWGDVKKmsb2e33/L1165T7OugzGP4cyP3P9addV9WjccM+fk3VTJNzCu2viUx
        7DDDKpAS0lgsb+7Wq7v7Vb7I0LKmFgusvczy+XomXXjm2SJfLDHDLqqasDigD2y9bIR35CIWy0X+
        KcOL+aWxyjMUFtVeSsvb9ZBh1bCpKGLx84CW4sk4cEtYoIrRRFFOEiY7IZdWOJQOAKBEabirG4kl
        FjAVpwbtJRVL/N4QVKwJTATHAj2HnXE1qAi091QJ6Tk8QGy4azUEUhrkPOKO37l/AWHonKaQYDT0
        zcsr1fvGJWavqQKpyM64ekR7IqXTxNmpN20LtflLYAmUA6NJAW+hb5QcVRQChxSYIBruE9bW7MHI
        dZRvlRtTZvD03lJdPMWnvTdb0yaNtcq9Qa+CEVOZaEfTx4+frwTRk9qNzYdxkfB/saPpkJ1uPHXe
        nNgpS2Pe2eUKSYX6+mWMjaS9jE9Yp+Rj+gRRugGHDLfGmdhsxvNhgVE4/VLGadpjsRh+DR/+AQAA
        //8DAHQxSRyPAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac3eeeb2d2bab-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:40 GMT
      Function-Execution-Id:
      - k85erirsx5hj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9606'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7e54aa778b4d3aed30f1e4d7b40f5153;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86014'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.656s
      X-Request-Id:
      - a5d0ae8c432732c7208a35fdd27ea99c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"# mypy: ignore-errors
      from typing import List, Optional   def two_sum(nums: List, target: int) ->
      Optional[int]:     seen = {}     for i, num in enumerate(nums):         complement
      = target - num         if complement in seen:             return [seen[complement],
      i]         seen[num] = i     return None   # Example usage: nums = [2, 7, 11,
      15] target = 9 result = two_sum(nums, target) print(result)  # Output: [0, 1]
      \"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '662'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SQwW7bMAyG73sKgmclSGK77XQf0GLZsAI7FFiHQJGYSKtMehKNdAvy7oPdLbv+
        JD9+5BlTQIs+OvX9kBe3n5ruiYfP7c/7x4ft9sNT/6jbzc3tptLvj2hQ9j/I69+JpZd+yKRJGA36
        Qk4poF3f3HXt3fu2bQz2EiijxeOgi2bZLXQse1msmtUaDY7VHQntGYci/aA7lRfiinbdrQ3+Z1/z
        rjGooi5fk82qvRj0UZKnivbbGXuq/6hFMqFFV2uq6lgnR2ElnvwdfPmlURi8BAKNTiHQITFVcHAY
        2U+bwbucKcAz6kl2deyfEU4x+QjqXubOnKqCHIDHfk+lguMADtSVIykkVjpSAVch8TCqmcuFdCxc
        QSNB4jCZTwQ9yZWSeK7O8FnNhQDjACpz/oZfwtdIb/ouV4HEPo9hsmKgVzd9D+YPz/RI16uWeDF4
        SJxq3BVyVRgtVpUBDSYO9Ip2dfl+efcHAAD//wMAIbx1MxwCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac43edb35632d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:46 GMT
      Function-Execution-Id:
      - k85eod5nz1ei
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3216'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f1038ef03a8952168955660cb393b12f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89364'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 424ms
      X-Request-Id:
      - 3f9964376c4a55243cc9a6db9bbe4a16
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["# mypy: ignore-errors from typing import List, Optional   def
      two_sum(nums: List, target: int) -> Optional[int]:     seen = {}     for i,
      num in enumerate(nums):         complement = target - num         if complement
      in seen:             return [seen[complement], i]         seen[num] = i     return
      None   # Example usage: nums = [2, 7, 11, 15] target = 9 result = two_sum(nums,
      target) print(result)  # Output: [0, 1] "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '500'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        ABcTTl3lIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac4592e0728ef-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:48 GMT
      Function-Execution-Id:
      - k85e4u4zttj3
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '138'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a77640575c7168c5a91a3ca68b16375a
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e8954362249ad8f0983c2caeccbd41c9
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a Python code that defines a function called \"two_sum\" which
      takes a list of numbers and a target integer as input, and returns the indices
      of two numbers in the list that add up to the target. The code also includes
      an example usage of the function.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '329'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AP//AwBaCmN34yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac45e1b722937-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:48 GMT
      Function-Execution-Id:
      - k85eqksxhiwt
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6e691608cb3f37f67f515709298ccaae
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f8577caf31bf5b0fca88f413d5b4ff69
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by executing the code in code.py to see what the error is.\",\n        \"reasoning\":
      \"Executing the code will give me an idea of what the error is and how to fix
      it.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will start
      by executing the code in code.py using the execute_python_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is not working
      as expected. I should read the code in code.py to understand why the code is
      not working as expected.\",\n        \"reasoning\": \"Reading the code will
      give me an idea of what the error is and how to fix it.\",\n        \"plan\":
      \"- Read the code in code.py using the read_file command.\",\n        \"criticism\":
      \"N/A\",\n        \"speak\": \"I will read the code in code.py using the read_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"code.py\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command read_file returned: # mypy: ignore-errors\nfrom typing import
      List, Optional\n\n\ndef two_sum(nums: List, target: int) -> Optional[int]:\n    seen
      = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget =
      9\nresult = two_sum(nums, target)\nprint(result)  # Output: [0, 1]\n"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5904'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SST2/aQBDF7/0UozkvLghIqG85JFKkhlN7aV2hZT3YG/afdscChPzdK2O7RG5v
        PVma9/zeb+y5oi4xR1VLVjaY2ePbck2VCZftyvxYvG/3p5c3+Z1WX4/V5oAC/f6dFA9vZMrbYIi1
        dyhQRZJMJeaLh816tfmyWs8FWl+SwRyrwLNltp5xE/d+Nl/OFyiwSbIizK8YoreBd+yP5BLmi+Vy
        IfAefhdWa4HsWZoPo8eHVqCqvVaUMP95RUtpDI7eEOYoU9KJpeMO0zsm161wLRwAQIFc+6aqORWY
        wzAcBDpzNyzwW02gfEmgEzjPcPLxqF0FMgGdAymmMoM/pkRkE7CHfTeIkRRn8Aqp9o0pgc6kGibg
        0S4rqV1nT0SgDzeBYvQRAsWOPGUFio9gkWTyTruqp3u+JXY8k8yTNgZqMgEsQUlM0Wo36dBprCHH
        4GO337QvGOn6qhk8T/G1uz2zcIEmjRDDkrtw4dq73UGbzm2tdOU0XEXNWulk+4bt56eJIQWSx158
        7Vei/2Xov09WYN/TivEWBv2vU3DSUo/wj9QJr4zV9JZ6ofPegwbgkeHGMeAUrsVW4EE7nepd/7cx
        x8Q+oEDtSjpjPm9/tZ9+AwAA//8DACF8GvDBAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac468cae48139-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:30:59 GMT
      Function-Execution-Id:
      - k85esui7flpu
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8894'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dd6ce3fff6086cc67996017af2b353c0
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86038'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.641s
      X-Request-Id:
      - 4b09aa5f5bc20c882cb289a0b984de49
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by executing the code in code.py to see what the error is.\",\n        \"reasoning\":
      \"Executing the code will give me an idea of what the error is and how to fix
      it.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will start
      by executing the code in code.py using the execute_python_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is not working
      as expected. I should read the code in code.py to understand why the code is
      not working as expected.\",\n        \"reasoning\": \"Reading the code will
      give me an idea of what the error is and how to fix it.\",\n        \"plan\":
      \"- Read the code in code.py using the read_file command.\",\n        \"criticism\":
      \"N/A\",\n        \"speak\": \"I will read the code in code.py using the read_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"code.py\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command read_file returned: # mypy: ignore-errors\nfrom typing import
      List, Optional\n\n\ndef two_sum(nums: List, target: int) -> Optional[int]:\n    seen
      = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget =
      9\nresult = two_sum(nums, target)\nprint(result)  # Output: [0, 1]\n"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. The code seems to
      be correct. I should execute the code again to see if the error persists.\",\n        \"reasoning\":
      \"Executing the code again will help me determine if the error is persistent
      or not.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will execute
      the code in code.py using the execute_python_file command again.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6808'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RTX2sjNxB/76cYJi8XkN3YjhNnwYWjtHDQ3FHu+lAsY5Tdsa1mNRLSLLYx/u6H
        dteJ60JL9bKs5vdPM9IRbYUFllsjpQv14PF5Mo3jHdc/zx6ffx2/jL/Z6o+vX3//c/axIVToX/6i
        UnrGsPQu1CTWMyosIxmhCovRw2x6P3u6f5godL6iGgvcBBlMhtOBNPHFD+4mdyNU2CSzISyOGKJ3
        QVbiX4kTFqPp6Enhu/hbYfxwr1C8mPod+zibnBSWW29LSlgsjugonYWjrwkLNCnZJIYlx/QsxPkI
        R80AABpl65vNVpLGAvrNvkB7yZsav20JSl8R2ARJbF0De4Gdj6+WN2AS0D5QKVQN4ROkrW/qCpyv
        7PoAcqaKh7Xdt/8Uo49DjerSLZJJni1vOsvnlp7l3xR22XhLdQBH/64VasOdzACer3JYbr/DcPjP
        SGW0YkubXKf1+cePV4AUyLx2xU9dPPe/3DqtkzqPovTOGa7+MQk2jjqbXbRCK/Grta3pKo2Jm+sh
        doWMfZfo8/yNfD3wG3CHcCjAbthHGrR5k9a8jt6BHEKei3XBR4HfbBIFX0K+qqbWmrXmitYgO79K
        jfvAjUtFi1pYlqUCMXFDUoBluYXBT2/UxRtmWeguWiJimMPx1P+vfQSrgBuXG0vcOIpGqPW4PZPy
        6l6PIxaY94YwyLwLjF1fwiy3bpcieUWSJjIscm3xDl8qsMsLaFvmxi1hDrbf76mfPVPXFa35Bn7Z
        mywC7evPbjk7zGExVvCoYDRSMJpm6T71HJ605kipqduzXHT13MpbrTlEy/Khg90C3MCXRkIjBSzu
        FIyW56vWXrf+1mk+4Unh2rJN21X3/LDAJD6gQssV7bG4Oy1PP3wHAAD//wMA6PG0LCcFAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac4b8194ce259-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:31:18 GMT
      Function-Execution-Id:
      - k85ei300fzxm
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15300'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6d89e3d42c77c7738ab568907027cbed;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86038'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.64s
      X-Request-Id:
      - 89ec55e418cbace2faaa6a3bd2b067ff
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by executing the code in code.py to see what the error is.\",\n        \"reasoning\":
      \"Executing the code will give me an idea of what the error is and how to fix
      it.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will start
      by executing the code in code.py using the execute_python_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is not working
      as expected. I should read the code in code.py to understand why the code is
      not working as expected.\",\n        \"reasoning\": \"Reading the code will
      give me an idea of what the error is and how to fix it.\",\n        \"plan\":
      \"- Read the code in code.py using the read_file command.\",\n        \"criticism\":
      \"N/A\",\n        \"speak\": \"I will read the code in code.py using the read_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"code.py\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command read_file returned: # mypy: ignore-errors\nfrom typing import
      List, Optional\n\n\ndef two_sum(nums: List, target: int) -> Optional[int]:\n    seen
      = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget =
      9\nresult = two_sum(nums, target)\nprint(result)  # Output: [0, 1]\n"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. The code seems to
      be correct. I should execute the code again to see if the error persists.\",\n        \"reasoning\":
      \"Executing the code again will help me determine if the error is persistent
      or not.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will execute
      the code in code.py using the execute_python_file command again.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is still not
      working as expected. I should modify the code to fix the error.\",\n        \"reasoning\":
      \"Modifying the code will help me fix the error.\",\n        \"plan\": \"- Modify
      the code in code.py to fix the error.\",\n        \"criticism\": \"N/A\",\n        \"speak\":
      \"I will modify the code in code.py to fix the error.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"text\": \"# mypy: ignore-errors\\nfrom typing import
      List, Optional\\n\\ndef two_sum(nums: List[int], target: int) -> Optional[List[int]]:\\n    seen
      = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget
      = 9\\nresult = two_sum(nums, target)\\nprint(result)  # Output: [0, 1]\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8085'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQY/TMBCF7/yK0ZzT0pJ2aXMDaZF6ACT2wIGgynWmsWnsMfYEWlX576hNSlEW
        ceE6b/Le9zw5o62wQG2UaBeayev3+cNb/ZFP8/rTu1O1evq8XH9Prc3d5vCEGfLuG2kZvphqdqEh
        sewxQx1JCVVYzB9Wy8VqvVjlGTquqMEC6yCTfLqcSBt3PJnlszlm2CZVExZnDJFdkK3wgXzCYr56
        tczwbn4X8nWGwqKa+2j9sOgy1IatpoTFlzM6SjfjyA1hgSolm0R5uWCyF/KXCufSAwCUKIbb2kgq
        sYBhOAh0lMuwxA0Y9YPAcWX3lioQQ6C5oilsIBlumwroSLoV+i2BqpX1IAyJCOz+KlCMHMGoBDsi
        D3t7pGpaYvZnaiSV2Ftf99GPV1/r67HzT9s0YKgJ4AgqEorO+n8mAUfwLOPA0CjfZ03gcdzC+r5o
        OEGbbhRD1204iWG/3dvmsu2c8s/a6GjFaptcn/Dh5ZvRQgqkDrdXvnai/2XoH2haYp/TZbdLD/qz
        Q3vlqEf4i+uIV8V6/Kf0wmX3bjQA3xiuHANO6TvsMtxbb5PZ9ufGApNwwAytr+iIxaz72r34BQAA
        //8DADVKh2afAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac534f8a561d4-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:31:31 GMT
      Function-Execution-Id:
      - an1049apn7gq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8486'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f67eec309545cedc8c86fbd31eea7365;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86068'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.62s
      X-Request-Id:
      - 9263bd63268444871a84e9423048be37
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1-Run the code in the file named ''code.py''
      using the execute_code command.\n2. 2-Read code.py to understand why the code
      is not working as expected.\n3. 3-Modify code.py to fix the error.\n4. Repeat
      step 1, 2 and 3 until the code is working as expected. When you''re done use
      the task_complete command.\n5. Do not use any other commands than execute_python_file
      and write_file\n\n\nConstraints:\n1. ~4000 word limit for short term memory.
      Your short term memory is short, so immediately save important information to
      files.\n2. If you are unsure how you previously did something or want to recall
      past events, thinking about similar events will help you remember.\n3. No user
      assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n7.
      improve_code: Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\",
      \"code\": \"<full_code_string>\"\n8. delete_agent: Delete GPT Agent, args: \"key\":
      \"<key>\"\n9. get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n10.
      get_text_summary: Get text summary, args: \"url\": \"<url>\", \"question\":
      \"<question>\"\n11. list_agents: List GPT Agents, args: () -> str\n12. message_agent:
      Message GPT Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n13.
      start_agent: Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n14. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by executing the code in code.py to see what the error is.\",\n        \"reasoning\":
      \"Executing the code will give me an idea of what the error is and how to fix
      it.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will start
      by executing the code in code.py using the execute_python_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is not working
      as expected. I should read the code in code.py to understand why the code is
      not working as expected.\",\n        \"reasoning\": \"Reading the code will
      give me an idea of what the error is and how to fix it.\",\n        \"plan\":
      \"- Read the code in code.py using the read_file command.\",\n        \"criticism\":
      \"N/A\",\n        \"speak\": \"I will read the code in code.py using the read_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"code.py\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command read_file returned: # mypy: ignore-errors\nfrom typing import
      List, Optional\n\n\ndef two_sum(nums: List, target: int) -> Optional[int]:\n    seen
      = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget =
      9\nresult = two_sum(nums, target)\nprint(result)  # Output: [0, 1]\n"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The code is not working as expected. The code seems to
      be correct. I should execute the code again to see if the error persists.\",\n        \"reasoning\":
      \"Executing the code again will help me determine if the error is persistent
      or not.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will execute
      the code in code.py using the execute_python_file command again.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"The code is still not
      working as expected. I should modify the code to fix the error.\",\n        \"reasoning\":
      \"Modifying the code will help me fix the error.\",\n        \"plan\": \"- Modify
      the code in code.py to fix the error.\",\n        \"criticism\": \"N/A\",\n        \"speak\":
      \"I will modify the code in code.py to fix the error.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"text\": \"# mypy: ignore-errors\\nfrom typing import
      List, Optional\\n\\ndef two_sum(nums: List[int], target: int) -> Optional[List[int]]:\\n    seen
      = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget
      = 9\\nresult = two_sum(nums, target)\\nprint(result)  # Output: [0, 1]\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I have modified the
      code. I should execute the code again to see if the error has been fixed.\",\n        \"reasoning\":
      \"Executing the code again will help me determine if the error has been fixed
      or not.\",\n        \"plan\": \"- Execute the code in code.py using the execute_python_file
      command.\",\n        \"criticism\": \"N/A\",\n        \"speak\": \"I will execute
      the code in code.py using the execute_python_file command again.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n"}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8955'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SRTW/bMAyG7/sVBM+yZ9dN2/i2Y4K2h6EbsM5FoMisrcYWNYtOUwT+70Nq92MZ
        MGzYiQD58uFLco+2xBxNrcW0vonOr7Kz62R5uf28/HH7sOTtzeVT+nV9xf237S0q5PUDGZk6YsOt
        b0gsO1RoOtJCJebp2cXs9GJ+Op8pbLmkBnOsvERZPIuk79YcJVmSosI+6Iow36PvuPWyEt6QC5if
        JMm5wjf4ayHNThQKi27etGk2HxSamq2hgPn3PbYUXsAdN4Q56hBsEO3kYJOdkDussC8cAECBUnNf
        1RIKzGFKTgXaySFZ4E1NYLgksAEeudtYV4EOQDtPRqiMYQGh5r4poQ8EUhOIDpvVtMOht221K0EY
        6BAmQVygej+wIx3YWVf91VQFgWEBRrs/Qn2j3ciL4Mv/uDOdFWtsaEfa9cdPR4LgSW/G4gIebdP8
        8zVG2qBeXjMpf/uM0y2Ng34hH/nRXXX81Pd3Pj6ye46xf4JaB1gTObi3OypffT17mywWbsBB4b11
        NtSrEYg5BmGPCq0raYd5MtwNH34CAAD//wMAKWpKw2QDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cfac58348b51058-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 May 2023 23:31:43 GMT
      Function-Execution-Id:
      - an10mf2737xx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8029'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 465630864663b59e221392851f5b3aeb;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86073'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.618s
      X-Request-Id:
      - 97ecd226aacc18f4b7916b5c91cd3f22
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4186'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySQW/aQBCF7/4Voz0DwqIkwLGVKuUQ9dBUVVVX0Xo9eCesd63dMSRC/u/Veg0k
        RFEvPfLezvvGwztmAIIqsQGhtGTVtGZ6+/DF3X++K8tq3hj/s9yunr5131f+1/1OfxWTOOHKJ1R8
        mpop17QGmZxNtvIoGWNqfrO6zdfLPP80GI2r0MSxuuXpYraccudLN50v5nma7IKsUWzgmAEAiNa7
        puVHdju0QWxgvVxPknNBXtx8cTO67FiaV8Z8vcwA+rScdqQwyr+HxwkVl8Pwhj6I3pmoCBkCBZaW
        xeRiKmcZ7XCHY2GjVAjWrqs1hyLmJHE08JmjWIg7OJAxEFh6hvIFDAUmWwNrhC0ZDEB2+KE679Ey
        VORRsfMv0IXTwzj0mF4r1zTSVrNCTF4DPcrgLNk6UR80hQSuaY/QIEgLVKEEt4WDljyypUeQe0lG
        lgaBHRyc38GBWF8DWiNtyp7Cj4AfrBUjovqPT7sOV56YFIXmdLOgXWcq0HKPoDSqHVYfHKnErfOY
        7ku2vk4OLcrdm3+i+w/LJ0I/OfVgDHhXAysbTPAL7WpB6evr+iTjzEsBZ+pAHhcobC/Ghvanqoot
        WQr6MTUi1jWwa89NFmQrfBYbmA9CnwH8yfrsLwAAAP//AwDzI/3VHAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6e9bbf6510bf-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:18:40 GMT
      Function-Execution-Id:
      - 7yz2bu26hjux
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5748'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f627614e456f56842fcebb04043b164e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '83150'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 4.566s
      X-Request-Id:
      - dda188dd3f11631e739f122c7799e7c8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will start by listing the files
      in the current directory using the list_files command.\",\n        \"reasoning\":
      \"This will give me an idea of what files are available to work with.\",\n        \"plan\":
      \"- Use the list_files command to list files in the current directory.\",\n        \"criticism\":
      \"I should have checked the current directory before starting.\",\n        \"speak\":
      \"I will use the list_files command to list files in the current directory.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''code.py'', ''test.py'']"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5177'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5ySwW7bMBBE7/qKBc+2YVl1k/jYnIKgRYGmBZoqMGhyLTGWuDK5al0Y+veCohQ7
        Tk69znDfDHZ5TACE0WIFQpWSVd1U06uHW/phP99++fo4/3BP9ufzYf9oyof9p/23hZiECdo8o+Jx
        aqaobipkQzbayqFkDNT04/VVerNMF1lv1KSxCmNFw9Nstpxy6zY0nWfzNE62XhYoVnBMAABE46hu
        eM20Q+sDLl1eT6J1yjyzs2xwmVhWZ8biJk0AutiuJKMwyL/6xzErtEP/Kr4XHVVBEdJ741laFpOT
        qcgy2n4Rx9wGKRdcUluU7PPAieJg4IGDmIs7+GOqChxKDVwiKNI4a/7C1lQIrTe26OXgr3tNUV1L
        q2e5mJwTHUpP1thixFpEDUzQWo0utD3xwVggp9EFX+OmLcDwJbCppI2sKXz3+H6LAHi3+iVNOcNG
        GV+P9XxJbaWhlL8RVIlqhyOkX6MH2r7dxwa35BA8S8fGFpchvkG5e7XW9n+KR2Q3Ga84jLw5opU1
        xrQX/EUh6YrL20cjvD2ND/ljcp8+lMhtJ4Y/1o2fTWyNNb5cx5OHD+eZmpe/KIzVeBArmPdClwA8
        JV3yDwAA//8DAKF4SqrfAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6ecc0c15109c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:18:48 GMT
      Function-Execution-Id:
      - 7yz2lykmadjd
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6162'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 32c9c71c2a5aeaacc2b1831089b5818f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85920'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.72s
      X-Request-Id:
      - 9f9342e734c80252bf329a305907f89b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"# mypy: ignore-errors
      from typing import List, Optional   def two_sum(nums: List, target: int) ->
      Optional[List[int]]:     seen = {}     for i, num in enumerate(nums):         typo         complement
      = target - num         if complement in seen:             return [seen[complement],
      i]         seen[num] = i     return None \"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '566'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQQW8aMRCF7/srRj4DYoUWWm5RpVa9oCSKlENTocE7y7p4PZY9DqER/72yN5Rw
        9Lz55j2/9wpAmVatQekeRQ/eTldP31iH2NjnO/6xOTavm78/v3ebu+flQ3xUk0zw7g9puVAzzYO3
        JIbdKOtAKJSv1ssvq/prUy/mRRi4JZuxvZfpYtZMJYUdT+eLeT2SKeKe1BreKwAA5QMPXrbCB3Ix
        n6vryahcLa9qs/wQhQXtJ2q5qgDOY7SejaY8/VV2R6McjeKNdxkGtnmiMEYTBZ2oyVXU7IRcaQHh
        /iQ9O+iS0zkUaLSWWnhRcuRtTMOLAulRQPBAERCsiQLcgUvDjkIEdC0gCIY9CRgntKcAGME4n2RS
        5ECSgvsMy5HBuDZ/CLrAA0hPIzGuFEdsW0gehIt66zCDp56uoVMs2VpTnhhOmToQeZCA+pAtfaBX
        wynaE0Qid5NfejLhEmimPpo6XypTnXEm9ttAGNnl2qKw/9+oMq6lN7WGeRmcK4Df1bn6BwAA//8D
        AClZ9JeiAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6efeab7d29e4-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:18:54 GMT
      Function-Execution-Id:
      - 7yz2iy5as9ho
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3613'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 12750075912c52ec066421fa9649b64c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89388'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 408ms
      X-Request-Id:
      - 39d0ab3f25f97e4415b95eac91d17a38
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["# mypy: ignore-errors from typing import List, Optional   def
      two_sum(nums: List, target: int) -> Optional[List[int]]:     seen = {}     for
      i, num in enumerate(nums):         typo         complement = target - num         if
      complement in seen:             return [seen[complement], i]         seen[num]
      = i     return None "], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '404'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6f210840e1a9-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:18:56 GMT
      Function-Execution-Id:
      - 7yz27ea9tk9r
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9914be535db19012bc0274aa8fed7c07;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 434096946942734d057b645d9397607b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a Python function called \"two_sum\" that takes a list of numbers
      and a target integer as input, and returns a list of two indices from the input
      list that add up to the target integer. The function uses a dictionary to keep
      track of previously seen numbers and their indices.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '353'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        5z/+HwAAAP//AwDJPl384yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6f2a3f1f632a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:18:57 GMT
      Function-Execution-Id:
      - 7yz2kmufwkpk
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '29'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f19ac0f53ddbd8bc9ea1226d533bf74f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 9af9534bf31b66ae419f1d9639853fb9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will start by listing the files
      in the current directory using the list_files command.\",\n        \"reasoning\":
      \"This will give me an idea of what files are available to work with.\",\n        \"plan\":
      \"- Use the list_files command to list files in the current directory.\",\n        \"criticism\":
      \"I should have checked the current directory before starting.\",\n        \"speak\":
      \"I will use the list_files command to list files in the current directory.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''code.py'', ''test.py'']"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will read the code.py file using the read_file command.\",\n        \"reasoning\":
      \"I need to understand the code in order to debug it.\",\n        \"plan\":
      \"- Use the read_file command to read the code.py file.\",\n        \"criticism\":
      \"I should have checked the contents of the code.py file before starting.\",\n        \"speak\":
      \"I will use the read_file command to read the code.py file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6322'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RUzW6bQBC++ylG20sjQWTHadJYSg9tL66q9uIqB2NZGxjMJuws2h1iU4t3r5aF
        mCQ9ttyY7292luE4ARAqEwsQaSE51VUZX6++mPLprqqWaFdfeT9tyju72j/gN/15KSKvMPcPmPKg
        Ok+NrkpkZSjAqUXJ6F1nVx+vZzcfZvObDtAmw9LLdhXH8/MPMdf23sTT+XQWlLWTOxQLOE4AAERl
        ja54y+YRyXm7y+l1FKBT5gm+uBhQNizLke5qfjkBaEN3hVEp+vK6I4cs3x26F/Fd0ZrSV4R0TjmW
        xCI6gakhRuoGcUzIlxLBhal3BbvE+4RiD+CBfTERS9irsoTaIXCBIEmWzW/cpiZDSI3WkjJgA2mB
        6SPkxoJriOUB0FpjHSjqZJ5+nohonGFROkOKdiFo1dOgkA7kC5sInIElEGKXpTIkVnkDPjtXB1D8
        2rsqJQXbGH79+9ZTq1ilyulhRq4wdZlBIZ8w+PlOhwO9tb7H3FgEW5M//1/6dxXKx/9wASGjjYYP
        oDd4c/8kNYb4cd6rJqXdvf5yBtesV78D3VTNAtSOjMU49JQklFujgZuqO72ujGX4rhxH8LPyayLL
        JKEkoQxz4L3Zulq/p1q7Rc9iaXfIC1DEZxB/elatPbxWxJvNIgldOUSCWzi2/bufkIqAau1Hg1Rr
        tJKxsz8bRP7hpjKj17DDGonhts+H2NuMOCof0xR14WNP/1jk2hKsPbY+0TcRqM2I2sFU6w3cgurr
        vfSHIfTzESd2219sQq3oV74ddl/kipQrtmHf/P47NtXzr0EoyvAgFjDtCu0EYDNpJ38AAAD//wMA
        LkNQCm4FAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6f381d7111ab-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:19:09 GMT
      Function-Execution-Id:
      - 7yz2fazrtwwx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9595'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c5224ecfc0f9b061bd4faf0d97f95472
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85924'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.716s
      X-Request-Id:
      - ed373e68851a4a69a292f3754ce7c838
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are now the following python function: ```# Analyzes the given code and returns
      a list of suggestions for improvements.\ndef analyze_code(code: str) -> list[str]:```\n\nOnly
      respond with your `return` value."}, {"role": "user", "content": "# mypy: ignore-errors\nfrom
      typing import List, Optional\n\ndef two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen
      = {}\n    for i, num in enumerate(nums):\n        typo\n        complement =
      target - num\n        if complement in seen:\n            return [seen[complement],
      i]\n        seen[num] = i\n    return None\n"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '693'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQy2rDMBBF9/6KQZtsbGPhvJdtKYTuSlcJISjyJFZra4Q1pkmD/73Ibup2e4/O
        vYNuEYAwhViD0KViXbsqWbw90mX7+rTJzeazeDhtS9nOv67yBbNyKuJg0PEdNd+tVFPtKmRDdsC6
        QcUYWuV8uZCrmZzJHtRUYBW0s+MkT2cJt82RkizP5GC2Xp1RrOEWAQAI11Dt+MD0gdaHunwVD2Sc
        HOmdMbGq/kjTZQTQDZeVZDSGdNe/HXbCZej/TfdhQ1VIhPLeeFaWRTxCTZbR9p+wmzybC3CJwFdH
        YCxUxiIs0sle/Ajd3RQnY40vDw0qTzbYnsn9FgtjC7yINWR90EUA+6iLvgEAAP//AwC4Io5/qAEA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6f7ff9be2bed-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:19:11 GMT
      Function-Execution-Id:
      - 7yz2yykpt5h5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '475'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7ac4840eafe4f21e4abc303cc0d46734
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89848'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 100ms
      X-Request-Id:
      - e0fa337c70e79493394ee60727c43631
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will start by listing the files
      in the current directory using the list_files command.\",\n        \"reasoning\":
      \"This will give me an idea of what files are available to work with.\",\n        \"plan\":
      \"- Use the list_files command to list files in the current directory.\",\n        \"criticism\":
      \"I should have checked the current directory before starting.\",\n        \"speak\":
      \"I will use the list_files command to list files in the current directory.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''code.py'', ''test.py'']"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will read the code.py file using the read_file command.\",\n        \"reasoning\":
      \"I need to understand the code in order to debug it.\",\n        \"plan\":
      \"- Use the read_file command to read the code.py file.\",\n        \"criticism\":
      \"I should have checked the contents of the code.py file before starting.\",\n        \"speak\":
      \"I will use the read_file command to read the code.py file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I will use the analyze_code
      command to check for syntax errors in the code.\",\n        \"reasoning\": \"The
      code has a syntax error, so I need to identify and fix it.\",\n        \"plan\":
      \"- Use the analyze_code command to check for syntax errors in the code.\",\n        \"criticism\":
      \"I should have checked the code for syntax errors before running it.\",\n        \"speak\":
      \"I will use the analyze_code command to check for syntax errors in the code.\"\n    },\n    \"command\":
      {\n        \"name\": \"analyze_code\",\n        \"args\": {\n            \"code\":
      \"# mypy: ignore-errors\\nfrom typing import List, Optional\\n\\ndef two_sum(nums:
      List, target: int) -> Optional[List[int]]:\\n    seen = {}\\n    for i, num
      in enumerate(nums):\\n        typo\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command analyze_code returned: [''Fix the typo in line 7.'']"}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7558'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTy27bMBC86ysWPMuGDNtx4msObQr0UiSHoioMmlpJbCiSIFe1XUP/XpD0K2p6
        a68zszO75O4xA2CyYmtgouUkOqsmq+dHW+y+dE33oSpQLSr/8evL59mn+q7ljywPFWb7AwWdq6bC
        dFYhSaMTLRxywuA6u7tfzR6Ws+UiEp2pUIWyxtJkPl1OqHdbMynmxSxV9p43yNZwzAAAmHWms7Qh
        84raR7vVQ56oa+YNvVqcWDLE1Q1xv5xnAEPqrjVSYIC/RXHKCt2hfxMfQWdUQBj3Xnrimlh+JYXR
        hDo+xLHUASoZtaZvWvJl8EngicA9BbBkT7CTSkHvEahFcGgVF7iRelNLhSBM13FdARmo5T5K/EET
        3wM6ZxxIHTFhKpyWLL/NcMi90VI3Kei5ReCaq8Mv3AT5xVpWqEnWEivgfzXPwRt4Ao146UXSONEq
        rlPYBF7+/UDCSZJC+u78cr41vaqg5T8xmIXWxnZbrI1DcL0OL3GxBt5wqccB3iJ//Q/fkjKG/LwW
        p+o/tkLzDlP8KG/UJ3fNeKUSEbRXk5huD2+Kk86oanNdQTpY845I4+5G9J6LEL1zqGOfFe6TsDjP
        G2c+jV7qgZ1OZTjfDKullr7dpD0Nd+PJ2MtJsejJ1lBEYMgAvmdD9hsAAP//AwAJE24/pgQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6f9489f7e1bf-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:19:22 GMT
      Function-Execution-Id:
      - 7yz217c91eqd
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8200'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3bb5386b06f923d6e9e8f550af5e0462
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85929'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.714s
      X-Request-Id:
      - e47767245eff01fc0edf1358c099b2e2
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will start by listing the files
      in the current directory using the list_files command.\",\n        \"reasoning\":
      \"This will give me an idea of what files are available to work with.\",\n        \"plan\":
      \"- Use the list_files command to list files in the current directory.\",\n        \"criticism\":
      \"I should have checked the current directory before starting.\",\n        \"speak\":
      \"I will use the list_files command to list files in the current directory.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''code.py'', ''test.py'']"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will read the code.py file using the read_file command.\",\n        \"reasoning\":
      \"I need to understand the code in order to debug it.\",\n        \"plan\":
      \"- Use the read_file command to read the code.py file.\",\n        \"criticism\":
      \"I should have checked the contents of the code.py file before starting.\",\n        \"speak\":
      \"I will use the read_file command to read the code.py file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I will use the analyze_code
      command to check for syntax errors in the code.\",\n        \"reasoning\": \"The
      code has a syntax error, so I need to identify and fix it.\",\n        \"plan\":
      \"- Use the analyze_code command to check for syntax errors in the code.\",\n        \"criticism\":
      \"I should have checked the code for syntax errors before running it.\",\n        \"speak\":
      \"I will use the analyze_code command to check for syntax errors in the code.\"\n    },\n    \"command\":
      {\n        \"name\": \"analyze_code\",\n        \"args\": {\n            \"code\":
      \"# mypy: ignore-errors\\nfrom typing import List, Optional\\n\\ndef two_sum(nums:
      List, target: int) -> Optional[List[int]]:\\n    seen = {}\\n    for i, num
      in enumerate(nums):\\n        typo\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command analyze_code returned: [''Fix the typo in line 7.'']"}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the replace_in_file command to fix the syntax error in the code.\",\n        \"reasoning\":
      \"The analyze_code command identified a syntax error in the code, so I need
      to fix it.\",\n        \"plan\": \"- Use the replace_in_file command to fix
      the syntax error in the code.\",\n        \"criticism\": \"I should have fixed
      the syntax error before running the code again.\",\n        \"speak\": \"I will
      use the replace_in_file command to fix the syntax error in the code.\"\n    },\n    \"command\":
      {\n        \"name\": \"replace_in_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"old_text\": \"typo\",\n            \"new_text\":
      \"\",\n            \"occurrence_index\": \"0\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command replace_in_file returned: File /tmp/pytest-of-runner/pytest-0/popen-gw1/test_debug_code_challenge_a0/home/users/monty/auto_gpt_workspace/code.py
      updated successfully."}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8710'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySwW7bMBBE7/qKBc+2YSW1nfgWFAFao0B7aA9tFRgMtZaYUFyCXDlODf17QVGq
        U7eXALnO7Mw+kHvMAIQuxRqEqiWrxpnp6ut7d3uz/1z9WNS/9t8/cKDlZvOJNw+3X1BMYoLuH1Dx
        mJopapxB1mSTrTxKxtiaL69W+fUiX171RkMlmhirHE8vZ4spt/6epvPLeZ6SbZAVijUcMwAA4Tw1
        jrdMj2hDrLu+WE6Sddr5wn6XDy4TS3MyLubLVQbQJbqatMIo/+yH065Ih+Gv9b3oyURFyBB0YGlZ
        TE6mIsto+4c4FjZKheCa2qrmUMSeJA4GHjiKhfgIT9oYaAMC1wh4QNUybt0z12S3O20QFDWNtCUw
        gW9tP8YYeOaeIfqzQkxednuUgay21bjAIvbhGOrTikqMQkAEvQPNsTfAk468DOg9+XBe64y0qXEK
        396OVnnNWunQjLShptaUUMt9Ckb2kRmlNxr9q9mDQ/n4hu+durvJ+M9D4p9vtrLBtPY/e84Ypa/O
        7yQZcfZUNJCMDD3HgFPYTgz32I2HKXba6lBv01HE4wxM7s/dCm1LPIg1zHuhywDusi77DQAA//8D
        ADZ7JW0LBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d6fe848b222d5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:19:34 GMT
      Function-Execution-Id:
      - l467mjikkszu
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6243'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1d11d46fbc114a949a7c68064f15ec34
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.713s
      X-Request-Id:
      - 69839d8e97bbf766c821c0eba4b28c81
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Debug Code Agent, an autonomous agent that specializes in debugging python
      code\nYour decisions must always be made independently without seeking user
      assistance. Play to your strengths as an LLM and pursue simple strategies with
      no legal complications.\n\nGOALS:\n\n1. 1- Run test.py using the execute_python_file
      command.\n2. 2- Read code.py using the read_file command.\n3. 3- Modify code.py
      using the write_to_file command.Repeat step 1, 2 and 3 until test.py runs without
      errors.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      analyze_code: Analyze Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code:
      Create a Python file and execute it, args: \"code\": \"<code>\", \"basename\":
      \"<basename>\"\n3. execute_python_file: Execute Python File, args: \"filename\":
      \"<filename>\"\n4. append_to_file: Append to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will start by listing the files
      in the current directory using the list_files command.\",\n        \"reasoning\":
      \"This will give me an idea of what files are available to work with.\",\n        \"plan\":
      \"- Use the list_files command to list files in the current directory.\",\n        \"criticism\":
      \"I should have checked the current directory before starting.\",\n        \"speak\":
      \"I will use the list_files command to list files in the current directory.\"\n    },\n    \"command\":
      {\n        \"name\": \"list_files\",\n        \"args\": {\n            \"directory\":
      \".\"\n        }\n    }\n}"}, {"role": "system", "content": "Command list_files
      returned: [''code.py'', ''test.py'']"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will read the code.py file using the read_file command.\",\n        \"reasoning\":
      \"I need to understand the code in order to debug it.\",\n        \"plan\":
      \"- Use the read_file command to read the code.py file.\",\n        \"criticism\":
      \"I should have checked the contents of the code.py file before starting.\",\n        \"speak\":
      \"I will use the read_file command to read the code.py file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command read_file
      returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I will use the analyze_code
      command to check for syntax errors in the code.\",\n        \"reasoning\": \"The
      code has a syntax error, so I need to identify and fix it.\",\n        \"plan\":
      \"- Use the analyze_code command to check for syntax errors in the code.\",\n        \"criticism\":
      \"I should have checked the code for syntax errors before running it.\",\n        \"speak\":
      \"I will use the analyze_code command to check for syntax errors in the code.\"\n    },\n    \"command\":
      {\n        \"name\": \"analyze_code\",\n        \"args\": {\n            \"code\":
      \"# mypy: ignore-errors\\nfrom typing import List, Optional\\n\\ndef two_sum(nums:
      List, target: int) -> Optional[List[int]]:\\n    seen = {}\\n    for i, num
      in enumerate(nums):\\n        typo\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command analyze_code returned: [''Fix the typo in line 7.'']"}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the replace_in_file command to fix the syntax error in the code.\",\n        \"reasoning\":
      \"The analyze_code command identified a syntax error in the code, so I need
      to fix it.\",\n        \"plan\": \"- Use the replace_in_file command to fix
      the syntax error in the code.\",\n        \"criticism\": \"I should have fixed
      the syntax error before running the code again.\",\n        \"speak\": \"I will
      use the replace_in_file command to fix the syntax error in the code.\"\n    },\n    \"command\":
      {\n        \"name\": \"replace_in_file\",\n        \"args\": {\n            \"filename\":
      \"code.py\",\n            \"old_text\": \"typo\",\n            \"new_text\":
      \"\",\n            \"occurrence_index\": \"0\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command replace_in_file returned: File /tmp/pytest-of-runner/pytest-0/popen-gw1/test_debug_code_challenge_a0/home/users/monty/auto_gpt_workspace/code.py
      updated successfully."}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I will use the execute_python_file
      command to run the test.py file.\",\n        \"reasoning\": \"I need to test
      the code to see if it runs without errors.\",\n        \"plan\": \"- Use the
      execute_python_file command to run the test.py file.\",\n        \"criticism\":
      \"I should have tested the code earlier to see if it runs without errors.\",\n        \"speak\":
      \"I will use the execute_python_file command to run the test.py file.\"\n    },\n    \"command\":
      {\n        \"name\": \"execute_python_file\",\n        \"args\": {\n            \"filename\":
      \"test.py\"\n        }\n    }\n}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n[2, 5]\n[0, 3]\n"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '9595'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RUTW/TQBC951eMlguV7KhpCWktlQOFQ/msUAGhOIq29sRe8M5au+OmUeT/jtbr
        NG7ggBD4ZL83773xejzbEYBQuUhAZKXkTNdVPLu5rK/vrr9dbWzx8vWzt19eXV9+fXN2o5r3n1BE
        XmFuv2PGO9U4M7qukJWhQGcWJaN3nTw/m03Op5PZeUdok2PlZUXN8el4GnNjb018fHo8CcrGyQJF
        AtsRAICordE1L9n8QHIigZPJyUkUqH3mgJ5Oe5YNy2pAnM5mI4A2dFcalaGH511xyPLdoXsU34HW
        VB4R0jnlWBKLaE9mhhipO4htSh5KBZemKUp2qfcJYE/gPXswFTclAqPjcb2BlaoQrCRYK69kQGuN
        dRE4A1ewVlUFjUPgEmFtFeOSzbLTZEZrSTmwASfvQkVT5/7gITM5esJj/n4XNE5FNGzJonSGFBX7
        vjqpbcj9vqFM0t/H1ZWkkBTD5//2UplVrDLldIi6Aleapsqh9IbeNf8jW0BpK4X20N7VKH/srP/9
        9wlRbbQbp97ml2kiqTF08Sj2oFlpi8NBDISv3Vv0PTwSHw7tE9CbepOAKshYjMNUpCmtrNHAm1pR
        AUrXxjK8U44j+Fj7v1NWaUppSjmugNdm6Rr9lBrtkr6KpS2QE1DERxC/eFDNPT1XxItFkoauHCLB
        BWzb/nllLKgIqNGgCJAajVYydvZHO5G/wq7QSAwXfSDEXjeoUathmaIubWjiL4vcWIK55+b78kUE
        ajEo7Whq9AIuQPV4L/1gCP2BiH1123/ylFrRr5Z2t2PESpFy5TL8qH7PODb1wwoSinK8Fwkcd0A7
        AliM2tFPAAAA//8DAEBPQRnWBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9d702dd8b71107-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 17:19:49 GMT
      Function-Execution-Id:
      - l46739cbxqpr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10631'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - df7a032af57bc9f0646d87e76008ba87
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85944'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.704s
      X-Request-Id:
      - 4e69d54b0b158571208ad5f2348f4ceb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:"}], "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5070'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+yVTW8aQQyG7/wKay57AQQhJBHnHhr1lChVKjUVGmYNO2V3vJrxCrZo/3vl/YJQ
        1KSqeuthkZixX9vPWPZhAKBsrBagTKLZZHk6un0qJ6uHz/PJ8+OX/Hm1pv1dVn76ePfwwzuvhuJB
        q+9ouPMaG8ryFNmSa66NR80oqtObu9vZ7c38elpfZBRjKm6bnEez8XzEhV/RaDKbTFvPhKzBoBbw
        dQAAcKh/JUcX414tYDLsTjIMQW9QLXojAOUplROlQ7CBtWM1PF4acoyuTvsQcULFJuEQLeAQMe45
        WkB0DzubphBYe4ZVCb5wzroNMAYe5yUUof6XIOAeTcG4zEtOyC3XNkUwlGXaxWO4X4uNR9DyuRLQ
        e/JhCK2+Rx2DoRhfa8rxKyWQL6PYrkuwfGK585ZxyXQet5PPUTNwYgPkngyGAIVjm/Z1+MIF2Flh
        wG1yvbcj7mJKqM5FIo2jIUQedSCh8h5gTBAQwV4GckbqjJJDjEXgJBlhBtZ17Pqci4BnBIXcRUrh
        guTfknsSextqvYwCA67X1lh0DDtdQ4hxVWyOJXQCTR7dq/6COk+1E8ojeCzcnzXhy4sbXab7b5qv
        jvfY4HuTWG38gX7XalK+8ZatsSFrOq3vB71FCIWXJ9cM96CzE6VLMOtSjsbk0vLE+qSZdBro7Th6
        K26FcygNon0rZo2WEVg3WN9ZUkfIUW//j5d3jJdKXr0JV89lpzMUcBdwCFjtN838loPOtlWMqqpS
        7eyv+qWxts6GZNnMMFkEgSlvzKoBwLd6CRWv9orKPWU5L5m26GQzTa+uZo2gOi6+4/Xsut1Riol1
        euI3v5kNJE41+AkAAP//AwAWfF+BdwcAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebbf858e76390-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:42:29 GMT
      Function-Execution-Id:
      - lls2apwtpbo9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7829'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 07a39581a563be5772d54934087f5cd5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86416'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.389s
      X-Request-Id:
      - 09e1bb13a6e58b4d3cd6c42f09aed6e1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{''thoughts'': {''text'': ''I will start by running test.py using the execute_python_file
      command. If there are any errors, I will read code.py using the read_file command
      and modify it using the write_to_file command. I will repeat this process until
      test.py runs without errors. I will not modify the test.py file.'', ''reasoning'':
      ''I will start by running test.py to see if there are any errors. If there are
      errors, I will need to modify the code in code.py. I will use the read_file
      and write_to_file commands to modify the code. I will repeat this process until
      test.py runs without errors. This is the most efficient way to debug the code
      without modifying the test.py file.'', ''plan'': ''- Run test.py using the execute_python_file
      command\\n- If there are errors, read code.py using the read_file command and
      modify it using the write_to_file command\\n- Repeat until test.py runs without
      errors\\n- Do not modify the test.py file'', ''criticism'': ''I need to make
      sure that I am not modifying the test.py file and that I am only modifying code.py.
      I also need to make sure that I am not making unnecessary modifications to the
      code.'', ''speak'': ''I will start by running test.py using the execute_python_file
      command. If there are any errors, I will read code.py using the read_file command
      and modify it using the write_to_file command. I will repeat this process until
      test.py runs without errors. I will not modify the test.py file.''}, ''command'':
      {''name'': ''execute_python_file'', ''args'': {''filename'': ''test.py''}}}"},
      {"role": "system", "content": "Command execute_python_file returned: Traceback
      (most recent call last):\n  File \"/workspace/test.py\", line 19, in <module>\n    test_two_sum(nums,
      target, expected_result)\n  File \"/workspace/test.py\", line 7, in test_two_sum\n    result
      = two_sum(nums, target)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/code.py\",
      line 8, in two_sum\n    typo\nNameError: name ''typo'' is not defined. Did you
      mean: ''type''?\n"}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:"}], "model":
      "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7305'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+xVsW7bQAzd/RWEFi924MRwHHht09ZDOyQpULQpDPpESRdLPOWOiu0Y/veCkmw5
        aFMUHYsuGsjHe0+PBLnrAUQ2jmYQmQzFFGU+nN5tR4/Ob7++S+a317cfnr/aLw/v3+Thav38GA20
        wi0fyMih6sy4osxJrOMmbTyhkL56fnk1HU8vJ5PLOlG4mHItS0sZjs8mQ6n80g1H49F5W5k5ayhE
        M/jWAwDY1V/VyDFtohmMBodIQSFgStHsCAKIvMs1EmEINgiyRIMuaRwLcS1715fMVWkmoT+DXV9o
        I/0Z9O8y8gQ2AMInLOjae+fBMkhGYFxMZzCHtc1zYKIYxEHhYptsm1y51UhiNzWctPaIrwLVUU8Y
        LxKbEyDHsPZWaCGuiRhXFMhxOHn3J17JiMFXDEJBlBFTtAxVsJw2tBsyldCi3Erm+MXD+m4gApt0
        AiHDAEsiVt0Un/UH0PeEwbHl9E8cGcA6syaDgpADSIaiqUPJE3qLy5yahHKxk4YvpsQyxf+8o3CX
        2aBuKKJwQYCSxBpLLLDG+gdjWlbpURmsrc6mtIoPMg7ylL9uU5kja4eGcEMYHw3rhHfOtHLv73kI
        H1/199jfGve59feXjtY/jk8NwmTIKYW66ubvjGxqqSQUqFhs3g4RegJ2jbENwVtXj9BJN0+NUV+M
        t2KNDYWaM+/mClcEofLtLM4BC3Ccb09sPniiP1iT4ErDFTMZXTa+BVuDuuvqsTqdJ8yD+y1fp/zV
        roaScPV/Fekq2mszG3y9pBkLUmeOwtUv9GmzwjVwQLQe9Pf7fdSu//3xbiSWbcgWzZbTWxDElQ1s
        3wP4Xt+h6sVpiUrvilIW4lbEepzOpxeT5sGou31dejwZt1lxgnmXuBhNr3rKs+/9AAAA//8DAEpo
        Yp16BwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebc51efd82cdd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:42:50 GMT
      Function-Execution-Id:
      - lls2y7us0w3j
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14104'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 47a2254c4c3e3530d33a24acb76b1b5f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 8ef3f79b24ef9b4e56833b2a8601c924
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{''thoughts'': {''text'': ''I will start by running test.py using the execute_python_file
      command. If there are any errors, I will read code.py using the read_file command
      and modify it using the write_to_file command. I will repeat this process until
      test.py runs without errors. I will not modify the test.py file.'', ''reasoning'':
      ''I will start by running test.py to see if there are any errors. If there are
      errors, I will need to modify the code in code.py. I will use the read_file
      and write_to_file commands to modify the code. I will repeat this process until
      test.py runs without errors. This is the most efficient way to debug the code
      without modifying the test.py file.'', ''plan'': ''- Run test.py using the execute_python_file
      command\\n- If there are errors, read code.py using the read_file command and
      modify it using the write_to_file command\\n- Repeat until test.py runs without
      errors\\n- Do not modify the test.py file'', ''criticism'': ''I need to make
      sure that I am not modifying the test.py file and that I am only modifying code.py.
      I also need to make sure that I am not making unnecessary modifications to the
      code.'', ''speak'': ''I will start by running test.py using the execute_python_file
      command. If there are any errors, I will read code.py using the read_file command
      and modify it using the write_to_file command. I will repeat this process until
      test.py runs without errors. I will not modify the test.py file.''}, ''command'':
      {''name'': ''execute_python_file'', ''args'': {''filename'': ''test.py''}}}"},
      {"role": "system", "content": "Command execute_python_file returned: Traceback
      (most recent call last):\n  File \"/workspace/test.py\", line 19, in <module>\n    test_two_sum(nums,
      target, expected_result)\n  File \"/workspace/test.py\", line 7, in test_two_sum\n    result
      = two_sum(nums, target)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/code.py\",
      line 8, in two_sum\n    typo\nNameError: name ''typo'' is not defined. Did you
      mean: ''type''?\n"}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:"}, {"role":
      "assistant", "content": "{''thoughts'': {''text'': ''There is a NameError in
      the code. I will need to modify code.py to fix the error. I will use the read_file
      and write_to_file commands to modify the code. I will then run test.py again
      using the execute_python_file command to see if the error has been fixed.'',
      ''reasoning'': ''There is a NameError in the code, which means that there is
      a variable that has not been defined. I will need to modify code.py to fix the
      error. I will use the read_file and write_to_file commands to modify the code.
      I will then run test.py again using the execute_python_file command to see if
      the error has been fixed. This is the most efficient way to debug the code without
      modifying the test.py file.'', ''plan'': ''- Read code.py using the read_file
      command\\n- Modify code.py to fix the NameError\\n- Use the write_to_file command
      to save the changes\\n- Run test.py again using the execute_python_file command\\n-
      Repeat until there are no errors\\n- Do not modify the test.py file'', ''criticism'':
      ''I need to make sure that I am only modifying code.py and not making unnecessary
      modifications to the code. I also need to make sure that I am not modifying
      the test.py file.'', ''speak'': ''There is a NameError in the code. I will need
      to modify code.py to fix the error. I will use the read_file and write_to_file
      commands to modify the code. I will then run test.py again using the execute_python_file
      command to see if the error has been fixed.''}, ''command'': {''name'': ''read_file'',
      ''args'': {''filename'': ''code.py''}}}"}, {"role": "system", "content": "Command
      read_file returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the JSON schema specified previously:"}],
      "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '9383'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+xW24rbSBB991cU2gdvwBrGMzuXCCZPQ2CWbBbC5Mk2pkcuSZVRVyvd1etxjP89
        lC62hrCB3ecIY1DVOXU53a7yfgKQ0CbJIMkrI7lt6vTmcTd/T3++/3bx5f7D14+f7Vt2/IDlvb15
        xGSmDPf0BXMZWGe5s02NQo47d+7RCGrU+fXtzeXN9dXtvHVYt8FaaWUj6eXZVSrRP7n0/PJ83jMr
        RzmGJIPFBABg335rjbzBlySD89lgsRiCKTHJjiCAxLtaLYkJgYIYlmR2cuaOBbktez+VysWykjDN
        YD8VfJFpBtMHqMw/CIWLvAGpENB754G4fcndBs/gsUKPQAEMyK5xr50PsKW6Bus2VOw6W7MDcVDQ
        SwtTyhEWA7bGrSfBtbh1QbVGstZofgdBq2mjV4ZLDEemVMjgI4NgEE1hSkMMMRCXXeEvmEfBdbOT
        yvGPgRGBilGLlQnwhMhaKG7OpjOYejTBMXH5S5mRMvBYUdAmFWFdEMCioJyQBbam7WiDT7E8tg5b
        0rsmfetDGUN5mr+Vu6kNq9Ip/PVTjZZLTuHzf9WnZX36f7J0XGzQCEQWakX2CMYjsOtk6hLcO2A3
        dPpDm9pl7kkop2C7S8WIbbnWPCOE6LVmI/AAxoLjejcSbZBDG2yTmGc1R2bMdRT4Hky50UkUNOz4
        +pk6uJ/mO1X+r2cUGjTPv34O40Fx0EPt8O0oZWNRFXpVqmpnfNkNWzUMqL5x9Q8z+Dewu2aXAZXs
        PKbH21V4Z1UVLZxs47zABwoyg78bPW9TL5fcfTZYgGzdOkT7O0cbsh4oxpcoGRDLG0jfHYkLdS+I
        ZbXKlkvWXRG0wzvYH/r3Qg93BhytHiNytOiNYBv+zUDSp1uFVqfBXZ8QUuWNMFSMYcRttnEQfTxK
        9AwL9S1O8NUMaDWCtm6OdgV3QL29p350jMslTw+HQ9IvwcNxexbEFKp1N+N1IwZxTQc7TABW7TaO
        rxZs0nhnG1mLe0bWFX0xf3vVBUxO/wBO7j8ubnuvODH1iHd9cTnRPIfJdwAAAP//AwA8Jw6ogAgA
        AA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebcef9b9413ef-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:43:18 GMT
      Function-Execution-Id:
      - tuzip24ypnd9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17248'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8a2d6ca71966b14331ea7fd1f0a457d6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 58f79f142f8ca3df1647138a65bd9edf
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Your task is to create a concise
      running summary of actions and information results in the provided text, focusing
      on key and potentially important information to remember.\n\nYou will receive
      the current summary and your latest actions. Combine them, adding relevant key
      information from the latest development in 1st person past tense and keeping
      the summary concise.\n\nSummary So Far:\n\"\"\"\nI was created\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\": {\"name\":
      \"execute_python_file\", \"args\": {\"filename\": \"test.py\"}}}'', type=''ai_response''),
      Message(role=''your computer'', content=''Command execute_python_file returned:
      Traceback (most recent call last):\\n  File \"/workspace/test.py\", line 19,
      in <module>\\n    test_two_sum(nums, target, expected_result)\\n  File \"/workspace/test.py\",
      line 7, in test_two_sum\\n    result = two_sum(nums, target)\\n             ^^^^^^^^^^^^^^^^^^^^^\\n  File
      \"/workspace/code.py\", line 8, in two_sum\\n    typo\\nNameError: name \\''typo\\''
      is not defined. Did you mean: \\''type\\''?\\n'', type=''action_result'')]\n\"\"\"\n"}],
      "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1224'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SRS2/CMBCE7/kVK59JBA0v5VipVTm0oqiXUipknIWYxt7I3vAQ4r9XDgHaiw87
        +43H41MEIHQuMhCqkKxMVcajj2NP1aWZfb4/mu2AxvOpfK7nr+V8O52JTiBotUXFVypRZKoSWZO9
        yMqhZAyuveF4lI6Gw26/EQzlWAZsU3GcJoOYa7eiuJt2ey1ZkFboRQZfEQDAqTlDRpvjQWTQ7Vwn
        Br2XGxTZbQlAOCrDREjvtWdpWXTuoiLLaJvYE9hLD23OBCbgUKHeYQ4SFBkjbQ5MgAdUNSNImB65
        IAtrXSJYaTCHhWD0nFTHhUjghfa4Q9cBLrClNFlwyLWzwdUCOkcO8hqDsYQ3afCpGWnbUIpyTESb
        9nx75lpb7YulQ+nJhuieqbqsnSOA76a2+l8TonJkKl4y/aANXT4M0oufuP/UXU37rcjEsvxDjUdR
        uOQc/QIAAP//AwAQfWi3JgIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebd7ede5d2ac6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:43:25 GMT
      Function-Execution-Id:
      - tuziyk09698k
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1605'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - af94c5ebe3fc866441361e6e7f832e50;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89718'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 188ms
      X-Request-Id:
      - ce99edc292b2ebc18fc6122f1b37611e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created.
      I received a command to execute a Python file named \"test.py\". However, the
      execution returned an error due to a NameError in the code."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{''thoughts'':
      {''text'': ''There is a NameError in the code. I will need to modify code.py
      to fix the error. I will use the read_file and write_to_file commands to modify
      the code. I will then run test.py again using the execute_python_file command
      to see if the error has been fixed.'', ''reasoning'': ''There is a NameError
      in the code, which means that there is a variable that has not been defined.
      I will need to modify code.py to fix the error. I will use the read_file and
      write_to_file commands to modify the code. I will then run test.py again using
      the execute_python_file command to see if the error has been fixed. This is
      the most efficient way to debug the code without modifying the test.py file.'',
      ''plan'': ''- Read code.py using the read_file command\\n- Modify code.py to
      fix the NameError\\n- Use the write_to_file command to save the changes\\n-
      Run test.py again using the execute_python_file command\\n- Repeat until there
      are no errors\\n- Do not modify the test.py file'', ''criticism'': ''I need
      to make sure that I am only modifying code.py and not making unnecessary modifications
      to the code. I also need to make sure that I am not modifying the test.py file.'',
      ''speak'': ''There is a NameError in the code. I will need to modify code.py
      to fix the error. I will use the read_file and write_to_file commands to modify
      the code. I will then run test.py again using the execute_python_file command
      to see if the error has been fixed.''}, ''command'': {''name'': ''read_file'',
      ''args'': {''filename'': ''code.py''}}}"}, {"role": "system", "content": "Command
      read_file returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the JSON schema specified previously:"}, {"role":
      "assistant", "content": "{''thoughts'': {''text'': ''I have found the error
      in the code. There is a typo in the code. I will modify code.py to fix the typo.
      I will use the write_to_file command to save the changes. I will then run test.py
      again using the execute_python_file command to see if the error has been fixed.'',
      ''reasoning'': ''I have found the error in the code. There is a typo in the
      code. I will modify code.py to fix the typo. I will use the write_to_file command
      to save the changes. I will then run test.py again using the execute_python_file
      command to see if the error has been fixed. This is the most efficient way to
      debug the code without modifying the test.py file.'', ''plan'': ''- Modify code.py
      to fix the typo\\n- Use the write_to_file command to save the changes\\n- Run
      test.py again using the execute_python_file command\\n- Repeat until there are
      no errors\\n- Do not modify the test.py file'', ''criticism'': ''I need to make
      sure that I am only modifying code.py and not making unnecessary modifications
      to the code. I also need to make sure that I am not modifying the test.py file.'',
      ''speak'': ''I have found the error in the code. There is a typo in the code.
      I will modify code.py to fix the typo. I will use the write_to_file command
      to save the changes. I will then run test.py again using the execute_python_file
      command to see if the error has been fixed.''}, ''command'': {''name'': ''write_to_file'',
      ''args'': {''filename'': ''code.py'', ''text'': ''# mypy: ignore-errors\\nfrom
      typing import List, Optional\\n\\n\\ndef two_sum(nums: List, target: int) ->
      Optional[List[int]]:\\n    seen = {}\\n    for i, num in enumerate(nums):\\n        complement
      = target - num\\n        if complement in seen:\\n            return [seen[complement],
      i]\\n        seen[num] = i\\n    return None\\n''}}}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}], "model": "gpt-3.5-turbo", "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '9421'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8yUwW7bMAyG73kKQhdfkqBpuqTIbUO3ocAuK4phWDsEikzbWi3SleglQeB3HyQ1
        bYb1tFMvPpA/yY+UycMIQNlSrUCZRotxXTtZ3u5nj8ul/6p/fJp/WTzOH799/vD+43db4lVQ4xjB
        m19o5Bg1Ney6FsUyZbfxqAVj1tnicjlfLhazy+RwXGIbw+pOJvPpu4n0fsOTs/nZ7CmyYWswqBXc
        jQAADukbGanEnVrB2fhocRiCrlGtnkUAynMbLUqHYINoEjV+cRomQUrYh0Ia7utGQrGCQyG4k2IF
        xTU0+jeC49JWFkswXOK024MwVHYH0iDIvuMpXMPWti0Qb8H3BIJBok7X2hL0wVKdxLhD0wuuu700
        TOvKtgiGndNUxpwBEWyVld6zh0YH2CBSrIbltBhD4VEHJkv1G+SD28YGsCEpHAcBrCprLJLAVies
        Ejd9rhVZYWvj3CV3sD9iHPFi/dR012qK/U7g5v/o7+9pAjfYoRboSWwbAzyC9gjEuZuQRFcMxEeg
        f2gijPFWrLHB5RcgxDQcpx8QQu8RpNEC16DdSabXWoM01mcxU7s/Ub/ylhkzTSR0qB/e4i86xAll
        fVol0g4j5yt5Yx/a13nlouGofWIrhmFQT+s6PO95ZcmGZp33IO5uEO6ybBgB/Ex3o//rFKjOs+tk
        LfyAFI/J+fnsIidUL7fqxJ3PE4ASFt2eOC7m56NYZxj9AQAA//8DAJGonCUqBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebdd62c9c1b63-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:43:47 GMT
      Function-Execution-Id:
      - tuzinea4r5dg
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9195'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cb99a25062373a13bf1925fa65c612c5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 5587b15c2610fff4ea19da5d8df85e74
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created.
      I received a command to execute a Python file named \"test.py\". However, the
      execution returned an error due to a NameError in the code."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{''thoughts'':
      {''text'': ''There is a NameError in the code. I will need to modify code.py
      to fix the error. I will use the read_file and write_to_file commands to modify
      the code. I will then run test.py again using the execute_python_file command
      to see if the error has been fixed.'', ''reasoning'': ''There is a NameError
      in the code, which means that there is a variable that has not been defined.
      I will need to modify code.py to fix the error. I will use the read_file and
      write_to_file commands to modify the code. I will then run test.py again using
      the execute_python_file command to see if the error has been fixed. This is
      the most efficient way to debug the code without modifying the test.py file.'',
      ''plan'': ''- Read code.py using the read_file command\\n- Modify code.py to
      fix the NameError\\n- Use the write_to_file command to save the changes\\n-
      Run test.py again using the execute_python_file command\\n- Repeat until there
      are no errors\\n- Do not modify the test.py file'', ''criticism'': ''I need
      to make sure that I am only modifying code.py and not making unnecessary modifications
      to the code. I also need to make sure that I am not modifying the test.py file.'',
      ''speak'': ''There is a NameError in the code. I will need to modify code.py
      to fix the error. I will use the read_file and write_to_file commands to modify
      the code. I will then run test.py again using the execute_python_file command
      to see if the error has been fixed.''}, ''command'': {''name'': ''read_file'',
      ''args'': {''filename'': ''code.py''}}}"}, {"role": "system", "content": "Command
      read_file returned: # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for
      i, num in enumerate(nums):\n        typo\n        complement = target - num\n        if
      complement in seen:\n            return [seen[complement], i]\n        seen[num]
      = i\n    return None\n"}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the JSON schema specified previously:"}, {"role":
      "assistant", "content": "{''thoughts'': {''text'': ''I have found the error
      in the code. There is a typo in the code. I will modify code.py to fix the typo.
      I will use the write_to_file command to save the changes. I will then run test.py
      again using the execute_python_file command to see if the error has been fixed.'',
      ''reasoning'': ''I have found the error in the code. There is a typo in the
      code. I will modify code.py to fix the typo. I will use the write_to_file command
      to save the changes. I will then run test.py again using the execute_python_file
      command to see if the error has been fixed. This is the most efficient way to
      debug the code without modifying the test.py file.'', ''plan'': ''- Modify code.py
      to fix the typo\\n- Use the write_to_file command to save the changes\\n- Run
      test.py again using the execute_python_file command\\n- Repeat until there are
      no errors\\n- Do not modify the test.py file'', ''criticism'': ''I need to make
      sure that I am only modifying code.py and not making unnecessary modifications
      to the code. I also need to make sure that I am not modifying the test.py file.'',
      ''speak'': ''I have found the error in the code. There is a typo in the code.
      I will modify code.py to fix the typo. I will use the write_to_file command
      to save the changes. I will then run test.py again using the execute_python_file
      command to see if the error has been fixed.''}, ''command'': {''name'': ''write_to_file'',
      ''args'': {''filename'': ''code.py'', ''text'': ''# mypy: ignore-errors\\nfrom
      typing import List, Optional\\n\\n\\ndef two_sum(nums: List, target: int) ->
      Optional[List[int]]:\\n    seen = {}\\n    for i, num in enumerate(nums):\\n        complement
      = target - num\\n        if complement in seen:\\n            return [seen[complement],
      i]\\n        seen[num] = i\\n    return None\\n''}}}"}, {"role": "system", "content":
      "Command write_to_file returned: File written to successfully."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{''thoughts'':
      {''text'': ''I have modified code.py to fix the typo. I will now run test.py
      again using the execute_python_file command to see if the error has been fixed.'',
      ''reasoning'': ''I have modified code.py to fix the typo. I will now run test.py
      again using the execute_python_file command to see if the error has been fixed.
      This is the most efficient way to debug the code without modifying the test.py
      file.'', ''plan'': ''- Run test.py again using the execute_python_file command\\n-
      Repeat until there are no errors\\n- Do not modify the test.py file'', ''criticism'':
      ''I need to make sure that I am not modifying the test.py file and that I am
      only modifying code.py to fix the errors.'', ''speak'': ''I have modified code.py
      to fix the typo. I will now run test.py again using the execute_python_file
      command to see if the error has been fixed.''}, ''command'': {''name'': ''execute_python_file'',
      ''args'': {''filename'': ''test.py''}}}"}, {"role": "system", "content": "Command
      execute_python_file returned: [0, 1]\n[2, 5]\n[0, 3]\n"}, {"role": "user", "content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:"}], "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '10603'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+xVTW/bMAy951cQvviSBG3TJlmOQ7GhGwoMRXZY1yFQZNrSYouGRC8xgvz3QZIT
        p8M+gB166sUH8pF8eqTJ/QAg0VmygEQqwbKqy9Fs2V7daqnaj+X7T1J8eLx6ezOduS8P7+5NkQx9
        BK2/o+Rj1FhSVZfImkx0S4uC0We9nM5nk9l0en0ZHBVlWPqwoubRZHwz4sauaXQxubjsIhVpiS5Z
        wNcBAMA+fD1Hk+EuWcDF8Gip0DlRYLI4gQASS6W3JMI57VgYToa9U5JhNIH2PmVFTaHYpQvYp4w7
        TheQLhVaBO3AsS5LEAbQWrKgDbBCkJThGJYKgRquGwbKgx13KBvGVd2yIrPKdemxVSVMBk7R1gEr
        wacUfQFDDFuyG20KkGQtSi7bMdzBNngRM2CCijKdt7F63YIohOdDkOtdLO85nqIah8FqUWSRiqex
        tZpxxfSMnDvL3r+vy8MKDdjGAKPjvm7jPNl/vZoJHCLovCcISjhYIxrPG7NxOoTUonBktClexX9Z
        8WGptPNSeERFjgHzXEuNhmErWp8iw3VT9LJttf9juGN8pHGk5+uHjtalML6ZI3hAkZ1k64n3ynR0
        n57MCO6fq/yrvgHzudP2t2qGR4sfESGVMAW6EPXwfyLGWKxRMDSGdWiJRRAWwVBkFQvcUpiks06e
        i+I1kVazltpVXpi7frLEBsE1FuOA3oGogEzZnkl8mjqTxSIiTGtjDEq//mwH1lL47RtG6nyWROno
        r/V65n/sqKtRbF7/zxdejgc/NxEfLpQRFfomnIj71ghbxPvlDUdEp0R6OByS7vYdTkcz10Y7tYp7
        1x9Cx1RH2GEA8C0c4ebZXU1qS1XNK6YNGn+Zr67n85gw6Q9/7568mXZeJhblWdx8fj3wdQ6DnwAA
        AP//AwCNDCzJdwgAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebe64ceb122c4-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:44:10 GMT
      Function-Execution-Id:
      - tuzilrjo8eqv
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9894'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 75be64133649c0d7ff215bc71a491869;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - c3def956076318efe94f1820dcfed756
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"# mypy: ignore-errors from typing import
      List, Optional   def two_sum(nums: List, target: int) -> Optional[List[int]]:     seen
      = {}     for i, num in enumerate(nums):         complement = target - num         if
      complement in seen:             return [seen[complement], i]         seen[num]
      = i     return None \"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized
      as"}], "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '553'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RSTY8aMQy98yusnAcEyy5Qjj21PVT9oKduhULGMxOYsaPYWUAr/nuVYfm6RIqf
        n9/zx/sAwPjSLMG4xqrrQjucr45PP8O37XZfN7T48vQ70a/Ph8NqPk1/nk2RGbzZotMLa+S4Cy2q
        ZzrDLqJVzFUns8V8Op/NXp57oOMS20yrgw6no5ehprjh4Xg6nnwwG/YOxSzh7wAA4L1/s0cq8WCW
        MC4ukQ5FbI1meU0CMJHbHDFWxItaUlPcQMekSL1tCz+O2jBBlchl4+Bs22IJr0b3vJbUvRrQxiqo
        3aGAhdaLAldAqdtgFLBUggW1sUYFT4o1RrACnkLSoocjaop0T9Y9g6cytwhV5A60wTPjnLJvWBAc
        x4gSmEpPNbzZNmUHZQkpgHLPedQdwdcKiEGSa6718eBFiz772uTF0XcmHMHqHkrSt1n6/mvjMUvt
        EANotG6X3YeIb56TtEcQRHoYhTbo40V7ZD6Gfrpuq/LkpVlHtMKUNyDK4Zx2GgD867efHhZqQuQu
        6Fp5h5RPYjL+dK5nbgd3Q2cXUFlte8eaLwZZ5DT4DwAA//8DAMXPJUHtAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebeb63c266336-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:44:15 GMT
      Function-Execution-Id:
      - lls2s9t8f2nn
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1883'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ae7d83740ca1f9bec2b1be2617fd0a9e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89391'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 406ms
      X-Request-Id:
      - cb5e116fd05bb36f5e735ec2d3b41af3
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["# mypy: ignore-errors from typing import List, Optional   def
      two_sum(nums: List, target: int) -> Optional[List[int]]:     seen = {}     for
      i, num in enumerate(nums):         complement = target - num         if complement
      in seen:             return [seen[complement], i]         seen[num] = i     return
      None "], "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebed70a80e11c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:44:19 GMT
      Function-Execution-Id:
      - tuzichq866qr
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '398'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 329478c97b459bd9ebbeacd29d3b198e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - de22452e64e61b1e86bbbcf3934a5ba1
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a Python function called \"two_sum\" that takes a list of numbers
      and a target integer as input, and returns a list of two indices from the input
      list whose corresponding values add up to the target integer. If no such indices
      exist, the function returns None. The function uses a dictionary to keep track
      of previously seen numbers and their indices.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '428'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebeeaea8f2bb3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:44:23 GMT
      Function-Execution-Id:
      - lls2r1pw75jt
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '958'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 307ab603731ff4c39d1cbfeb147b18e2
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 4ac318194648740ed8ab1772abd6e552
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Your task is to create a concise
      running summary of actions and information results in the provided text, focusing
      on key and potentially important information to remember.\n\nYou will receive
      the current summary and your latest actions. Combine them, adding relevant key
      information from the latest development in 1st person past tense and keeping
      the summary concise.\n\nSummary So Far:\n\"\"\"\nI was created. I received a
      command to execute a Python file named \"test.py\". However, the execution returned
      an error due to a NameError in the code.\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'',
      content=''{\"command\": {\"name\": \"read_file\", \"args\": {\"filename\": \"code.py\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=''Command read_file
      returned: # mypy: ignore-errors\\nfrom typing import List, Optional\\n\\n\\ndef
      two_sum(nums: List, target: int) -> Optional[List[int]]:\\n    seen = {}\\n    for
      i, num in enumerate(nums):\\n        typo\\n        complement = target - num\\n        if
      complement in seen:\\n            return [seen[complement], i]\\n        seen[num]
      = i\\n    return None\\n'', type=''action_result'')]\n\"\"\"\n"}], "model":
      "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1288'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RSy44aMRC88xUlnwGxSxYQtxxy2ENWJCKHKEQr42lmnLXdE7vNQyv+PfLALOFi
        yVVdXWV3vw8AZSu1hDKNFuNbN5qvT4/EPyc//h5XX/1n09IiSP1tvahe9is1LAre/iEjvWps2LeO
        xHK40CaSFipdH2aL+XQ+m80WHeG5IldkdSuj6fhpJDlueTSZTh6uyoatoaSW+DUAgPfuLBlDRUe1
        xGTYI55S0jWp5UcRoCK7giidkk2ig6jhjTQchEIX+xkHnXDNCWHQkUwWgsbqJA0H7KwjBO2pwkYJ
        JRm3p40aYpsFFAznIBSpgsaL9vQlRo6wAdIQDFc0xncyFMSdhnhGJEN231Ub9l6HzjOSLsidU6ct
        Tjg01jSIJDmGTrnLwZQ/htHOXWId+DVlv1GQRgtEv1GChrNJwDvYIFRTTCh+GqJjTdKj0Ak61tlT
        kEvFxer/BnJg2FCVieDQcCLstcvFo6qQ2/KG8t77xmOsG7qFzanLVNnuquOpqJJwJLSR9pZzcick
        ooCQ/baPKw3Z2JuP1XWI54/p72ywqXmNpBOHMtEk3F7KzgPgd7dN+W5BVBvZt/Iq/EahrNjj0+LS
        T90W+MYuelJYtLvh00+zQTE5D/4BAAD//wMAu3JCVD0DAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebf10699c2d2a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:44:30 GMT
      Function-Execution-Id:
      - lls2u00ux9ww
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2050'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a40a45d53b73a742a3a6bcfbcb241aec;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89701'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 199ms
      X-Request-Id:
      - 0d7b3f06607935aa2edbbecdb02a6547
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Debug Code Agent,
      an autonomous agent that specializes in debugging python code\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      1- Run test.py using the execute_python_file command.\n2. 2- Read code.py using
      the read_file command.\n3. 3- Modify code.py using the write_to_file command.Repeat
      step 1, 2 and 3 until test.py runs without errors. Do not modify the test.py
      file.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your short
      term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      execute_python_code: Creates a Python file and executes it, args: {''code'':
      {''type'': ''string'', ''description'': ''The Python code to run'', ''required'':
      True}, ''name'': {''type'': ''string'', ''description'': ''A name to be given
      to the python file'', ''required'': True}}\n2. execute_python_file: Executes
      an existing Python file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of te file to execute'', ''required'': True}}\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, args: {''command_line'':
      {''type'': ''string'', ''description'': ''The command line to execute'', ''required'':
      True}}\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n5. append_to_file: Appends to a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to write to'',
      ''required'': True}, ''text'': {''type'': ''string'', ''description'': ''The
      text to write to the file'', ''required'': True}}\n6. delete_file: Deletes a
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The name
      of the file to delete'', ''required'': True}}\n7. list_files: Lists Files in
      a Directory, args: {''directory'': {''type'': ''string'', ''description'': ''The
      directory to list files in'', ''required'': True}}\n8. read_file: Read an existing
      file, args: {''filename'': {''type'': ''string'', ''description'': ''The path
      of the file to read'', ''required'': True}}\n9. write_to_file: Writes to a file,
      args: {''filename'': {''type'': ''string'', ''description'': ''The name of the
      file to write to'', ''required'': True}, ''text'': {''type'': ''string'', ''description'':
      ''The text to write to the file'', ''required'': True}}\n10. google: Google
      Search, args: {''query'': {''type'': ''string'', ''description'': ''The search
      query'', ''required'': True}}\n11. web_search: Searches the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n12. browse_website: Browses a Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created
      to execute a Python file named \"test.py\", but encountered a NameError in the
      code. Recently, I received a command to read a file named \"code.py\" which
      returned a function called \"two_sum\" that takes a list of integers and a target
      integer as arguments and returns a list of two indices whose values add up to
      the target integer. The function uses a dictionary to store previously seen
      numbers and their indices."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{''thoughts'': {''text'': ''I have found the
      error in the code. There is a typo in the code. I will modify code.py to fix
      the typo. I will use the write_to_file command to save the changes. I will then
      run test.py again using the execute_python_file command to see if the error
      has been fixed.'', ''reasoning'': ''I have found the error in the code. There
      is a typo in the code. I will modify code.py to fix the typo. I will use the
      write_to_file command to save the changes. I will then run test.py again using
      the execute_python_file command to see if the error has been fixed. This is
      the most efficient way to debug the code without modifying the test.py file.'',
      ''plan'': ''- Modify code.py to fix the typo\\n- Use the write_to_file command
      to save the changes\\n- Run test.py again using the execute_python_file command\\n-
      Repeat until there are no errors\\n- Do not modify the test.py file'', ''criticism'':
      ''I need to make sure that I am only modifying code.py and not making unnecessary
      modifications to the code. I also need to make sure that I am not modifying
      the test.py file.'', ''speak'': ''I have found the error in the code. There
      is a typo in the code. I will modify code.py to fix the typo. I will use the
      write_to_file command to save the changes. I will then run test.py again using
      the execute_python_file command to see if the error has been fixed.''}, ''command'':
      {''name'': ''write_to_file'', ''args'': {''filename'': ''code.py'', ''text'':
      ''# mypy: ignore-errors\\nfrom typing import List, Optional\\n\\n\\ndef two_sum(nums:
      List, target: int) -> Optional[List[int]]:\\n    seen = {}\\n    for i, num
      in enumerate(nums):\\n        complement = target - num\\n        if complement
      in seen:\\n            return [seen[complement], i]\\n        seen[num] = i\\n    return
      None\\n''}}}"}, {"role": "system", "content": "Command write_to_file returned:
      File written to successfully."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{''thoughts'': {''text'': ''I have modified
      code.py to fix the typo. I will now run test.py again using the execute_python_file
      command to see if the error has been fixed.'', ''reasoning'': ''I have modified
      code.py to fix the typo. I will now run test.py again using the execute_python_file
      command to see if the error has been fixed. This is the most efficient way to
      debug the code without modifying the test.py file.'', ''plan'': ''- Run test.py
      again using the execute_python_file command\\n- Repeat until there are no errors\\n-
      Do not modify the test.py file'', ''criticism'': ''I need to make sure that
      I am not modifying the test.py file and that I am only modifying code.py to
      fix the errors.'', ''speak'': ''I have modified code.py to fix the typo. I will
      now run test.py again using the execute_python_file command to see if the error
      has been fixed.''}, ''command'': {''name'': ''execute_python_file'', ''args'':
      {''filename'': ''test.py''}}}"}, {"role": "system", "content": "Command execute_python_file
      returned: [0, 1]\n[2, 5]\n[0, 3]\n"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{''thoughts'': {''text'': ''There is still
      an error in the code. The output of the execute_python_file command shows that
      the code is still not working correctly. I will need to modify code.py again
      to fix the error. I will use the read_file and write_to_file commands to modify
      the code. I will then run test.py again using the execute_python_file command
      to see if the error has been fixed.'', ''reasoning'': ''There is still an error
      in the code. The output of the execute_python_file command shows that the code
      is still not working correctly. I will need to modify code.py again to fix the
      error. I will use the read_file and write_to_file commands to modify the code.
      I will then run test.py again using the execute_python_file command to see if
      the error has been fixed. This is the most efficient way to debug the code without
      modifying the test.py file.'', ''plan'': ''- Read code.py using the read_file
      command\\n- Modify code.py to fix the error\\n- Use the write_to_file command
      to save the changes\\n- Run test.py again using the execute_python_file command\\n-
      Repeat until there are no errors\\n- Do not modify the test.py file'', ''criticism'':
      ''I need to make sure that I am only modifying code.py and not making unnecessary
      modifications to the code. I also need to make sure that I am not modifying
      the test.py file.'', ''speak'': ''There is still an error in the code. The output
      of the execute_python_file command shows that the code is still not working
      correctly. I will need to modify code.py again to fix the error. I will use
      the read_file and write_to_file commands to modify the code. I will then run
      test.py again using the execute_python_file command to see if the error has
      been fixed.''}, ''command'': {''name'': ''read_file'', ''args'': {''filename'':
      ''code.py''}}}"}, {"role": "system", "content": "Command read_file returned:
      # mypy: ignore-errors\nfrom typing import List, Optional\n\n\ndef two_sum(nums:
      List, target: int) -> Optional[List[int]]:\n    seen = {}\n    for i, num in
      enumerate(nums):\n        complement = target - num\n        if complement in
      seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return
      None\n"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo",
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '11121'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+xW34vjRgx+z18h3If0IAm7m9sfNWyfWuge7R2024eShDBry7a6Ho2Z0VxiQv73
        Iv9Ichw9aLnHMyEko0/Sp2/k0RwmAAnlSQpJVhnJbFPP75/bm48P+93+Hf1RFj838a/3u19CbG+W
        1+92yUw93MvfmMnotcicbWoUctybM49GUKNe3z3cL+/v7h5uO4N1OdbqVjYyXy5u5xL9i5tfLa+u
        B8/KUYYhSWE1AQA4dN/KkXPcJylczcYViyGYEpP0BAJIvKt1JTEhUBDDkszOxsyxIHe0D1OpXCwr
        CdMUDlPBvUxTmD5BZT4ieDQ5SIWQuRwXTQsF1biAwUo5slBB2GPQe+eB+OwAzxV6BApgwFIIxCVk
        zlozoorImaoFORbEpD81+o7qGqzLqWhPmcVBQftzohMuBuxWd54Et+K2yrFPw7m6BeXacaoMlxhO
        nlIhg48MgkE0hykNMcSOZ5doj1kU3DatVI4/D4wIVFzUXpkAL4isTDFfTGcw9WiCY+Lym6pfSVV4
        riho9YqwLghgUVBGyAI705WU40ssT4LBjrTHZah9pDHS68TXrWpqw7pLc/jtyyKt1zyHP/+rQJ3X
        7/9Pl94XGzQCkYU6lT2C8QjselZ9gp8csBtL/axOLTPzJJRRsH1HMmJH15pXhBC9cjYCT2AsOK7b
        C9VGPbTALol51eXIjJmeQX4AU2a054KGPXftE5g6uC/mOzP/100KDZrXb+/S1zqhjtoQPb47/9lY
        VHU/oaq6G1/2E0IXRtRQudrHwfEd2LZpU6CSncf5qTML7yxI2yhxso3zAr9SkBl8aFRTU6/X3H9y
        LEB2bhui/Z6jDWkHXBHLZgZifImSArG8gfmPJ+/VCbNJ12vWKRe0zEc4HIf/hW79DDha3VvkaNEb
        wS7Hm9FJn36IWz1PHoeEMFe/CwwVlzDiLttlEH08SvQMK7WtzvDNDGhzAe3MHO0GHoGG9cH1vWNc
        r3l6PB6TYXwfT3Nf+zFU237C6CwP4poedpwAbLp7RPzkapA03tlGtuJekfVycXP7cNMHTM53l7P5
        7e0Pg1WcmPpsWF69vZ5onuPkHwAAAP//AwAwKxxaOgkAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7daebf6cbb0f1134-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 21 Jun 2023 19:45:07 GMT
      Function-Execution-Id:
      - lls2tq2cp1hj
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22933'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 89dd88a612d6614b1c7eb2e3e042a5f3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 5ad6abf62d586ec8c166a98e888ab8f9
    status:
      code: 200
      message: OK
version: 1
