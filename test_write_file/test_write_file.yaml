interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTQY/TMBCF7/yK0Vx6cau023a7uQESsEICCbECiaDKdaaJqWMHe6IuVPnvyEm6
        3Q3ihOA6b/LeN+PJCXWOKapSsqpqM71+e6cX737aZFl/eM7vd8vXL6rm1edi93I536NAt/tGiocv
        ZspVtSHWzqJA5Uky5ZjO15vVfL65WS8EVi4ngykWNU+vZqspN37npslVMkeBTZAFYXrC2ruq5i27
        A9mA6fVqI/Di/VBfJAuB7Fiah9LNOmkFqtJpRQHTLyesKJxtvTOEKcoQdGBpOUI6y2TjAKfMAgBk
        yKVripJDhikMxUGge47FDG/BEuXADppAwCXB0WumLbvtXhsC5apK2q6hE2Dyhoxx8Ml5k09AW3Yg
        oWu1sqIcJmXUt8eoz/ieJ7MMxeNsTzI4q23RA3wsCViGA3j63mhPASr6izQBHe0f59ChE2Vde1d7
        Lfki7Z0HLmODDIcxdW2k7YGncPefNqW8Zq10qMZPRTY0PjJIhluQFTRB26JjUs57UnzJGfYhuZPj
        w8cdREIme243P8bZoSZ5OOcetTH/8j764Fac73Yw/e1so0PP9ARihC59Mb74Xoi9F4sRxxOT8V/y
        aKYzbUc8gGe2xVbgXlsdym1/4JhiYFejQG1zusc0ab+2z34BAAD//wMASj5S/5UEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76f4e1f00811f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:25 GMT
      Function-Execution-Id:
      - avx8b88pjq23
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22788'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 997ebedeaf612731d388a171b505881f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - c2cebf84f286b52da3f37d2a8fdf354e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The task requires me to write ''Hello World'' into a file named ''hello_world.txt'',
      and the write_to_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I need to ensure that I am
      using the correct file name and that the text is written correctly.\",\n        \"speak\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"hello_world.txt\",\n            \"text\":
      \"Hello World\"\n        }\n    }\n}"}, {"role": "system", "content": "Command
      write_to_file returned: File written to successfully."}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4623'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SSTW/TQBCG7/yK0Vxy2UR2q4bER6RKtFwQNCCBUbRZT+wl691ld9wGRf7vyLFN
        QmkPgLjO5/vMvAfUBWaoKsmq9mb68s1Kr+TtK1PUN/MPzfVy/t69e3v9SYbN8hYFus1XUjx0zJSr
        vSHWzqJAFUgyFZil88VVmi6Wy0Rg7QoymGHpeXo5u5pyEzZumlwmKQpsoiwJswP64GrPa3Y7shGz
        NLlIBZ6GnxKLhUB2LM0pdJEsW4GqclpRxOzzAWuK4+DgDGGGMkYdWVruZDrLZDuEQ24BAHLkyjVl
        xTHHDIbgkKA9d8Ecb6CS9wSxUYpi3DbGfIeHoJnJwuQ1GePgowummIC27EDCVhsCK2sqYFJ1+fVD
        l5/xniczuKsILO0ZIpMHHYEdNJGAKwKWcbce4AmUq2tpi67gZ2ysmuUozuUGktFZbcte891QBoG+
        NTpQhJqenANyyxSOPNqWf84j4KjwWe0dX0UgvQ/OBy3PUlsXgKuu4Akeb6TtUaaw+ufrqA5P6ViP
        H7VEx06ysQldn2QY/uyDu9cFFSChP+pR6OhIWz67JHqSu3HBgzbm797aj2zF6NCh/DeDdg/pt/0y
        /pEoGcrH3j43zP9w+IhwxBhocttiK3CrrY7Vut+NGUZ2HgVqW9Aes6T90r74AQAA//8DAGA/y4mW
        BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76ff8c80c1136-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:52 GMT
      Function-Execution-Id:
      - avx8tp0avbli
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22115'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 50e3dcee3952c9683588ee097e607cf6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.664s
      X-Request-Id:
      - aacaa64be2a10adf401f93f880e9fe53
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Hello World\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '252'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzUrDQBRG9z5F+NaTkJj+ztaNoq40CFop08ltMnUyN8zcUqHk3aWgdXvgHM4Z
        roWG7Y3YYfT58rE5vD89NC9lI3Jq6nW8s83tcHrt0zNBgXcHsvJrFJaH0ZM4DlCwkYxQC10tVvOq
        WpfzpcLALXlodKPkdTHP5Rh3nJd1WUHhmExH0GeMkYdRtsJfFBJ0vVD4T1/xSkFYjL+C2WxSsD07
        Swn644yB0l8ysidomJRcEhPkMshBKFzmTZbcJZ91kUhc6DLeZxvck/ecvXH0bbEBJoW9Cy7120gm
        cYBGEh6h4EJL39Dl9Dnd/AAAAP//AwBwuQCLQgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7719addf31cff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:37:38 GMT
      Function-Execution-Id:
      - avx8elsv7fot
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1483'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c4cb27420e2863291e72376db30447b8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89466'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 356ms
      X-Request-Id:
      - ad4ac6f206c7d1c99dd81220213025ea
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3388'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SUwW7bMAyG73sKgpdcnCBu1mbzfcCKDcMOXYthHgJVZmy1sihITBMsyLsPsp2k
        8bBjr/ypnx8pSns0FRaoGyW69Xa6/HL/EJrF1z95/fLN36p69/3+7uXpk81vfnrMkB+fSMtwYqa5
        9ZbEsMMMdSAlVGGR33y4zq+u8nyRYcsVWSyw9jJdzK6nsgmPPJ0v5jlmuImqJiz26AO3XlbCz+Qi
        FsvrZYZn71P8ar7MUFiUPYU+3rw/ZKgbNpoiFr/22FI82ga2hAWqGE0U5SRBshNyqYF96QAASpSG
        N3UjscQChuAg0E5SsMRbcEQVCMMmEkhDsA1GaCW8WhtLoLltlesSOgEmn8lahgcOtpqAccKgoEt1
        qqUKJk3SV9ukz2Qnk1mJ2evagVRkZ1zdA9z9t6SJHU/LUUB5H9gHo+SsrzmANClLxWdQEYyAspa3
        EVo6A6de4Uy5NdKAguhJm7WhqsMeM3qrXI83hR9vNpfSnd1TD6thMS7cT7Fj1phVByNGm9iOL5Rc
        3IR0Tgncnq5XcwikpUNLZNDVGWY0TIy7zJQxLhY9qedjoa2x9i3Xpi98yI7rPJj+s83JoWe6gBih
        q1CPH0IvHCfRW4w4LkzGj+dVT0fajngAL90BDxmujTOxWfV7jwVG4fTfGFfRDov54ffh3V8AAAD/
        /wMAPIAo/awEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bc377e0910e5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:28:56 GMT
      Function-Execution-Id:
      - h2muu78hnvnz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '23507'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4d5dd1ad6c9c2d857c0a84e8a37d0769;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 249e67594458ef55a31db9db01945251
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The write_to_file command is the most appropriate command for this task as
      it allows me to write text to a file with a specified name.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I use the correct filename and text to write to the
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4643'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/bMAyG7/sVBC+5OEac1lvnYw9BgwHDgHUfxTwEqsxYWmTJk+glReD/Xvgj
        SZu12GFHkdTL5yW5R11ghlIJllVtpu8+fP2+XDx8TFS5S6/v3CfvPic3d+lyUS6uMUJ3/4skjz9i
        6araEGtnMULpSTAVmCVvr9JkPk8uZxFWriCDGZY1Ty/idMqNv3fT2cUswQibIErCbI+1d1XNK3Yb
        sgGzZDZPIzyJnxLp+wjZsTCnUHJ12UYoldOSAmY/9lhROAh7ZwgzFCHowMJyh+ksk+0s7HMLAJAj
        K9eUikOOGYzBMUE77oI5LkGJPwShkZJCWDfGPMDWa2ayMLkhYxx8c94UE2AHrAjW2hBMVJdZbbtM
        zDuexLAEKSxYt4UmUF/JImxWo1kC6apK2KKTOcYOVXGO0VM8TyI4q205MN6OZaDD6W+vpcgTCE9g
        Hawb371ByG60ATz9brSnIobbV2G22hgIqmEo3Nb2PKIky706DR1eJKyNsAPcFL78t1/pNWupQ3X0
        e7J1zAVYOw+sdHhRI9QkNq/Pq1tQ7/af2zmzPfRoo8NNjZV/nZQVFQ3tnymfUQpfnl/j05WP/B37
        QaB4dptHoB5qZMtti22Ea211UKtBCTMM7GqMUNuCdpjN2p/tm0cAAAD//wMAMg3FGhYEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bce029ce0252-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:29:15 GMT
      Function-Execution-Id:
      - rj7taejgfw5p
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15072'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 931ad234b94d2a400a5c15fff0a338e2;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 418d05ba7da82f0ab0d945d491a27e48
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8SUwW7bMAyG73sKgpdcnCBJmyXzbRiGrdthlxUtMA+BIjO2VlkyRBopFuTdB9lx
        krpoD8OAHU2KP7+forVHk2OKulSiq9qOl1/v36uiWt5/ub3PuaQPc7X49tt9vPsUKo8J+s0v0nKs
        mGhf1ZbEeIcJ6kBKKMd09na1mM1X1/NpgpXPyWKKRS3jq8liLE3Y+PH0ajrDBBtWBWG6xzr4qpa1
        +AdyjOlysUrwrH2Kz1fvEhQvyp5Cs+n18pCgLr3RxJj+2GNF3OsGbwlTVMyGRTmJlN4JuehgnzkA
        gAyl9E1RCmeYwjF4TNCjxGCGN+CIchAPu2CEYPSZrPVw54PNR2CceFCwNZbAqYpyGJUxv97F/EQe
        ZQTK5SAlOTj6ovgFovhhAt9LglErvBa/jjKjeKyKNVo52BA0fNk+gsGp5wRuYGesjYdASsOn4hd4
        xbfNW95npJMMk8shBFLsnXFFN4nXWA23upVnAVXXwdfBKKFLnIi49aHDjO5BMRgBZa3fMVT0f0zW
        VrnO3xhuububl1z+Tb8scxfC0fe634Mnws+WY8CpgxGjDVfDtSTHTYhlSuAGVAUNG1e0MtqHQFrO
        63ncRSWv2jQM3GhNzNvGgnGt6aj5su0NbX2g3kTfv93xgQ+uST30Hi6u9d9O/bWfLsOO55D0z8Cx
        07NXII6sQ32CNnCkQjF8QLpEPHuWGCA+ERk+OhdGe9qW+AieuQMeEtwaZ7hcd78ppsjia0zQuJwe
        MZ0efh7e/AEAAP//AwCwEGSC5QUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd8562fcd02115f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:08 GMT
      Function-Execution-Id:
      - vae2vljex8vr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '28379'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e431bf8fae1e340a1d948c138e4d0242;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 940bd1e525d990696f77d7f53fe4fcc7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write ''Hello World''
      into a file named ''hello_world.txt'' and then complete the task. The ''write_to_file''
      command can be used to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"reasoning\":
      \"The ''write_to_file'' command is the most appropriate command to use for this
      task as it allows me to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"plan\": \"- Use
      the ''write_to_file'' command to write ''Hello World'' to the file ''hello_world.txt''\\n-
      Use the ''task_complete'' command to complete the task\",\n        \"criticism\":
      \"I need to ensure that I am using the correct file name and that the ''write_to_file''
      command is successful in writing ''Hello World'' to the file before completing
      the task.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to the file ''hello_world.txt'' and then complete the
      task.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"hello_world.txt\",\n            \"text\": \"Hello
      World\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4958'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTW/bMAy971cQvOTiGHaytoGPO7XoTl27dZiHQJUZW6sseSK9ZAjy3wcldj/S
        ocAK7CbxkY/vEeQWTYUF6kaJbjs7Pbu8/XB605h89fFzvVb5LLuYn7e3+uvl2dUVJujvfpCWoSLV
        vu0sifEOE9SBlFCFRX66OMlni/cnswRbX5HFAutOpvP0ZCp9uPPTbJ7lmGDPqiYsttgF33ayFH9P
        jrHI82yR4CP5AzDLZgmKF2Ufc+d5tktQN95oYiy+bbElHomDt4QFKmbDopxEmd4JuWhhWzoAgBKl
        8X3dCJdYwBAcANpIDJZ4AY36RcC91sS86q39DetgRMjB5Jys9fDFB1tNQDxIQ7AylmDSRGS5jkgq
        G5mkcN0QONoIsFAHhmP+4JT2haL4Hno2rt5/J/G/HDMmMbdVrkpLTJ4qDaTYO+Pqg9zrkSjQz94E
        YmgpdoqS6V8Eg3JVhN1LkSl8Mk4TvGk0yf71HwbRWeUOM5jCDdNrpX/teESngxGjDbfjGjiifSE5
        7kMsU/JqD8NPJgPmYY6jrb3LO1r5QECuGsNMzMa7Y3fckbofpayNtdC/wWNa4oF0l4wnMKS/uACn
        Wjr0e8Z/JEuF+vh4nq7lsJPR6UhQPduXB0F7UYO20u1wl+DKOMPN8sCEBbL4DhM0rqINFtnu++7d
        HwAAAP//AwBc46MfxQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd856fae9832261-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:31 GMT
      Function-Execution-Id:
      - vae2r69r0i0u
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18795'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86cc49cacbdc3eb99a8306e51f590bad;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86005'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.662s
      X-Request-Id:
      - fddbe709cb3dec722514bab695af96ad
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3586'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTz47TQAzG7zyF5UsvaZW00O3mBaAHQEJFCAiKZidOMnQyk51xaKHqu6P8a7dB
        e0Jw9Wd//tnjOaHKMEZZCpZVred37z/8+vL4+nj3WW43mg6rd9l9xm9VvlvnFgO0D99J8lCxkLaq
        NbGyBgOUjgRThnG03qzDdbRZ3gdY2Yw0xljUPF8tXs25cQ92Hq7CCANsvCgI4xPWzlY1p2z3ZDzG
        m/AuwKv3Jb6MXgbIloW+hKJwGZ0DlKVVkjzGX09YkR99ndWEMQrvlWdhuKW0hsm0E5wSAwCQIJe2
        KUr2CcYwBAeBjtwGE9zCQWkNjSfgkuDgFFPKNs2VJpC2qoTJgG0vwOwNaW3hk3U6m4EybEFAl2pE
        RRnMylZPD62+4CPPFgkGTxs7Et4aZYq++64kYOH34OixUY48VPQ33WD37AzKdwNW1jOIuna2dkrw
        Vc+tAy7bLOH3U+xaC9MTz+HjP1tVYq7uLUU6XMqN+yU2Zk1ZpVOspPLV+MCGqKsk4xvX1gmGLZTi
        R+vrHEnWP8HXJFWu2sySOs4WE7qmdGQQrmgqMuyHRT0z/xTG1yT2/+vS+sbnYDz/wfSP628deqYb
        iAm6cMX04/TCuJzeYsJxYzL9bE9mGmk74gE8MWc8B5gro3yZ9l8FY/RsawxQmYyOGIfnb+cXvwEA
        AP//AwAjBkmE3QQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315a82b9cd8764-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:30:48 GMT
      Function-Execution-Id:
      - 3nyo1vqxrxkq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18761'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d666e36ed26a929b63a61d51e3750aa8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - 403e15c1f170cfff506f8229cdd0b50a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\",\n        \"reasoning\": \"The task requires me
      to write ''Hello World'' into a file named ''hello_world.txt''. The write_to_file
      command is the most appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I have correctly specified the filename and text arguments
      for the write_to_file command.\",\n        \"speak\": \"I will use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4889'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8yUwY7TMBCG7zzFaC69uFXa1XbbPACiQgtiKeJAUOV1polbxw72ZFuo8u7ITdrd
        LXBYwYGrZ+b3949nfECdY4qqlKyq2gxv3t/92Pnl5vZB3r2dv5s3Lnx8fZssN8UHWaNAd78hxX3F
        SLmqNsTaWRSoPEmmHNPxdDZNpuPZ9URg5XIymGJR8/BqdD3kxt+7YXKVjFFgE2RBmB6w9q6qecVu
        SzZgOk5mE4GP4ufAJLkRyI6lecydzOatQFU6rShg+uWAFYWTsHeGMEUZgg4sLUdMZ5lstHDILABA
        hly6pig5ZJhCf9gHaM/xMMMFlPKBIDRKUQjrxpjvsPOamSwM3pAxDj47b/IBaMsOJKy1IbCyohwG
        ZYyvdjE+4j0PRrCAnTYGrNtBEwi4JGAZtqveM4FyVSVtDuzgfHbKGmUonlJ6ksFZbYsOddmngadv
        jfYUoKKoE3Hp5bBwxCjJ/gYEXtiWWBjvEhAcLEBJ+49aUBtpO/dD+PTXaspr1kqH6vT2luhYSTY0
        PtZJPluvSem1pmOPoHsKkL5oKrIMa+f/zHJ5bahJbv/LcesoW3FamD79l32JAJ2BZ/IXPqUvLlft
        6SD3Uxwn+CSQP+vEGegI1bNltsVW4FpbHcpVp4QpBnbx29I2pz2mSfu1ffUTAAD//wMAi4lonvME
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315b144d8e635d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:31:18 GMT
      Function-Execution-Id:
      - 3nyogdpfoqiz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25743'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86a142e65723cf7e49649bd8e5f082e7;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 8221d4b8c69e26d1b4b0c167bb5efe3c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_file: Execute
      Python File, args: \"filename\": \"<filename>\"\n3. append_to_file: Append to
      file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n4. delete_file:
      Delete file, args: \"filename\": \"<filename>\"\n5. list_files: List Files in
      Directory, args: \"directory\": \"<directory>\"\n6. read_file: Read a file,
      args: \"filename\": \"<filename>\"\n7. replace_in_file: Replace text or code
      in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n11. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n12. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n13.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n14. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n15. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n16. list_agents: List
      GPT Agents, args: () -> str\n17. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n18. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n19.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3888'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7STTW8aMRCG7/yKkS9cAEEJCeUeqbn1K42qEiHjHVgXr8f1zAIR4r9X3oUsbJX2
        1NNK7zsfz8x6Dh0AZTM1A2VyLaYIrn/38duWp98/fdnmv7Y39097GslL4e4nd58fg+qlDFr+RCPn
        rIGhIjgUS762TUQtmKqObqe349FkPLypjIIydCltHaQ/Hkz6UsYl9Yfj4ajOLFmvUc3g0AEAUCFS
        EWQhtEHPagbT6V2vdpqWjftuOD25QqJdY4yG7ycdgGMNl5M1mOQfVXDdKsEhX3WvxEguKUozWxbt
        RfUa05AX9NUeDnOfpLmSnMp1LjxPdWrxZOBekjhXD+ARMxCCXbSC0P2AzhE8UXRZF6wXAg0r6xC8
        LjCDbp78xS75A9lLdwBfc4Rulb0QWqTYLhgqCu0zMNrDEqFkzGBFESS3DKGMgRgHc9W7hIqombz1
        65rsb2Utg+QIBbGADiFSiFYLNi1E8wY0gxXQztGOocBmyDQ+vE7W5ghO+xqhD4+MVae3QN7Y27+3
        1uppohVrLBftv4Key5gYtMAD6AJKtn5dMRmKEY00faAiSpHJrmTLsMSUkCgFfSp5mZvZ9KH40gbi
        gHpzhtlZ59I//F+rqBsfe+d3eyr5x7NNFWqmK4YWuo7r9ouvjRTblGhxXBVpX8nFRGfaivgEPvdH
        dbrE4/kk1cp6y/miftXpLFkovF6ssj7DvZrBsBKOHYDnzrHzGwAA//8DAF1Mi1oEBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4986da580610dc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 12:55:15 GMT
      Function-Execution-Id:
      - phcyj0v215zv
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '11126'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8ae899573312f032f634b6b5a22eb4d1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86419'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.386s
      X-Request-Id:
      - 1e57834b98ddeb3caa4cdbc951e1fce4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_file: Execute
      Python File, args: \"filename\": \"<filename>\"\n3. append_to_file: Append to
      file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n4. delete_file:
      Delete file, args: \"filename\": \"<filename>\"\n5. list_files: List Files in
      Directory, args: \"directory\": \"<directory>\"\n6. read_file: Read a file,
      args: \"filename\": \"<filename>\"\n7. replace_in_file: Replace text or code
      in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n11. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n12. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n13.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n14. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n15. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n16. list_agents: List
      GPT Agents, args: () -> str\n17. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n18. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n19.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write ''Hello World''
      into a file named ''hello_world.txt''. The ''write_to_file'' command can be
      used for this purpose.\",\n        \"reasoning\": \"The ''write_to_file'' command
      is the most appropriate for this task as it allows me to write text to a file.\",\n        \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' to a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I need to ensure that I am
      using the correct file name and that the file is being written to the correct
      directory.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5120'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7STT28TMRDF7/kUI19ySaKkS9I/N0BCrcQBJCgHFkVT7yRr6rWNZ0JSVfnuyOtN
        U5amN67z/N78PPY8DgCUqdQVKF2j6CbY8fmn2+3Fpbw1H68f3n+Y14vCf0Z+d4n05vaXGiWHv/tJ
        Wg6uifZNsCTGuyzrSCiUUmeLi0Uxmxdn01ZofEU22dZBxsVkPpZNvPPjaTGdZeeGcU3qCh4HAAAq
        RN8EWYq/J8cpbjZfjLJ07HmUz2bnnSpe0D7zFefFAGCf6WpvNKXy9/Zw7pXoiP9q3xajt6mikNmw
        oBM1OoraOyHXDuKxdKlUKqn9Zl0LlyknFzuBdpKKpboBR1SBePhN0aweQGoUkJpgZSzBsCZr/XLr
        o60mspMhbJGhGyqgqyD1ReO49aRcGF4nD3xLnuEEvtQEw0hYLVPiELRvmtaIDu4INkwVrHwEqQ1D
        2MTgmSalGj3njYTsnXHrDH0q0mSKxrMAhhB9iAaFjvGCfA/IYATQWr9laCjdPWW11m6KDH4F2I6g
        jxIsukwxhq9MreslllOpp0c7KUs3htveM7zoxUi9MfcodTRitOGm/8rkeBMpx98ANi2kceuuV4yk
        peuRLvEqRYOia9jmKNoF0tLn4EB4f2DYGmvTe782s//0C0uVqfajw250Pf9ZDYcNZeAnwN6dMK77
        G5WFdPZo7zEfCFqKDqZ0e9Vt8P6wymplnOF6mb98WmcWH542XRlX0U5dwbQt7AcAPwb7wR8AAAD/
        /wMA8Iv6Ez0FAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d498740cd842b14-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 12:55:32 GMT
      Function-Execution-Id:
      - phcy3gcam0n0
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '11978'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 024aee9d184a933428296e33935db1c8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85931'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.712s
      X-Request-Id:
      - f9659ea87cc12598fa5fabf37367f27e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Hello World"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '90'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4987a92c4e106c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 12:55:37 GMT
      Function-Execution-Id:
      - phcyvdls8oks
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '155'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 72156abbad8558276e66a4345e202a3b;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 92445c435df6e1becf8217bc900c15f4
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a simple greeting of \"Hello World.\"", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '114'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        +R/bb/3nP/4fAAAA//8DABqJUQLhIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4987b32e762bff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 12:55:38 GMT
      Function-Execution-Id:
      - phcyqn4rbj84
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '102'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fb0ab9f8189f2098fbe37f7a57e7e2f7
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 4ed663db7c6d067e5f88cfc03f774d72
    status:
      code: 200
      message: OK
version: 1
