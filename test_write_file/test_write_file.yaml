interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTQY/TMBCF7/yK0Vx6cau023a7uQESsEICCbECiaDKdaaJqWMHe6IuVPnvyEm6
        3Q3ihOA6b/LeN+PJCXWOKapSsqpqM71+e6cX737aZFl/eM7vd8vXL6rm1edi93I536NAt/tGiocv
        ZspVtSHWzqJA5Uky5ZjO15vVfL65WS8EVi4ngykWNU+vZqspN37npslVMkeBTZAFYXrC2ruq5i27
        A9mA6fVqI/Di/VBfJAuB7Fiah9LNOmkFqtJpRQHTLyesKJxtvTOEKcoQdGBpOUI6y2TjAKfMAgBk
        yKVripJDhikMxUGge47FDG/BEuXADppAwCXB0WumLbvtXhsC5apK2q6hE2Dyhoxx8Ml5k09AW3Yg
        oWu1sqIcJmXUt8eoz/ieJ7MMxeNsTzI4q23RA3wsCViGA3j63mhPASr6izQBHe0f59ChE2Vde1d7
        Lfki7Z0HLmODDIcxdW2k7YGncPefNqW8Zq10qMZPRTY0PjJIhluQFTRB26JjUs57UnzJGfYhuZPj
        w8cdREIme243P8bZoSZ5OOcetTH/8j764Fac73Yw/e1so0PP9ARihC59Mb74Xoi9F4sRxxOT8V/y
        aKYzbUc8gGe2xVbgXlsdym1/4JhiYFejQG1zusc0ab+2z34BAAD//wMASj5S/5UEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76f4e1f00811f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:25 GMT
      Function-Execution-Id:
      - avx8b88pjq23
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22788'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 997ebedeaf612731d388a171b505881f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - c2cebf84f286b52da3f37d2a8fdf354e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The task requires me to write ''Hello World'' into a file named ''hello_world.txt'',
      and the write_to_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I need to ensure that I am
      using the correct file name and that the text is written correctly.\",\n        \"speak\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"hello_world.txt\",\n            \"text\":
      \"Hello World\"\n        }\n    }\n}"}, {"role": "system", "content": "Command
      write_to_file returned: File written to successfully."}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4623'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SSTW/TQBCG7/yK0Vxy2UR2q4bER6RKtFwQNCCBUbRZT+wl691ld9wGRf7vyLFN
        QmkPgLjO5/vMvAfUBWaoKsmq9mb68s1Kr+TtK1PUN/MPzfVy/t69e3v9SYbN8hYFus1XUjx0zJSr
        vSHWzqJAFUgyFZil88VVmi6Wy0Rg7QoymGHpeXo5u5pyEzZumlwmKQpsoiwJswP64GrPa3Y7shGz
        NLlIBZ6GnxKLhUB2LM0pdJEsW4GqclpRxOzzAWuK4+DgDGGGMkYdWVruZDrLZDuEQ24BAHLkyjVl
        xTHHDIbgkKA9d8Ecb6CS9wSxUYpi3DbGfIeHoJnJwuQ1GePgowummIC27EDCVhsCK2sqYFJ1+fVD
        l5/xniczuKsILO0ZIpMHHYEdNJGAKwKWcbce4AmUq2tpi67gZ2ysmuUozuUGktFZbcte891QBoG+
        NTpQhJqenANyyxSOPNqWf84j4KjwWe0dX0UgvQ/OBy3PUlsXgKuu4Akeb6TtUaaw+ufrqA5P6ViP
        H7VEx06ysQldn2QY/uyDu9cFFSChP+pR6OhIWz67JHqSu3HBgzbm797aj2zF6NCh/DeDdg/pt/0y
        /pEoGcrH3j43zP9w+IhwxBhocttiK3CrrY7Vut+NGUZ2HgVqW9Aes6T90r74AQAA//8DAGA/y4mW
        BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76ff8c80c1136-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:52 GMT
      Function-Execution-Id:
      - avx8tp0avbli
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22115'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 50e3dcee3952c9683588ee097e607cf6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.664s
      X-Request-Id:
      - aacaa64be2a10adf401f93f880e9fe53
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Hello World\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '252'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzUrDQBRG9z5F+NaTkJj+ztaNoq40CFop08ltMnUyN8zcUqHk3aWgdXvgHM4Z
        roWG7Y3YYfT58rE5vD89NC9lI3Jq6nW8s83tcHrt0zNBgXcHsvJrFJaH0ZM4DlCwkYxQC10tVvOq
        WpfzpcLALXlodKPkdTHP5Rh3nJd1WUHhmExH0GeMkYdRtsJfFBJ0vVD4T1/xSkFYjL+C2WxSsD07
        Swn644yB0l8ysidomJRcEhPkMshBKFzmTZbcJZ91kUhc6DLeZxvck/ecvXH0bbEBJoW9Cy7120gm
        cYBGEh6h4EJL39Dl9Dnd/AAAAP//AwBwuQCLQgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7719addf31cff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:37:38 GMT
      Function-Execution-Id:
      - avx8elsv7fot
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1483'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c4cb27420e2863291e72376db30447b8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89466'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 356ms
      X-Request-Id:
      - ad4ac6f206c7d1c99dd81220213025ea
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3388'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SUwW7bMAyG73sKgpdcnCBu1mbzfcCKDcMOXYthHgJVZmy1sihITBMsyLsPsp2k
        8bBjr/ypnx8pSns0FRaoGyW69Xa6/HL/EJrF1z95/fLN36p69/3+7uXpk81vfnrMkB+fSMtwYqa5
        9ZbEsMMMdSAlVGGR33y4zq+u8nyRYcsVWSyw9jJdzK6nsgmPPJ0v5jlmuImqJiz26AO3XlbCz+Qi
        FsvrZYZn71P8ar7MUFiUPYU+3rw/ZKgbNpoiFr/22FI82ga2hAWqGE0U5SRBshNyqYF96QAASpSG
        N3UjscQChuAg0E5SsMRbcEQVCMMmEkhDsA1GaCW8WhtLoLltlesSOgEmn8lahgcOtpqAccKgoEt1
        qqUKJk3SV9ukz2Qnk1mJ2evagVRkZ1zdA9z9t6SJHU/LUUB5H9gHo+SsrzmANClLxWdQEYyAspa3
        EVo6A6de4Uy5NdKAguhJm7WhqsMeM3qrXI83hR9vNpfSnd1TD6thMS7cT7Fj1phVByNGm9iOL5Rc
        3IR0Tgncnq5XcwikpUNLZNDVGWY0TIy7zJQxLhY9qedjoa2x9i3Xpi98yI7rPJj+s83JoWe6gBih
        q1CPH0IvHCfRW4w4LkzGj+dVT0fajngAL90BDxmujTOxWfV7jwVG4fTfGFfRDov54ffh3V8AAAD/
        /wMAPIAo/awEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bc377e0910e5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:28:56 GMT
      Function-Execution-Id:
      - h2muu78hnvnz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '23507'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4d5dd1ad6c9c2d857c0a84e8a37d0769;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 249e67594458ef55a31db9db01945251
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The write_to_file command is the most appropriate command for this task as
      it allows me to write text to a file with a specified name.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I use the correct filename and text to write to the
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4643'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/bMAyG7/sVBC+5OEac1lvnYw9BgwHDgHUfxTwEqsxYWmTJk+glReD/Xvgj
        SZu12GFHkdTL5yW5R11ghlIJllVtpu8+fP2+XDx8TFS5S6/v3CfvPic3d+lyUS6uMUJ3/4skjz9i
        6araEGtnMULpSTAVmCVvr9JkPk8uZxFWriCDGZY1Ty/idMqNv3fT2cUswQibIErCbI+1d1XNK3Yb
        sgGzZDZPIzyJnxLp+wjZsTCnUHJ12UYoldOSAmY/9lhROAh7ZwgzFCHowMJyh+ksk+0s7HMLAJAj
        K9eUikOOGYzBMUE77oI5LkGJPwShkZJCWDfGPMDWa2ayMLkhYxx8c94UE2AHrAjW2hBMVJdZbbtM
        zDuexLAEKSxYt4UmUF/JImxWo1kC6apK2KKTOcYOVXGO0VM8TyI4q205MN6OZaDD6W+vpcgTCE9g
        Hawb371ByG60ATz9brSnIobbV2G22hgIqmEo3Nb2PKIky706DR1eJKyNsAPcFL78t1/pNWupQ3X0
        e7J1zAVYOw+sdHhRI9QkNq/Pq1tQ7/af2zmzPfRoo8NNjZV/nZQVFQ3tnymfUQpfnl/j05WP/B37
        QaB4dptHoB5qZMtti22Ea211UKtBCTMM7GqMUNuCdpjN2p/tm0cAAAD//wMAMg3FGhYEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bce029ce0252-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:29:15 GMT
      Function-Execution-Id:
      - rj7taejgfw5p
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15072'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 931ad234b94d2a400a5c15fff0a338e2;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 418d05ba7da82f0ab0d945d491a27e48
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8SUwW7bMAyG73sKgpdcnCBJmyXzbRiGrdthlxUtMA+BIjO2VlkyRBopFuTdB9lx
        krpoD8OAHU2KP7+forVHk2OKulSiq9qOl1/v36uiWt5/ub3PuaQPc7X49tt9vPsUKo8J+s0v0nKs
        mGhf1ZbEeIcJ6kBKKMd09na1mM1X1/NpgpXPyWKKRS3jq8liLE3Y+PH0ajrDBBtWBWG6xzr4qpa1
        +AdyjOlysUrwrH2Kz1fvEhQvyp5Cs+n18pCgLr3RxJj+2GNF3OsGbwlTVMyGRTmJlN4JuehgnzkA
        gAyl9E1RCmeYwjF4TNCjxGCGN+CIchAPu2CEYPSZrPVw54PNR2CceFCwNZbAqYpyGJUxv97F/EQe
        ZQTK5SAlOTj6ovgFovhhAt9LglErvBa/jjKjeKyKNVo52BA0fNk+gsGp5wRuYGesjYdASsOn4hd4
        xbfNW95npJMMk8shBFLsnXFFN4nXWA23upVnAVXXwdfBKKFLnIi49aHDjO5BMRgBZa3fMVT0f0zW
        VrnO3xhuububl1z+Tb8scxfC0fe634Mnws+WY8CpgxGjDVfDtSTHTYhlSuAGVAUNG1e0MtqHQFrO
        63ncRSWv2jQM3GhNzNvGgnGt6aj5su0NbX2g3kTfv93xgQ+uST30Hi6u9d9O/bWfLsOO55D0z8Cx
        07NXII6sQ32CNnCkQjF8QLpEPHuWGCA+ERk+OhdGe9qW+AieuQMeEtwaZ7hcd78ppsjia0zQuJwe
        MZ0efh7e/AEAAP//AwCwEGSC5QUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd8562fcd02115f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:08 GMT
      Function-Execution-Id:
      - vae2vljex8vr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '28379'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e431bf8fae1e340a1d948c138e4d0242;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 940bd1e525d990696f77d7f53fe4fcc7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write ''Hello World''
      into a file named ''hello_world.txt'' and then complete the task. The ''write_to_file''
      command can be used to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"reasoning\":
      \"The ''write_to_file'' command is the most appropriate command to use for this
      task as it allows me to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"plan\": \"- Use
      the ''write_to_file'' command to write ''Hello World'' to the file ''hello_world.txt''\\n-
      Use the ''task_complete'' command to complete the task\",\n        \"criticism\":
      \"I need to ensure that I am using the correct file name and that the ''write_to_file''
      command is successful in writing ''Hello World'' to the file before completing
      the task.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to the file ''hello_world.txt'' and then complete the
      task.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"hello_world.txt\",\n            \"text\": \"Hello
      World\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4958'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTW/bMAy971cQvOTiGHaytoGPO7XoTl27dZiHQJUZW6sseSK9ZAjy3wcldj/S
        ocAK7CbxkY/vEeQWTYUF6kaJbjs7Pbu8/XB605h89fFzvVb5LLuYn7e3+uvl2dUVJujvfpCWoSLV
        vu0sifEOE9SBlFCFRX66OMlni/cnswRbX5HFAutOpvP0ZCp9uPPTbJ7lmGDPqiYsttgF33ayFH9P
        jrHI82yR4CP5AzDLZgmKF2Ufc+d5tktQN95oYiy+bbElHomDt4QFKmbDopxEmd4JuWhhWzoAgBKl
        8X3dCJdYwBAcANpIDJZ4AY36RcC91sS86q39DetgRMjB5Jys9fDFB1tNQDxIQ7AylmDSRGS5jkgq
        G5mkcN0QONoIsFAHhmP+4JT2haL4Hno2rt5/J/G/HDMmMbdVrkpLTJ4qDaTYO+Pqg9zrkSjQz94E
        YmgpdoqS6V8Eg3JVhN1LkSl8Mk4TvGk0yf71HwbRWeUOM5jCDdNrpX/teESngxGjDbfjGjiifSE5
        7kMsU/JqD8NPJgPmYY6jrb3LO1r5QECuGsNMzMa7Y3fckbofpayNtdC/wWNa4oF0l4wnMKS/uACn
        Wjr0e8Z/JEuF+vh4nq7lsJPR6UhQPduXB0F7UYO20u1wl+DKOMPN8sCEBbL4DhM0rqINFtnu++7d
        HwAAAP//AwBc46MfxQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd856fae9832261-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:31 GMT
      Function-Execution-Id:
      - vae2r69r0i0u
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18795'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86cc49cacbdc3eb99a8306e51f590bad;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86005'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.662s
      X-Request-Id:
      - fddbe709cb3dec722514bab695af96ad
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3586'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTz47TQAzG7zyF5UsvaZW00O3mBaAHQEJFCAiKZidOMnQyk51xaKHqu6P8a7dB
        e0Jw9Wd//tnjOaHKMEZZCpZVred37z/8+vL4+nj3WW43mg6rd9l9xm9VvlvnFgO0D99J8lCxkLaq
        NbGyBgOUjgRThnG03qzDdbRZ3gdY2Yw0xljUPF8tXs25cQ92Hq7CCANsvCgI4xPWzlY1p2z3ZDzG
        m/AuwKv3Jb6MXgbIloW+hKJwGZ0DlKVVkjzGX09YkR99ndWEMQrvlWdhuKW0hsm0E5wSAwCQIJe2
        KUr2CcYwBAeBjtwGE9zCQWkNjSfgkuDgFFPKNs2VJpC2qoTJgG0vwOwNaW3hk3U6m4EybEFAl2pE
        RRnMylZPD62+4CPPFgkGTxs7Et4aZYq++64kYOH34OixUY48VPQ33WD37AzKdwNW1jOIuna2dkrw
        Vc+tAy7bLOH3U+xaC9MTz+HjP1tVYq7uLUU6XMqN+yU2Zk1ZpVOspPLV+MCGqKsk4xvX1gmGLZTi
        R+vrHEnWP8HXJFWu2sySOs4WE7qmdGQQrmgqMuyHRT0z/xTG1yT2/+vS+sbnYDz/wfSP628deqYb
        iAm6cMX04/TCuJzeYsJxYzL9bE9mGmk74gE8MWc8B5gro3yZ9l8FY/RsawxQmYyOGIfnb+cXvwEA
        AP//AwAjBkmE3QQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315a82b9cd8764-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:30:48 GMT
      Function-Execution-Id:
      - 3nyo1vqxrxkq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18761'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d666e36ed26a929b63a61d51e3750aa8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - 403e15c1f170cfff506f8229cdd0b50a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are write_to_file-GPT, an AI designed to use the write_to_file command to write
      ''Hello World'' into a file named \"hello_world.txt\" and then use the task_complete
      command to complete the task.\nYour decisions must always be made independently
      without seeking user assistance. Play to your strengths as an LLM and pursue
      simple strategies with no legal complications.\n\nGOALS:\n\n1. Use the write_to_file
      command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\",\n        \"reasoning\": \"The task requires me
      to write ''Hello World'' into a file named ''hello_world.txt''. The write_to_file
      command is the most appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I have correctly specified the filename and text arguments
      for the write_to_file command.\",\n        \"speak\": \"I will use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4889'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8yUwY7TMBCG7zzFaC69uFXa1XbbPACiQgtiKeJAUOV1polbxw72ZFuo8u7ITdrd
        LXBYwYGrZ+b3949nfECdY4qqlKyq2gxv3t/92Pnl5vZB3r2dv5s3Lnx8fZssN8UHWaNAd78hxX3F
        SLmqNsTaWRSoPEmmHNPxdDZNpuPZ9URg5XIymGJR8/BqdD3kxt+7YXKVjFFgE2RBmB6w9q6qecVu
        SzZgOk5mE4GP4ufAJLkRyI6lecydzOatQFU6rShg+uWAFYWTsHeGMEUZgg4sLUdMZ5lstHDILABA
        hly6pig5ZJhCf9gHaM/xMMMFlPKBIDRKUQjrxpjvsPOamSwM3pAxDj47b/IBaMsOJKy1IbCyohwG
        ZYyvdjE+4j0PRrCAnTYGrNtBEwi4JGAZtqveM4FyVSVtDuzgfHbKGmUonlJ6ksFZbYsOddmngadv
        jfYUoKKoE3Hp5bBwxCjJ/gYEXtiWWBjvEhAcLEBJ+49aUBtpO/dD+PTXaspr1kqH6vT2luhYSTY0
        PtZJPluvSem1pmOPoHsKkL5oKrIMa+f/zHJ5bahJbv/LcesoW3FamD79l32JAJ2BZ/IXPqUvLlft
        6SD3Uxwn+CSQP+vEGegI1bNltsVW4FpbHcpVp4QpBnbx29I2pz2mSfu1ffUTAAD//wMAi4lonvME
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315b144d8e635d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:31:18 GMT
      Function-Execution-Id:
      - 3nyogdpfoqiz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25743'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86a142e65723cf7e49649bd8e5f082e7;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 8221d4b8c69e26d1b4b0c167bb5efe3c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4008'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTY/aMBC98ytGvuQCiA8BXc4V6kpdbZFaVVVZIW88JC6OJ7UnCyziv1eOk2U3
        VdtTr+953rw3njn3AIRWYgkizSWnRWkGi09yfTe6X5vF6ttO33/8uTjOV/ti9Xzzfj0T/VBBjz8w
        5bZqmFJRGmRNNtKpQ8kYVMfzd/PpdDJbjGqiIIUmlGUlD6bD2YAr90iD0XQ0jpWVlxmKJZx7AACi
        dFSUvGXao/ViCTfjWT8y15ZXdjKaNCwTS3MlxuPxogdwieZy0ikG+Hv9OLYK5tC/6V6DjkxAhPRe
        e5aWRf9KpmQZbT2H88YGaCM4pyrL2W+CTgQbAo8cwI24O0FG0oD2wAQHpxkh+YDGEHwlZ1QC2jKB
        hJ02CFYWqCDJA789BH7IR06G8DlHKMgzeHZSZznvyB2kU3CQpyCsCDjXvmlTeQTOEZK635ZpG9QT
        SKkopFVDuIWDNgYsogrvS0dPWsWa8DLYAGlVDYQsV+9ML6+GG9F/Hdqh9GS1zWLyW8jlU5CR5vSM
        Uat09GiwqLUVMrpC24aq0+Fup1ONlsGTqcKPd5uURtqoP4Avf4/5p4H/e9ydnqnTrFPtizaYIpsw
        eAzpTqC9r9DDQXMePyF47Gr4EuW+ra+HX/0/97Hxpd/uaSP525oGhejpjYeOdemy7oZHol2VKNHx
        8UakexWvErVua8eN8Y29iObyLu0Jip222ufbuGXhDD1T+XKhQluFR7GEUQ1cegAPvUvvFwAAAP//
        AwDJHC+/9AQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2c625e7129d0-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:00 GMT
      Function-Execution-Id:
      - ktgz3q549ld5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10534'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e8bef7211078878371e4bde38a7a43b3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86419'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.386s
      X-Request-Id:
      - c0345e3295af9d32143d194e0098d930
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"My goal is to write ''Hello World''
      into a file named ''hello_world.txt''. The most straightforward way to do this
      is to use the ''write_to_file'' command. I will need to provide the filename
      and the text to write to the file.\",\n        \"reasoning\": \"I have analyzed
      the problem and determined the most efficient solution.\",\n        \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' to a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I don''t see any issues with
      this plan.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5224'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RTTVMbMQy951dofNlLkiEEksC5h2Y6Zeih5dAwGeNVsgavtbW0bIDJf+94vflo
        aC/0+p7f05MsvfUAlM3VNShTaDFl5QbTW/1Nf5rw6HUVvtyFrze/1s3tj1c3vr16fFH9qKCHRzSy
        Uw0NlZVDseQTbQJqweg6mswm4/H55eyiJUrK0UXZupLBeHg5kDo80OBsfDZKypr1GtU1vPUAAFQV
        qKxkKfSEnqPdaDrrJ+pQ84i+uuhYIdHuiBhPz3sA25SuIGswwj/bx6lWTIf8R/kWDOQiojSzZdFe
        VP9AGvKCvh3E28JHaKGkoHpdCC+iTwI7AjcSwYW6oQak0AJzKPQzQhOsCHrIPqNzBHcUXJ6BEGhY
        WYfgdYk5ZEVkl01kh7KRrA9z4IJql8MzBrt6SaZSYJI1mqH7CtA+h5hWW8/tC0MhoBGIqYYwB6M9
        1IwtlwXU+TJ6ZGCoLKNYCCLaadu2GWi1rzZcqP5xtwE1k7d+nVqeC1gGW1YU4hCj3f9ljg7ouQ54
        cKgCPluqeR86unFtDDKvancasXLap3QD+P7B1t99yl+HYYIVayyX3TAgJ58JMCJo/wKWuUaGxkoB
        UliGmOzUgyvUTzt9Y5378Hf9M3Mqt+3vVrkze7fJcR9Tkn3lk7A6rE8PIBHx7UF+EmSXoE3RhVn4
        reoObru7PLWy3nKxTDsWr4+Fqv1hKutz3KhrOGuBbQ/gvrft/QYAAP//AwD2Atyq7AQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2cbb8f4f2335-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:14 GMT
      Function-Execution-Id:
      - ktgz9rmqoex9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9779'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8199340352b57b6d26d89031e8f08c2f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.713s
      X-Request-Id:
      - 0290521f85fd621f2f83e9a5ac5cf90f
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Hello World"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '90'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        vs/6z3/9HwAAAP//AwCSly514SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2d0c2ba91040-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:17 GMT
      Function-Execution-Id:
      - ktgzi8520dp8
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '51'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 46d0d8de1b81bd22b612e37331d32924;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f2bc870da99e4e0a045f1a9156cfdc14
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a simple greeting of \"Hello World.\"", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '114'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        4SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2d11cf22e259-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:18 GMT
      Function-Execution-Id:
      - ktgz7sf3fhr8
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '290'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 24d53aafb466c2ab19455e24bbbfd98d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - a5cc3c2ee1f80db071f6af4160e3cac4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4009'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yUz27aQBDG7zzFaC++GMSfQAhP0Eg99JAqreoKLevBnrDesbxjoI1492q9EAJI
        uVTKdb6dmd835uO1B6AoVwtQptRiqtr2778VL89/6yFuH380k7mWmXvafJ3+3D7cb/YqDR28ekEj
        p66B4aq2KMQuyqZBLRimjmbz2WQ6m4/HnVBxjja0FbX0J4NpX9pmxf3hZDiKna3XBaoFvPYAAFTd
        cFXLUniDzqsFPIzu0qicV57V8eSkCou2Z2E0upv3AA4RrmQyGMq/usdxVYBDf7G9KzZsQ0Vp78mL
        dqLSs2jYCbruDq+ZC6VMScltUYrPwpxYPAq4l1DM1CPsyFpoPYKUCMmuIcGl8HJNFhMwXFXa5SAM
        nQLJF7SW4ZkbmydAThg0hLfgdIU5JGXQl7ugD2QvySBT6fvVDWrPjlwR9z+VCKL9BsiDp3BHCPuM
        drBC0Ka7LfkSc9iRlB9BDuDCDPlb+tAdvP+/jdpqFx304funHc80JGTIV6ePZ7i1OZR6i8F1HjF0
        XaPLbznIeUGdA68/wk1h1Qp4cia66vhyRg+OBXBPXuAPSgqtJ1fcTCEPFTcIuF6TIXRy7cHXqDef
        9+OLqw/pKRPHoTeRCBMi1QXFFbxuius0RSG8PY+44rgYcp3Ad55OtB3xETxzB3VM+eEUd7UmR75c
        xiyFyHvh+u3fQJHLca8WMOwKhx7A796h9w8AAP//AwDFsz2fYAUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7c7dace48105-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:12 GMT
      Function-Execution-Id:
      - nb7znga5o052
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9372'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3e64da1a2eb09a81dd015dff681a8f97
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86419'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.387s
      X-Request-Id:
      - 195c581732d8fc73006c089c856373f6
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the ''write_to_file''
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The task is simple and can be accomplished with the ''write_to_file'' command.
      I will use this command to write the text ''Hello World'' into a file named
      ''hello_world.txt''.\",\n        \"plan\": \"- Use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"criticism\":
      \"I could have used the ''append_to_file'' command instead of the ''write_to_file''
      command, but since the file does not exist yet, using ''write_to_file'' is more
      efficient.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5334'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTwW7bMAy9+ysIXXJJgjRpsjTnHdphQAdsQ7DVQ6DKtK1WFg2JWbIF/vdBlp1k
        abHL0Ot7fHyPEnlIAITOxAqEKiWrqjajd5+KJ21+T6fb9b2+W9+/V9/qD5n7+PmW99/FMCjo8QkV
        96qxoqo2yJpspJVDyRi6Xi2Wi9l8sZxdt0RFGZogK2oezcbzEW/dI40ms8lVVG69LFCs4JAAAIja
        UVXzhukZrQ/tppObYaROnmf0ct6xTCzNGTG7uU4AmpiuJK0wwA9tcfQK6dD/Zd+CjkxAhPRee5aW
        xfBEKrKMtn2IQ2oDlAouaVuU7NPQJ4IdgXsOYCruYKeNga1H4BJh4FBmm1wbHICiqpI2AyYIaMt3
        Lh4oj/UlGkObHTmTjXnPAwjacSqG53YOpSerbdF7WsS27090Ov8FXEr+RzvYSQ/dR0KbqK8Pc8Dg
        NohgHUSDtnbnNDPa4KB5DP8542sT1UbaOMwIvr7p2ymnWSvtq2j3pUSHoD1YgiMFOTngUnvwjPVl
        B1+jfH7b3452zbBfvK7Zi72zssKY5Oh8EVa64nJdIxFqT/KLIH2CNkUXJrWN6M6j6e9E5NpqX27i
        QoZb8Uz18YyEthnuxQomLdAkAD+SJvkDAAD//wMAUkmsNZoEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7cc4cd482234-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:21 GMT
      Function-Execution-Id:
      - nb7zpi7xqf1r
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7270'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1f46d8b52ae4911b197eda0d882e78f0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85933'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.711s
      X-Request-Id:
      - 5993d4afc98f79ed01fa7ed75a768b3a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach. Do not repeat events from your past\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n5. Write all code to a file.\n\nYou should only
      respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4045'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTz47aQAzG7zyFNZdcAAW2sAsP0C3SHlppt61UKjQkhrhMxumMI1gh3r2aDH+W
        UFVqD71+39j+2WPvOwCKcjUFlRVasrIyvftPs/unF/118nn2cTf5mT3mmZ+9Lx8n9fP4SXVDBC9/
        YCanqH7GZWVQiG20M4daMGQdjB/GozQdDe8bo+QcTQhbV9K76496Ursl99K7dBAja6/XqKaw7wAA
        qMpxWclCeIPWqylMhsNudC4lL+5w8HB0hUWbizEYvEs7AIcIVzBlGORvzeNYKsChv6reiI5NUJT2
        nrxoK6p7MTO2graZw35ugzRXUnC9LsTPQ54oHg3cSRDnagZbMgZqjyAFQrJ1JLgQXqzIYAIZl6W2
        OQhD40DyAY1h+MLO5AmQFQYN4S1YXWIOSRH8xTb4fdlJ0p+r7tvSDrVnS3Yd6z//oSj5hqlkL6Cr
        ynHlSAvCih1IEVztN6A9kIA2hrceSryghibhzNeHVqtBDMy3yCEIra9deKjl/DoAofZkXoFytEIr
        0kuD7Q4ro21srgcv/zbXv55q5kgoI1+eftUXXJv8923cNpwzerAcxuhQ56+AO/ICS1yxw4aQ7DpQ
        kbQr+wr15v/tUix96J5W/Jj0ZsNDhkh1RdGC127dPo5onJYjpmhxXCVpH9Sbnk60DfERfG4P6ni0
        h9P1qhVZ8sUinka4YC9cnY9bkc1xp6aQNsKhA/C9c+j8AgAA//8DABm8aREvBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5b30e92f522cdd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 16:22:15 GMT
      Function-Execution-Id:
      - fc5x4gwxnsz1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8303'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1eec5f39eca575c1e8117515acde94b7
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86418'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.388s
      X-Request-Id:
      - 8a3c89cb549891c93ba5c646f5a3d06a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are File System Agent, an AI designed to manage a file system.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze
      Code, args: \"code\": \"<full_code_string>\"\n2. execute_python_code: Create
      a Python file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n4.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n5. delete_file: Delete file, args: \"filename\": \"<filename>\"\n6.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n7.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach. Do not repeat events from your past\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n5. Write all code to a file.\n\nYou should only
      respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the ''write_to_file'' command to write ''Hello World'' into a file
      named ''hello_world.txt''.\",\n        \"reasoning\": \"The ''write_to_file''
      command is the most appropriate for this task as it allows me to write text
      to a file. I will use the filename ''hello_world.txt'' to ensure that the file
      is easily identifiable.\",\n        \"plan\": \"- Use the ''write_to_file''
      command to write ''Hello World'' to a file named ''hello_world.txt''.\",\n        \"criticism\":
      \"I should ensure that the file ''hello_world.txt'' does not already exist before
      writing to it.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5321'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8xUwW4TMRC971eMfMkliTYNaUtugFSRA6ggoEgERc7ubNbE9hh7VomI9t+R15um
        DS3nXt/zm3lvNONDBiBUKeYgilpyYZweXX1aXN19uK1v37ib9dub7wu/+POtyfXvj5/fvRbDqKD1
        Lyz4qBoXZJxGVmQTXXiUjLHq5PL6cpbns+l1RxgqUUfZxvFoOp6NuPFrGuXTfJKUTZAbFHM4ZAAA
        wnkyjldMW7QhlrvIJ8NEnXqe6Itp3rNMLPUD3avpJANok7uaVIER/tE9Tr2iOwyP2negJx0RIUNQ
        gaVlMTyRBVlG2w3isLQRWgquqdnUHJaxTgJ7AvccwaVYwE5pDU1A4Bph4FGWq0ppHEBBxkhbAhNE
        tOP7LgGoSu9r1JpWO/K6HPOeBxC1EGUF2Up5A1xLhsH7+A7u4rsB7GSAnVfMaGN1xeOlGD7051EG
        sspukskvzzhToTNhKDBI5zw5ryQjVOSB68jKsAUZQDFIrWkXwOCzeWTnfQxnI4mgleaprEyANjQe
        U8gFSNOVVnbTV/ceC051zyI6LW1KN4KvL2v6hVesChXMcUVCTY0uH2X9T3vcq8AB1liRR5DMaBx3
        I+mjVJ7ME22DQ7l9YVuZ/LXD40X13f85qLggyfq91bN00m/O7zARx/1K8jPnRwedi97M0raiv/v2
        +AGISlkV6lU6nPgJBCZ3/z8IZUvciznkHdBmAD+zNvsLAAD//wMAcggYAXMFAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5b312b9ef62db6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 16:22:26 GMT
      Function-Execution-Id:
      - fc5xq4e2i8k7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8552'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 033a35ed177e992440025333c57afceb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '84391'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.738s
      X-Request-Id:
      - 2ffcf21df2494729216e6ece79ba292f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nResources:\n1. Internet access for
      searches and information gathering.\n2. Long Term memory management.\n3. GPT-3.5
      powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\nRespond with only valid
      JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:"}], "model":
      "gpt-3.5-turbo-16k-0613", "temperature": 0, "max_tokens": 0, "functions": [{"name":
      "execute_python_code", "description": "Create a Python file and execute it",
      "parameters": {"type": "object", "properties": {"code": {"type": "string", "description":
      "The Python code to run"}, "name": {"type": "string", "description": "A name
      to be given to the python file"}}, "required": ["code", "name"]}}, {"name":
      "execute_python_file", "description": "Execute an existing Python file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The name of te file to execute"}}, "required": ["filename"]}}, {"name": "delete_file",
      "description": "Delete file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to delete"}},
      "required": ["filename"]}}, {"name": "list_files", "description": "List files
      in the workspace", "parameters": {"type": "object", "properties": {}, "required":
      []}}, {"name": "read_file", "description": "Read an existing file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The path of the file to read"}}, "required": ["filename"]}}, {"name": "write_to_file",
      "description": "Write to file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The name of the file to write
      to"}, "text": {"type": "string", "description": "The text to write to the file"}},
      "required": ["filename", "text"]}}, {"name": "web_search", "description": "Web
      Search", "parameters": {"type": "object", "properties": {"query": {"type": "string",
      "description": "The search query"}}, "required": ["query"]}}, {"name": "browse_website",
      "description": "Browse Website", "parameters": {"type": "object", "properties":
      {"url": {"type": "string", "description": "The URL to visit"}, "question": {"type":
      "string", "description": "What you want to find on the website"}}, "required":
      ["url", "question"]}}, {"name": "task_complete", "description": "Task Complete",
      "parameters": {"type": "object", "properties": {"reason": {"type": "string",
      "description": "Explanation to user of why the task is considered complete"}},
      "required": ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4282'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4STMW/bMBCFd/+KAxcvlmHFqZx6zpAuAdKmSIoqEGjqLDEmeQJ5Rowa/u8FJVuS
        M7SLQPDxu/fIOx0nAEKXYg1C1ZKVbUyy+v70gqZ+1U/h+cevtJIPiz/hfnP7fv+602IWCdq8o+IL
        NVdkG4OsyXWy8igZY9U0u8tWqzRdZa1gqUQTsarhZDn/kvDebyhJs12yyNLlma5JKwxiDb8nAADH
        9htzuhIPYg2L2WXHYgiyQrHuDwEITybuCBmCDiwdi9kgKnKMro1+zB1ALhgPnIs15OK5RlBkrXQl
        MME+IOgA0w+vGQumYqsNTue5mHWgRxnIaVd19DdwiC3YAjB9QGMIXsibcgraMYGEWGIGgYBr/Fy5
        99ahlS0FBtk0nhqvJePg3BjpOtMEfgb8Z7H/5wEnLZYwraNefER9zgce3VR5zVrpYDvTR3KYi9yd
        xg+73TsVJ6BQ0pirhgCI6BCf/CrjiAYQ0ld7i47DqDXxVEQ720/5+nRDA0c37PL1Bqfz6tSPzlY7
        Heqia2L0vL7A5EK9tTO5vxoz0XiyDRdMO3Qx8Or2a1dYDL/CoKbp8qwysTSDcJfdTKLLafIXAAD/
        /wMAC7wEX4gDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d75008e083162fd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 19:33:01 GMT
      Function-Execution-Id:
      - fetfyx25a3ik
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4232'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e25b4ac23b5cbe7d374b5fea6df18f82
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Limit-Tokens:
      - '250000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Remaining-Tokens:
      - '246380'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Ratelimit-Reset-Tokens:
      - 868ms
      X-Request-Id:
      - f88d4b31813618cb030d32cdb470435d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nResources:\n1. Internet access for
      searches and information gathering.\n2. Long Term memory management.\n3. GPT-3.5
      powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\nRespond with only valid
      JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "system", "content": "This reminds you of these
      events from your past: \nI was created"}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n  \"text\": \"The command to use is ''write_to_file''.\",\n  \"reasoning\":
      \"I need to write ''Hello World'' into a file, so the ''write_to_file'' command
      is the most appropriate.\",\n  \"plan\": \"- Use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\",\n  \"criticism\":
      \"None\"\n}", "function_call": {"name": "write_to_file", "arguments": "{\n  \"filename\":
      \"hello_world.txt\",\n  \"text\": \"Hello World\"\n}"}}, {"role": "system",
      "content": "{\n  \"text\": \"The command to use is ''write_to_file''.\",\n  \"reasoning\":
      \"I need to write ''Hello World'' into a file, so the ''write_to_file'' command
      is the most appropriate.\",\n  \"plan\": \"- Use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\",\n  \"criticism\":
      \"None\"\n}"}, {"role": "user", "content": "Determine exactly one command to
      use, and respond using the JSON schema specified previously:"}, {"role": "assistant",
      "content": "File written to successfully."}, {"role": "system", "content": "File
      written to successfully."}, {"role": "user", "content": "Determine exactly one
      command to use, and respond using the JSON schema specified previously:"}],
      "model": "gpt-3.5-turbo-16k-0613", "temperature": 0, "max_tokens": 0, "functions":
      [{"name": "execute_python_code", "description": "Create a Python file and execute
      it", "parameters": {"type": "object", "properties": {"code": {"type": "string",
      "description": "The Python code to run"}, "name": {"type": "string", "description":
      "A name to be given to the python file"}}, "required": ["code", "name"]}}, {"name":
      "execute_python_file", "description": "Execute an existing Python file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The name of te file to execute"}}, "required": ["filename"]}}, {"name": "delete_file",
      "description": "Delete file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to delete"}},
      "required": ["filename"]}}, {"name": "list_files", "description": "List files
      in the workspace", "parameters": {"type": "object", "properties": {}, "required":
      []}}, {"name": "read_file", "description": "Read an existing file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The path of the file to read"}}, "required": ["filename"]}}, {"name": "write_to_file",
      "description": "Write to file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The name of the file to write
      to"}, "text": {"type": "string", "description": "The text to write to the file"}},
      "required": ["filename", "text"]}}, {"name": "web_search", "description": "Web
      Search", "parameters": {"type": "object", "properties": {"query": {"type": "string",
      "description": "The search query"}}, "required": ["query"]}}, {"name": "browse_website",
      "description": "Browse Website", "parameters": {"type": "object", "properties":
      {"url": {"type": "string", "description": "The URL to visit"}, "question": {"type":
      "string", "description": "What you want to find on the website"}}, "required":
      ["url", "question"]}}, {"name": "task_complete", "description": "Task Complete",
      "parameters": {"type": "object", "properties": {"reason": {"type": "string",
      "description": "Explanation to user of why the task is considered complete"}},
      "required": ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5613'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//hJNPj9MwEMXv/RQjX3pJqkaFdLdHtKBFSEiUhQURFLnONDFreyJ7oi1U
        /e7ISf+ke4BLZPn5N+/ZM9lPAISuxAqEaiQr25p0uf70aN7dbba/H2q5/t59e3u//vOm/fz1Nv9w
        J5JI0OYXKj5RM0W2Ncia3CArj5IxVs3ym3y5zLKbRS9YqtBErG45Xcxep9z5DaVZ/pTO82xxpBvS
        CoNYwY8JAMC+/8acrsKdWME8Oe1YDEHWKFbnQwDCk4k7QoagA0vHIrmIihyj66PvCwdQCMYdF2IF
        hXhoEBRZK10FTNAFBB1g+uw1Y8lUbrXB6awQyQB6lIGcdvVAvweH2IM9ANN7NIbgkbyppqAdE0iI
        JRIIBNzgy8pnbx162VJgkG3rqfVaMl6cWyPdYJrCl4D/LPb/POCkxQqmTdTL56jPeMejmyqvWSsd
        7GD6kRwWonCH8cNuO6fiBJRKGnPVEAARHeKTX2Uc0QBC+rqz6DiMWhNPRXSwfZHvnO7SwNENh3xn
        g8NxdTiPzlY7HZpyaGL0vL7A5ET97Geyuxoz0XqyLZdMT+hi4Gy+yIfK4vIvjORscVSZWJqx8Op2
        En0Ok78AAAD//wMACF7H7YoDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7500b8bbb22256-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 19:33:07 GMT
      Function-Execution-Id:
      - llxi28qa9fxt
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3552'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cfb19f1da571828e87270930c9b45af8
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Limit-Tokens:
      - '250000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Remaining-Tokens:
      - '245954'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Ratelimit-Reset-Tokens:
      - 970ms
      X-Request-Id:
      - e3cf87ec66ceab264c0949b1a30cbc0e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"Hello World\"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "model": "gpt-3.5-turbo-16k-0613", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQW2vCQBCF3/Mrhnk2YogmkrdCLUKh9IIIraWsmzGubnbS7AiC+N/Lxkvoyz6c
        b86ZM3uKANCUWADqrRJdNzbO39+Wv8f5Qu304mn28jj+ODzMnhevs0n+qXEQHLzekZaba6i5biyJ
        YXfBuiUlFFKTbJrleZJMpx2ouSQbbFUjcTqcxHJo1xwn2T4eZUl6dW/ZaPJYwFcEAHDq3tDTlXTE
        AkaDm1KT96oiLO5DANiyDQoq740X5QQHPdTshFxXXYE3oTdULZEYVwFvYIVzspZhya0tVzjEq/V8
        37kxzvjtT0vKsws5Xri5jJ0jgO/uhsO/Wti0XDfyI7wnFw5LJ5c47H+uh9MrExZle3mcRmHDOfoD
        AAD//wMAL6KoirQBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7500d7df47112f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 19:33:09 GMT
      Function-Execution-Id:
      - llxi1636t5ey
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '727'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8cd503d68a9e3c1de9f97e858f537cbd
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Limit-Tokens:
      - '250000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Remaining-Tokens:
      - '246736'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Ratelimit-Reset-Tokens:
      - 783ms
      X-Request-Id:
      - e2fdc71486bffa8fcc8a2f6eb29fa500
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a simple greeting of \"Hello World\".", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '114'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7500e80b6f223d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 19:33:11 GMT
      Function-Execution-Id:
      - llxiq2udg4j7
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '631'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 771cfa59decb99c84ef6a61f558ab08a
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 73069d005de1e10da464107da5ec65b1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nResources:\n1. Internet access for
      searches and information gathering.\n2. Long Term memory management.\n3. GPT-3.5
      powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\nRespond with only valid
      JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "system", "content": "This reminds you of these
      events from your past: \nI was created"}, {"role": "user", "content": "GENERATE
      NEXT COMMAND JSON"}, {"role": "user", "content": "{\n  \"text\": \"The command
      to use is ''write_to_file''.\",\n  \"reasoning\": \"I need to write ''Hello
      World'' into a file, so the ''write_to_file'' command is the most appropriate.\",\n  \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' into a file named
      ''hello_world.txt''.\",\n  \"criticism\": \"None\"\n}"}, {"role": "function",
      "content": "File written to successfully.", "name": "write_to_file"}, {"role":
      "user", "content": "Determine exactly one command to use, and respond using
      the JSON schema specified previously:"}], "model": "gpt-3.5-turbo-16k-0613",
      "temperature": 0, "max_tokens": 0, "functions": [{"name": "execute_python_code",
      "description": "Create a Python file and execute it", "parameters": {"type":
      "object", "properties": {"code": {"type": "string", "description": "The Python
      code to run"}, "name": {"type": "string", "description": "A name to be given
      to the python file"}}, "required": ["code", "name"]}}, {"name": "execute_python_file",
      "description": "Execute an existing Python file", "parameters": {"type": "object",
      "properties": {"filename": {"type": "string", "description": "The name of te
      file to execute"}}, "required": ["filename"]}}, {"name": "delete_file", "description":
      "Delete file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The path of the file to delete"}}, "required": ["filename"]}},
      {"name": "list_files", "description": "List files in the workspace", "parameters":
      {"type": "object", "properties": {}, "required": []}}, {"name": "read_file",
      "description": "Read an existing file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to read"}},
      "required": ["filename"]}}, {"name": "write_to_file", "description": "Write
      to file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The name of the file to write to"}, "text": {"type":
      "string", "description": "The text to write to the file"}}, "required": ["filename",
      "text"]}}, {"name": "web_search", "description": "Web Search", "parameters":
      {"type": "object", "properties": {"query": {"type": "string", "description":
      "The search query"}}, "required": ["query"]}}, {"name": "browse_website", "description":
      "Browse Website", "parameters": {"type": "object", "properties": {"url": {"type":
      "string", "description": "The URL to visit"}, "question": {"type": "string",
      "description": "What you want to find on the website"}}, "required": ["url",
      "question"]}}, {"name": "task_complete", "description": "Task Complete", "parameters":
      {"type": "object", "properties": {"reason": {"type": "string", "description":
      "Explanation to user of why the task is considered complete"}}, "required":
      ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4886'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+yTTY/TMBCG7/kVI19yaapGJR/KDTjwIYTEx7K7IqjyOrONWdtj2VNtpar/HTkp
        7cIBDly5+ODH7/uORzOHDEDoQXQg1ChZWW+K5uNV++H25YvdbbN+VY+maW/ePreu+tLcvPskFklB
        d99R8U/VUpH1BlmTm7EKKBmTa1m3ddNWq2o1AUsDmiTbei7Wy6rgXbijoqwfilVdrk/qkbTCKDr4
        mgEAHKYz1ekG3IsOJq/pxmKMcouiOz8CEIFMuhEyRh1ZOhaLC1TkGN1U+qF3AL1g3HMvOujF5xFB
        kbXSDcAEu4igI+SPQTNumDb32mC+7MViFgaUkZx221n9BhziJJwEkL9GYwiuKZghB+2YQEKyWEAk
        4BF/dz5n6zhhS5FBeh/IBy0ZL8neSDeHFnAV8Y9mf68HnLQ4QD4mvnlMfMl7fvJTFTRrpaOdQ9+T
        w1707ti7/z381x6K02wez0N9r52O42ZuTRrUyOTnZ8cM4Nu0JLtf5l74QNbzhukBXdqctmlmP3HZ
        zQstm2cnysTSPAGrqsxSzDH7AQAA//8DAGgrMEEaBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7653461b0222cf-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 23:24:12 GMT
      Function-Execution-Id:
      - tt60cchkv6av
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2158'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 48037eb4fee92c92af60248fff18081a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '175587'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.47s
      X-Request-Id:
      - 77a5edaae8a5d92a36ceee285d526468
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~15000 word limit for short term memory. Your short term memory is limited,
      so save important information to files if needed.\n2. If you are unsure how
      you previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Always call one function\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:"}], "model":
      "gpt-3.5-turbo-16k-0613", "temperature": 0, "max_tokens": 0, "functions": [{"name":
      "execute_python_code", "description": "Create a Python file and execute it",
      "parameters": {"type": "object", "properties": {"code": {"type": "string", "description":
      "The Python code to run"}, "name": {"type": "string", "description": "A name
      to be given to the python file"}}, "required": ["code", "name"]}}, {"name":
      "execute_python_file", "description": "Execute an existing Python file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The name of te file to execute"}}, "required": ["filename"]}}, {"name": "delete_file",
      "description": "Delete file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to delete"}},
      "required": ["filename"]}}, {"name": "list_files", "description": "List files
      in the workspace", "parameters": {"type": "object", "properties": {}, "required":
      []}}, {"name": "read_file", "description": "Read an existing file", "parameters":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The path of the file to read"}}, "required": ["filename"]}}, {"name": "write_to_file",
      "description": "Write to file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The name of the file to write
      to"}, "text": {"type": "string", "description": "The text to write to the file"}},
      "required": ["filename", "text"]}}, {"name": "web_search", "description": "Web
      Search", "parameters": {"type": "object", "properties": {"query": {"type": "string",
      "description": "The search query"}}, "required": ["query"]}}, {"name": "browse_website",
      "description": "Browse Website", "parameters": {"type": "object", "properties":
      {"url": {"type": "string", "description": "The URL to visit"}, "question": {"type":
      "string", "description": "What you want to find on the website"}}, "required":
      ["url", "question"]}}, {"name": "task_complete", "description": "Task Complete",
      "parameters": {"type": "object", "properties": {"reason": {"type": "string",
      "description": "Explanation to user of why the task is considered complete"}},
      "required": ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4248'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yTX2+bMBTF3/kUV37hJWRBTRPKWztNXTdpD1OzThoTcs0NePgPwhclU5TvXhmS
        kFTq+rIXhHx8fH62j3cBAJMFS4GJipPQjYqW31erj/Xd0/JHeVvL4mdy/3Xm7j/dPJr6+gubeId9
        /oOCjq6psLpRSNKaQRYtckK/arxIFstkMZ/NekHbApW3lQ1FV9PriLr22Ubxoo5mi/jq4K6sFOhY
        Cr8CAIBd//WcpsAtS6Ffqx/R6BwvkaWnSQCstcqPMO6cdMQNsckoCmsITY++ywxAxgi3lLEUMvYA
        G6kUdA6BKoRw00rCnGy+lgpDEFZrbgogC70C4WdUysKTbVURgjRkgYOfC4ZrLCCsvJ5vvD6lLYXT
        jE2G0Ba5s0aackh+/EccV8puHGgcgz3yed4U7v5C56QpgSrpjtYJPIDgBobreIcNfNab+5I0sjeK
        mwE7gtX7Z/Wf00UrSQrp9IDw7cNtxjKzP7/jdWeEL2MuuFIX3QBgHsDf/gXwmRuA8bbsNBpyZy3x
        s7x1SH2Ff4Ibu3S2iYHvFLA//O1PLV5LI12VD53wmZcbCI6u3/3z6C4az5rW6oZysjUaD7ycx8PC
        bHyVoxrPk4NKlrgahSS5CXzKPngBAAD//wMAUzP/kBMEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d76743a9e02104c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 14 Jun 2023 23:46:43 GMT
      Function-Execution-Id:
      - ps9ql0csnawp
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2770'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 763ef3ae960927061e57fef6db0794ee;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '176381'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.206s
      X-Request-Id:
      - 02bef9d2a95c2a744ea333f7d9855f41
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~15000 word limit for short term memory. Your short term memory is limited,
      so save important information to files if needed.\n2. If you are unsure how
      you previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Always call one function
      and always give a text response\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine one function
      to call. Respond using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo-16k-0613",
      "temperature": 0, "max_tokens": 0, "functions": [{"name": "execute_python_code",
      "description": "Create a Python file and execute it", "parameters": {"type":
      "object", "properties": {"code": {"type": "string", "description": "The Python
      code to run"}, "name": {"type": "string", "description": "A name to be given
      to the python file"}}, "required": ["code", "name"]}}, {"name": "execute_python_file",
      "description": "Execute an existing Python file", "parameters": {"type": "object",
      "properties": {"filename": {"type": "string", "description": "The name of te
      file to execute"}}, "required": ["filename"]}}, {"name": "delete_file", "description":
      "Delete file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The path of the file to delete"}}, "required": ["filename"]}},
      {"name": "list_files", "description": "List files in the workspace", "parameters":
      {"type": "object", "properties": {}, "required": []}}, {"name": "read_file",
      "description": "Read an existing file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to read"}},
      "required": ["filename"]}}, {"name": "write_to_file", "description": "Write
      to file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The name of the file to write to"}, "text": {"type":
      "string", "description": "The text to write to the file"}}, "required": ["filename",
      "text"]}}, {"name": "web_search", "description": "Web Search", "parameters":
      {"type": "object", "properties": {"query": {"type": "string", "description":
      "The search query"}}, "required": ["query"]}}, {"name": "browse_website", "description":
      "Browse Website", "parameters": {"type": "object", "properties": {"url": {"type":
      "string", "description": "The URL to visit"}, "question": {"type": "string",
      "description": "What you want to find on the website"}}, "required": ["url",
      "question"]}}, {"name": "task_complete", "description": "Task Complete", "parameters":
      {"type": "object", "properties": {"reason": {"type": "string", "description":
      "Explanation to user of why the task is considered complete"}}, "required":
      ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4270'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yTy27bMBBF9/6KATfaSIYNJY7ibYKgXbQN+krRqhAYaiyxpjgCOY4NGP73gFJk
        2Q2QdiMQvDO8Zx7aTwCELsUShKolq6Y1ydVnfVveZT+//9h8+5B+otsKt1/u7tOnxceHCxGHDHr8
        g4qHrKmipjXImmwvK4eSMbw6X2SLLL2eZ9ed0FCJJqRVLSfp9DLhjXukZL5YJ7PFPH3Jrkkr9GIJ
        vyYAAPvuGzhtiTuxhFk83DTovaxQLI9BAMKRCTdCeq89S8siHkVFltF26PvcAuSCcce5WEIu3sNW
        GwNKGgNcI0RbpxkLpmKlDUaw2lgVigQm6CSI3qExBA/kTBmBtkwgIQSDlQ2WENVBL7ZBn/KOo2ku
        4t7WofRkta167681Aku/BslQS1uC9v9hE4Ont1HDMzVCQ55Btq2j1mnJCH2TR5zWSNuTJHDzrwbk
        uU3g3tGTLrELDHKoGKR/XfOr6NDxLvK0rCOJcpq10r7pcXKR28PpBAeIIszpbPIAIkCE2Z6Bn2QD
        COmqTYOW/ckODPy95V8FHMnGTTkB7/mOBoeX0+G4oyttta+Lft7B87yAyZD1u1v+zdk+i9ZR03LB
        tEYbgK8uLvuHxfjPjeo8HVQmlmYUsmw2CS6HyTMAAAD//wMA3jQh7fEDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7b7d02bf7f2986-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 15 Jun 2023 14:26:40 GMT
      Function-Execution-Id:
      - xwetut7qejis
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '11034'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cf1027a5a8fb71ff7bd81f9dee2923eb;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '176379'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.206s
      X-Request-Id:
      - 07d18353ed28720c8c0860ae2ce347d9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~15000 word limit for short term memory. Your short term memory is limited,
      so save important information to files if needed.\n2. If you are unsure how
      you previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Always call one function
      and always give a text response\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "system", "content": "This reminds you of these
      events from your past: \nI was created"}, {"role": "user", "content": "What
      do you want to do next?"}, {"role": "assistant", "content": "{\n  \"text\":
      \"I will call the ''write_to_file'' function to write ''Hello World'' into a
      file named ''hello_world.txt''.\",\n  \"reasoning\": \"The task at hand is to
      write ''Hello World'' into a file, so the ''write_to_file'' function is the
      most appropriate choice.\",\n  \"plan\": \"- Call the ''write_to_file'' function\\n-
      Provide the filename as ''hello_world.txt''\\n- Provide the text as ''Hello
      World''\",\n  \"criticism\": \"\"\n}", "function_call": {"name": "write_to_file",
      "arguments": "{\"filename\": \"hello_world.txt\", \"text\": \"Hello World\"}"}},
      {"role": "function", "content": "File written to successfully.", "name": "write_to_file"},
      {"role": "user", "content": "Determine one function to call. Respond using the
      JSON schema specified previously:"}], "model": "gpt-3.5-turbo-16k-0613", "temperature":
      0, "max_tokens": 0, "functions": [{"name": "execute_python_code", "description":
      "Create a Python file and execute it", "parameters": {"type": "object", "properties":
      {"code": {"type": "string", "description": "The Python code to run"}, "name":
      {"type": "string", "description": "A name to be given to the python file"}},
      "required": ["code", "name"]}}, {"name": "execute_python_file", "description":
      "Execute an existing Python file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The name of te file to execute"}},
      "required": ["filename"]}}, {"name": "delete_file", "description": "Delete file",
      "parameters": {"type": "object", "properties": {"filename": {"type": "string",
      "description": "The path of the file to delete"}}, "required": ["filename"]}},
      {"name": "list_files", "description": "List files in the workspace", "parameters":
      {"type": "object", "properties": {}, "required": []}}, {"name": "read_file",
      "description": "Read an existing file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to read"}},
      "required": ["filename"]}}, {"name": "write_to_file", "description": "Write
      to file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The name of the file to write to"}, "text": {"type":
      "string", "description": "The text to write to the file"}}, "required": ["filename",
      "text"]}}, {"name": "web_search", "description": "Web Search", "parameters":
      {"type": "object", "properties": {"query": {"type": "string", "description":
      "The search query"}}, "required": ["query"]}}, {"name": "browse_website", "description":
      "Browse Website", "parameters": {"type": "object", "properties": {"url": {"type":
      "string", "description": "The URL to visit"}, "question": {"type": "string",
      "description": "What you want to find on the website"}}, "required": ["url",
      "question"]}}, {"name": "task_complete", "description": "Task Complete", "parameters":
      {"type": "object", "properties": {"reason": {"type": "string", "description":
      "Explanation to user of why the task is considered complete"}}, "required":
      ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5109'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+yUwY7TMBCG732KkS+5JFWTLKWbI4tEERfEIoEgKPI608St4wn2lBZVfXfkpNuA
        VgKuSFx88PfPzD9jjU8zAKFrUYBQrWTV9SZ5/k6//LqpP245u2+2fJd/f7P9tL551axf3NciDhH0
        sEXFj1FzRV1vkDXZESuHkjFkTZer5Sq/zRbZADqq0YSwpucknz9LeO8eKEmXu2SxTPNLdEtaoRcF
        fJ4BAJyGM/i0NR5FAYv48aZD72WDoriKAIQjE26E9F57lpZFPEFFltEO1k+lBSgF45FLUUApXsNB
        GwNKGgPcIkQHpxkrpmqjDUaw2VsVmgQmGBBEazSG4AM5U0egLRNICGKwssMaojbw6hD4nI8czUsR
        j2UdSk9W22as/b5FYOl3IBlaaWvQ/i/KxODp91ZDmhahI88g+95R77RkhHHIk53eSDs6SeDuTwMo
        S5vAW0ffdI2DMODQMUj/tOcn6jDxQflzW1cnymnWSvtutFOK0p5L+/+x/pnHEpdtO1/XdKOt9m01
        TjGsnmfqR9l5BvBlWPv9L5ssekddzxXTDm34C26zfMwnpt9molm6ulAmlmYCaXqTzkKZ8+wHAAAA
        //8DAGr0TOzsBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7b7d599c072a6c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 15 Jun 2023 14:27:01 GMT
      Function-Execution-Id:
      - xwetd775ycky
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18199'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d246a9056e47cf86987f47c8baca580f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '175935'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.354s
      X-Request-Id:
      - c71518062f06bebaed4fc98f8e17d9e8
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~15000 word limit for short term memory. Your short term memory is limited,
      so save important information to files if needed.\n2. If you are unsure how
      you previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Always call one function
      and always give a text response\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Prioritize the output of
      the most recent commands to make decisions.\n\nRespond with only valid JSON
      conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine one function
      to call. Respond using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo-16k-0613",
      "temperature": 0, "max_tokens": 0, "functions": [{"name": "execute_python_code",
      "description": "Create a Python file and execute it", "parameters": {"type":
      "object", "properties": {"code": {"type": "string", "description": "The Python
      code to run"}, "name": {"type": "string", "description": "A name to be given
      to the python file"}}, "required": ["code", "name"]}}, {"name": "execute_python_file",
      "description": "Execute an existing Python file", "parameters": {"type": "object",
      "properties": {"filename": {"type": "string", "description": "The name of te
      file to execute"}}, "required": ["filename"]}}, {"name": "delete_file", "description":
      "Delete file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The path of the file to delete"}}, "required": ["filename"]}},
      {"name": "list_files", "description": "List files in the workspace", "parameters":
      {"type": "object", "properties": {}, "required": []}}, {"name": "read_file",
      "description": "Read an existing file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to read"}},
      "required": ["filename"]}}, {"name": "write_to_file", "description": "Write
      to file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The name of the file to write to"}, "text": {"type":
      "string", "description": "The text to write to the file"}}, "required": ["filename",
      "text"]}}, {"name": "web_search", "description": "Web Search", "parameters":
      {"type": "object", "properties": {"query": {"type": "string", "description":
      "The search query"}}, "required": ["query"]}}, {"name": "browse_website", "description":
      "Browse Website", "parameters": {"type": "object", "properties": {"url": {"type":
      "string", "description": "The URL to visit"}, "question": {"type": "string",
      "description": "What you want to find on the website"}}, "required": ["url",
      "question"]}}, {"name": "goals_accomplished", "description": "Goals are accomplished
      and there is nothing left to do", "parameters": {"type": "object", "properties":
      {"reason": {"type": "string", "description": "A summary to the user of how the
      goals were accomplished"}}, "required": ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4387'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSTW+jMBC98ytGvnAJUdi2JOVWbQ+t9rLaPeSwrJBrJuDG2Kw9KFGj/PeVcQKh
        Ui8I+c378POcIgAmK5YDEw0n0XYqWf+SHR0//j0/fTz/pMN21Wz7fW3ffzzh75otPMO8vaOgK2sp
        TNspJGl0gIVFTuhV02yTbe7ThywdgNZUqDyt7ii5Wz4k1Ns3k6TZPlll6d2F3Rgp0LEc/kQAAKfh
        63PqCo8sh9XietKic7xGlo9DAMwa5U8Yd0464prYYgKF0YR6iH4qNEDBCI9UsBwKdrCSsCRT7qTC
        gi0CbpE7o6Wuw9AraMQKyMAwDvELKmVga6yqYpCaDHDwAstRoVNcB3IC37lSQA1CPHOLYddr4Rv0
        yqG/iw5o3mIFceN9yoP3WdKRYuC6+jqDpMlfWElSSNeGEAUr9Pm2k6t1KbhSsy4BmHf3bc3i3rAB
        GLd136Imd9Oqn/LUYPkp+5hs6v7mBiHfaHC+/J3HV99JLV1ThofxnvMLRFfW32Gd+tmGsM6atqOS
        zB61D7xefwvCbNriCX28v4BkiKvpfJNlkTc5R/8BAAD//wMAq4qEvkIDAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7bb6ea0bd26326-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 15 Jun 2023 15:06:08 GMT
      Function-Execution-Id:
      - kcpi52198ha8
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7875'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b3828ebe244dec2068e6c85d63576425;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '176376'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.207s
      X-Request-Id:
      - b2f02a4f808affed8f0f860097db360b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Your task is to create a concise
      running summary of actions and information results in the provided text, focusing
      on key and potentially important information to remember.\n\nYou will receive
      the current summary and your latest actions. Combine them, adding relevant key
      information from the latest development in 1st person past tense and keeping
      the summary concise.\n\nSummary So Far:\n\"\"\"\nI was created\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n{\"role\": \"you\", \"content\": \"{\\\"text\\\": \\\"write_to_file\\\",
      \\\"reasoning\\\": \\\"I need to write ''Hello World'' into a file.\\\", \\\"plan\\\":
      \\\"- Call the ''write_to_file'' function to create a file named ''hello_world.txt''
      and write ''Hello World'' into it.\\\", \\\"criticism\\\": \\\"\\\"}\"}. {\"role\":
      \"your computer\", \"content\": \"I just performed the previous task for you.
      Here is the result: File written to successfully.\"}\n\"\"\"\n"}], "model":
      "gpt-3.5-turbo-16k-0613", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1033'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQT2/CMAzF7/0UVi690IquUFhv3MYuk5D2R5omFFJDM9K4NO4AIb77lFJgu/jw
        fn72s08BgNCFyEGoUrKqahNNFnqX1rPXl8Vz8zOezdzb6uOI7WG4y6QWA++g1TcqvrpiRVVtkDXZ
        C1YNSkY/Ncmm2XSUjCdJByoq0HjbpuYojccRt82KoiTbRsMsSXt3SVqhEzl8BgAAp676nLbAg8hh
        OLgqFTonNyjyWxOAaMh4RUjntGNpWQzuUJFltF30Oeylgz5rDHPYN8QI4RMaQ/BOjSlC0JYJJKy1
        QbCywgLC0vPl3vOYDxyCa5VC59atMcdY9LvOt5BrbbUrlw1KR9Yvdkz1pe0cAHx1R7f/7hB1Q1XN
        S6YtWv+J5DG9zBP3X9/pQ9JDJpbmrz4K/JJz8AsAAP//AwCtuOD06AEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7bb7303e0213a5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 15 Jun 2023 15:06:14 GMT
      Function-Execution-Id:
      - kcpi7w1bozig
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2090'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 900ae04e43e036bc482a9e717a01634c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '179772'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 75ms
      X-Request-Id:
      - a4e2ff09d65b56523cd7d537fcb70afc
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are File System Agent,
      an AI designed to manage a file system.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~15000 word limit for short term memory. Your short term memory is limited,
      so save important information to files if needed.\n2. If you are unsure how
      you previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Always call one function
      and always give a text response\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Prioritize the output of
      the most recent commands to make decisions.\n\nRespond with only valid JSON
      conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''text'': {''type'': ''string'', ''description'':
      ''thoughts''}, ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'',
      ''description'': ''- short bulleted\\n- list that conveys\\n- long-term plan''},
      ''criticism'': {''type'': ''string'', ''description'': ''constructive self-criticism''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism''], ''additionalProperties'':
      False}\n"}, {"role": "system", "content": "The current time and date is Tue
      Jan  1 00:00:00 2000"}, {"role": "system", "content": "This reminds you of these
      events from your past: \nI was created. I wrote ''Hello World'' into a file
      named ''hello_world.txt'' successfully."}, {"role": "user", "content": "What
      do you want to do next?"}, {"role": "assistant", "content": "{\n  \"text\":
      \"write_to_file\",\n  \"reasoning\": \"I need to write ''Hello World'' into
      a file.\",\n  \"plan\": \"- Call the ''write_to_file'' function to create a
      file named ''hello_world.txt'' and write ''Hello World'' into it.\",\n  \"criticism\":
      \"\"\n}", "function_call": {"name": "write_to_file", "arguments": "{\"filename\":
      \"hello_world.txt\", \"text\": \"Hello World\"}"}}, {"role": "system", "content":
      "I just performed the previous task for you. Here is the result: File written
      to successfully."}, {"role": "user", "content": "Determine one function to call.
      Respond using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo-16k-0613",
      "temperature": 0, "max_tokens": 0, "functions": [{"name": "execute_python_code",
      "description": "Create a Python file and execute it", "parameters": {"type":
      "object", "properties": {"code": {"type": "string", "description": "The Python
      code to run"}, "name": {"type": "string", "description": "A name to be given
      to the python file"}}, "required": ["code", "name"]}}, {"name": "execute_python_file",
      "description": "Execute an existing Python file", "parameters": {"type": "object",
      "properties": {"filename": {"type": "string", "description": "The name of te
      file to execute"}}, "required": ["filename"]}}, {"name": "delete_file", "description":
      "Delete file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The path of the file to delete"}}, "required": ["filename"]}},
      {"name": "list_files", "description": "List files in the workspace", "parameters":
      {"type": "object", "properties": {}, "required": []}}, {"name": "read_file",
      "description": "Read an existing file", "parameters": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The path of the file to read"}},
      "required": ["filename"]}}, {"name": "write_to_file", "description": "Write
      to file", "parameters": {"type": "object", "properties": {"filename": {"type":
      "string", "description": "The name of the file to write to"}, "text": {"type":
      "string", "description": "The text to write to the file"}}, "required": ["filename",
      "text"]}}, {"name": "web_search", "description": "Web Search", "parameters":
      {"type": "object", "properties": {"query": {"type": "string", "description":
      "The search query"}}, "required": ["query"]}}, {"name": "browse_website", "description":
      "Browse Website", "parameters": {"type": "object", "properties": {"url": {"type":
      "string", "description": "The URL to visit"}, "question": {"type": "string",
      "description": "What you want to find on the website"}}, "required": ["url",
      "question"]}}, {"name": "goals_accomplished", "description": "Goals are accomplished
      and there is nothing left to do", "parameters": {"type": "object", "properties":
      {"reason": {"type": "string", "description": "A summary to the user of how the
      goals were accomplished"}}, "required": ["reason"]}}]}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5162'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RSTY+bMBC98ytGvuQSotB0CeHaS7fHvfRQKuQ1A3gxNvUMSlYR/70yJGFzQda8
        eR96wzUCELoSOQjVSlb9YOLjm/6XnelSV43PTsy/f/08Delr9+3tSJ9iGxju/QMV31k75frBIGtn
        F1h5lIxBNUmzNPuevBzTGehdhSbQmoHjw+4l5tG/uzhJu3ifJocbu3VaIYkc/kQAANf5G3LaCi8i
        h/32PumRSDYo8scSgPDOhImQRJpYWhbbFVTOMto5+rWwAIVgvHAhciiE0cRlrQ1SIbYL6FGSs9o2
        y8YrWMQK2IFqUXWga+AWYdOiMa48O2+qHV94A0EFzpLgVgXQqBQS1aMxn7uH/GCkXZRj+CGNWdTW
        HBuoR6tCscGzQQYJAQVXzxYE2s6cs/MdDVLhqq28Zq009YtBIQo7fW3irlwqacxTgwDCyn7ucI3y
        hQogpG/GHi3TXOQkHth0e02PG9XaamrLpcmw/mwc3Vl/5+OPT/cUg3f9wCW7Dm3wOh1Oi7BY/7kV
        TbMbyI6lWefJfn+MgssU/QcAAP//AwAY8NXo8QIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d7bb74ccfe2e1ff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 15 Jun 2023 15:06:22 GMT
      Function-Execution-Id:
      - kcpi9wodeaio
      Openai-Model:
      - gpt-3.5-turbo-16k-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6030'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4f54a859fc8a40a43f431fe96eea01da
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '180000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '175929'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 1.356s
      X-Request-Id:
      - 5a1d02f8d7c71ab9d754722ac6cf6a5c
    status:
      code: 200
      message: OK
version: 1
