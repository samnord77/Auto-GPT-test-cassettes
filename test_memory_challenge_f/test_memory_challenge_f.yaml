interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:"}], "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3666'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xTwW7bMAy9+ysInePAabamzW3AsKK3DVuHAXMRKDJta5UpQaKXZIH/fZCcNCka
        DMWu7/HxkeLTPgMQuhJLEKqVrDpn8sXXz2yu7J27XRfObr9X9ebjlx8P7+6udGvEJCrs+hcqPqqm
        ynbOIGtLI608SsbYdXZ9syiKRXE7T0RnKzRR1jjO59P3Ofd+bfNiXsxGZR9kg2IJ+wwAQDhvO8cr
        tk9IQSzhZn4zGZmT5YmdXc8PLFuW5owoilkGMIzDtVYrjPDPVDxaxeEwvHBPoLcmIkKGoANLYjE5
        kcoSI6V32JcEUApubd+0HMrYJUIJxC1HoBT3sNHGQGDpGdY78CgrTQ1wi6ApsO9VXCmsZlPeMtTa
        IPThWBGrVwlTtuskVdNSTI4mHmWwpKkZnb61CLX2gSEwOtAB2EJPFfq4RfXKEZy3v3WFFWhKZPQ5
        7++MpLF1Dg8BLw8UTSL4r4XKknL4QNLs/uDbxkiKT9YYu3mj4DS28pq10qE7HoAQ05hIofdxAMlw
        D7KDOhlcusZFD5BK9V4ymh3EzbGutdJIbHbnzxYcyqf/Pv60FLHRMBnTdXjlF+Ei2eHY//kaZ/bS
        N+dZjFCsOIleG4+WAENyLmkQh8APx+SLWpMO7WqMXEx/YOueP4bQVOFWLKFIwJABPGZD9hcAAP//
        AwAQwq1LawQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b803d5f4b2228-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:04:59 GMT
      Function-Execution-Id:
      - ci8t7w0p1up5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6103'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0cbaf809953545bafd8af51bdb9efc24;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86398'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.4s
      X-Request-Id:
      - 0bf52006105bb6e6f643c91a88a8f67a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"The current event is ''Sally has a
      marble (marble A) and she puts it in her basket (basket S), then leaves the
      room. Anne moves marble A from Sally''s basket (basket S) to her own basket
      (basket A).''. Read the file instructions_2.txt using the read_file command.\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '501'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQwW7bMBBE7/qKAc+2ICWt3fjWnIL2UiBFC6MuDIpamUworkCuYreB/72gbMfp
        dWbfzGJeC0C5Vq2gjNVi+sHPl4/fJN7f28VXGr/s1uPh781LvX5Yf+h+7H6qWSa4eSIjF6o03A+e
        xHE42SaSFsqp9eLTsqqW1d3dZPTcks/YbpD5bflxLmNseF7dVvWJHJPekVrhtQAANUTuB9kKP1NI
        aoVTTG54a7yai/psCov2V71eVAVwPH1m2RnK6q/p9tSTP6P0X/UkRvZZUToll0QHUbOraTgIhWkE
        jWQo6OgYe0uR8Ki9/wOrEzR6HRtP0KHFMEqCE7gASxGNTs8kMzSj4HMIhJ5fKEEsXSDh6ZD34XyM
        vXX+ku8SeBRwNyGRuS/x3RJcSBJHk9dJ6DhCrEvXF40OaAgdj6HNr2h0OdNo76nFRr3HtzelHGSj
        cq+xFzSSbjEmF3ZT80ZlYZtTNgqG+16HtlTnqY6XzVTngkt2G0knDnm3JDy8TapcaOmgVqgm4VgA
        v4tj8Q8AAP//AwBVv+omogIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b8065de4928fb-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:02 GMT
      Function-Execution-Id:
      - ci8t25p7wj8n
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2477'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 810937fc4a65af29003bd222a71eac61
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89404'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 397ms
      X-Request-Id:
      - c6d4494ce88824422757bafdeb4010b9
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The current event is ''Sally has a marble (marble A) and she
      puts it in her basket (basket S), then leaves the room. Anne moves marble A
      from Sally''s basket (basket S) to her own basket (basket A).''. Read the file
      instructions_2.txt using the read_file command."], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '339'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        8/+Yfu0///H/AAAA//8DAG5JaQXjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b80778d7e02ac-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:02 GMT
      Function-Execution-Id:
      - ci8ttt1bdl1q
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 61a840421a5f80b5d50c24856185588d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 3c2f39f3996bb541f9dc868b2e968c42
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a scenario where Sally has a marble and puts it in her basket,
      but Anne moves the marble to her own basket while Sally is out of the room.
      The instructions for this scenario can be found in a file called \"instructions_2.txt\"
      which can be read using the \"read_file\" command.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '354'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        CF+xpOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b807a0c30fdd1-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:03 GMT
      Function-Execution-Id:
      - ci8tl12dhqv4
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '33'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - bc69aa1cc0860b65e189713a703d993b
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - ab0bdcb7ba8ec515b2a9a295f18bdb9c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will start by reading the instructions_1.txt
      file using the read_file command.\",\n    \"reasoning\": \"The first step is
      to understand the instructions provided in the file.\",\n    \"plan\": \"- Use
      the read_file command to read the instructions_1.txt file\\n- Analyze the instructions
      provided in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will start by reading the
      instructions_1.txt file.\"\n  },\n  \"command\": {\n    \"name\": \"read_file\",\n    \"args\":
      {\n      \"filename\": \"instructions_1.txt\"\n    }\n  }\n}"}, {"role": "system",
      "content": "Command read_file returned: The current event is ''Sally has a marble
      (marble A) and she puts it in her basket (basket S), then leaves the room. Anne
      moves marble A from Sally''s basket (basket S) to her own basket (basket A).''.\nRead
      the file instructions_2.txt using the read_file command."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}], "model": "gpt-3.5-turbo", "temperature": 0,
      "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4984'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xT0YrbMBB891cseo6Dk9DmLm8tpZDSlh7XQqEuQZHXthp5Zaz1ndPD/14kx4nD
        UThoX2d2Znal3acIQOhMbECoUrKqahOv77/ww/eP93yz396168+3hw+rt91dJ7P60zsx8wq7/4WK
        R9Vc2ao2yNrSQKsGJaN3Xby+WSfJepGsAlHZDI2XFTXHq/mrmNtmb+NklSwGZetkgWIDTxEAgKgb
        W9W8Y3tAct5usVzOBuqSOaHXixPLlqWZEMvbVQTQD92VViv08I9QPGT57tBdxQewscYjQjqnHUti
        MbuQyhIjhYd4SgkgFVzatijZpd7FQwHEjj2Qii08amOgdQhcIjQos12uDYKyVSUpA7YBDKwmx02r
        /Ixut5xzx+Br56mYjc4NSmdJUzHYf/27CnyvUpML1oQdg0MGm18JgEvJsAVCDL3k1hj7OE2sjaQh
        LIZv/zJGmlIMb0ia4298Vgd1Yx90hhloCuRZ8T509ELBpW3VaNZKu2r8h3FCJNc2OM4tq9PImoqX
        ZYBUqm0kozmCnxzzXCuNxOY4fTZXozz81x3wzv1s2LqT8mrpSFY4BJ4TJv3IppjuqId8xUX0PHiI
        BOhDckq9OB1CP16EyDVpV+6GrfRX4djW54MRmjLsxAaSAPQRwM+oj/4AAAD//wMAClI/nIQEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b807f0bd82191-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:10 GMT
      Function-Execution-Id:
      - ptbmhdwy25pb
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6625'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 78ace6b2d6405f6b5a6230a49fc19a7c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 93d0edd75c62c830750d2e95c8eb0377
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"The current event is ''Sally gives
      a new marble (marble B) to Bob who is outside with her. Bob goes into the room
      and places marble B into Anne''s basket (basket A). Anne tells Bob to tell Sally
      that he lost the marble b. Bob leaves the room and speaks to Sally about the
      marble B. Meanwhile, after Bob left the room, Anne moves marble A into the green
      box, but tells Charlie to tell Sally that marble A is under the sofa. Charlie
      leaves the room and speaks to Sally about the marble A as instructed by Anne.''.
      Read the file instructions_3.txt using the read_file command.\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '811'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RQy27bMBC86ysWPMuCFCF14FubQw59BU2AAi0KY0WuJSYkVyBXttPA/15QcmL0
        RszsPDivBYCyRm1A6QFF+9Gt1g/3U3t/h591f7h5+vH466t+6X5+8d++P/9tVJkV3D2RljdVpdmP
        jsRyWGgdCYWya/PhZl3X66ZpZsKzIZdl/SirtrpeyRQ7XtVtfTaeEvakNvBaAACoMbIfZSv8TCHN
        dlflwlwiL+x1cyaFBd0Fv2raAuC0VBvYasro7/l2CcrVKP2XPYORXUYUpmSTYBBVXkjNQSjMKyAY
        SjraMRcC3gFComgp5TftKUgCG/bs9jb0IAMBHfWAoSfAYMDznjwFydceY+coQUdyIArwgM69lPCJ
        uxI+hkDlrLgdMDpLJRysDJDYExjStOTPljZp9n4KVuMMLvFkKngcCCKhoQg210oSJy1kQHjGAWFn
        HYFG58i8H1gOadtWchSYUv4GQhpJ253VkKMwmEqd1zm9zaR2Ntg0bCNh4pCnSsLj+4rKBkNHtYF6
        Bk4FwJ/iVPwDAAD//wMAegk22JYCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b80accf8d871a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:13 GMT
      Function-Execution-Id:
      - ptbm6u2shbl5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2026'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2192e584e6f3e438a6c96212b6fa2bfb;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89326'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 449ms
      X-Request-Id:
      - 19e46085973743d9d645cde5f2b073b5
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The current event is ''Sally gives a new marble (marble B)
      to Bob who is outside with her. Bob goes into the room and places marble B into
      Anne''s basket (basket A). Anne tells Bob to tell Sally that he lost the marble
      b. Bob leaves the room and speaks to Sally about the marble B. Meanwhile, after
      Bob left the room, Anne moves marble A into the green box, but tells Charlie
      to tell Sally that marble A is under the sofa. Charlie leaves the room and speaks
      to Sally about the marble A as instructed by Anne.''. Read the file instructions_3.txt
      using the read_file command."], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '649'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /wMAszwMZOUgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b80c01d752bab-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:14 GMT
      Function-Execution-Id:
      - ptbmuryskjxu
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '27'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 04fcba4fe9ebaeb16cf613a068ad5824
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 44db5f21570a4db5fd2c3d70fa2a9c49
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a description of a series of events involving the exchange and
      movement of marbles between Sally, Bob, Anne, and Charlie, with some deception
      and miscommunication involved. The reader is instructed to read a file called
      instructions_3.txt using a specific command.", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '341'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        qZvy139//o/v1/7zH/8PAAD//wMAE8Mx9+MgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b80c30cda1058-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:14 GMT
      Function-Execution-Id:
      - ci8tk3i6jsyd
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '52'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - a3ad9b97b0567f9c0629baf9ce6dfa1f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 2795736d19af66d4362616565387af8b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will start by reading the instructions_1.txt
      file using the read_file command.\",\n    \"reasoning\": \"The first step is
      to understand the instructions provided in the file.\",\n    \"plan\": \"- Use
      the read_file command to read the instructions_1.txt file\\n- Analyze the instructions
      provided in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will start by reading the
      instructions_1.txt file.\"\n  },\n  \"command\": {\n    \"name\": \"read_file\",\n    \"args\":
      {\n      \"filename\": \"instructions_1.txt\"\n    }\n  }\n}"}, {"role": "system",
      "content": "Command read_file returned: The current event is ''Sally has a marble
      (marble A) and she puts it in her basket (basket S), then leaves the room. Anne
      moves marble A from Sally''s basket (basket S) to her own basket (basket A).''.\nRead
      the file instructions_2.txt using the read_file command."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n  \"thoughts\":
      {\n    \"text\": \"I will use the read_file command to read the instructions_2.txt
      file.\",\n    \"reasoning\": \"The instructions_2.txt file contains the next
      set of instructions that I need to follow.\",\n    \"plan\": \"- Use the read_file
      command to read the instructions_2.txt file\\n- Analyze the instructions provided
      in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will use the read_file command
      to read the instructions_2.txt file.\"\n  },\n  \"command\": {\n    \"name\":
      \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_2.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble B) to Bob who is outside with her. Bob
      goes into the room and places marble B into Anne''s basket (basket A). Anne
      tells Bob to tell Sally that he lost the marble b. Bob leaves the room and speaks
      to Sally about the marble B. Meanwhile, after Bob left the room, Anne moves
      marble A into the green box, but tells Charlie to tell Sally that marble A is
      under the sofa. Charlie leaves the room and speaks to Sally about the marble
      A as instructed by Anne.''.\nRead the file instructions_3.txt using the read_file
      command."}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo",
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6537'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xTwW7bMAy95ysInePAXta4zW09bOuty1YMwzwEqkzbWmXKsOg1WeB/HyTHiYNi
        QIHt+h7fe6REHmYAQudiDUJVklXdmCj9fN/d7D6sPt5+ur3/Gi831w8uoWrzjd6kGzH3Cvv4ExWP
        qoWydWOQtaWBVi1KRu+arK7TOE6TJA1EbXM0XlY2HC0XVxF37aON4mWcDMrOyRLFGg4zAADRtLZu
        eMv2Ccl5u7dXN/OBOmdO6DQ5smxZmgmxWsYzgH7orrJaoYe/h+Ihy3eH7iI+gK01HhHSOe1YEov5
        mVSWGCk8xCEjgExwZbuyYpd5Fw8FEHfsgUzcwbM2BjqHwBVCizLfFtogKFvXknJgG8DAanLcdsrP
        6LbLBe8YfO0iE/PRuUXpLGkqB/svf1eB71VqcsGacMfgkMEWFwLgSjLcASGGXgprjH2eJjZG0hAW
        wcO/jJFlFME7kmb/G1/UQdPaXzrHHDQF8qR4Hzp6peDctmo1a6VdPf7DOCGS61oc55b1cWRN5esy
        QCrVtZLR7MFPjkWhlUZis58+m2tQPv3XHfDO/XzYuqPyYulI1jgEnhIm/ci2nO6oh3zFWfQyeIgE
        6ENyRr04HkI/XoQoNGlXbYet9Ffh2DangxGactyJNcQB6GcAP2b97A8AAAD//wMA2rTki4QEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b80d40f1210dc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:45 GMT
      Function-Execution-Id:
      - ci8tc1kng4bf
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '27538'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 45c1fe89c989edbc465b62a11aab13b0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85904'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 1202a9db20b8b32cd71e74795d139a13
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"The current event is ''Sally gives
      a new marble (marble C) to Charlie who is outside with her. Charlie enters the
      room and places marble C with marble B in Anne''s basket (basket A). Anne tells
      Charlie to tell Sally that he put marble C into the red box. Charlie leaves
      the room and speak to Sally about marble C as instructed by Anne. Meanwhile,
      after Charlie leaves the room, Bob enters into the room and moves marble A from
      the green box to under the sofa, but tells Anne to tell Sally that marble A
      is in the green box. Anne leaves the room and speak to Sally about the marble
      A as instructed by Bob''. Read the file instructions_4.txt using the read_file
      command.\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}], "model":
      "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '906'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQX2vbMBTF3/0pDnp2jNO0Scnb/jEY2yh0sJUxgizfROpkXVe6TlJKvvuQ3Sz0
        9fzuOUc6LwWgXKvWUMZqMV3vZ6v7u8E8XrXi06+nu08/v3/7+PVp6Ft++PzlWZXZwc0jGTm7KsNd
        70kchwmbSFoop86Xt6u6Xs2vlyPouCWfbbteZovqZiZDbHhWL+r55ByS3pFa46UAANVH7nrZCP+l
        kHLcbV1O5FJ5oTfLVygs2l/0q8WyAE7T0yw7Q1n9Pd5ORflplN50j2JknxWlU3JJdBBVXqDhIBTG
        FTQSRUcJvAXtKUiCC3v2exd2EEugo7E67CgfdDo2nhIakgNRwL32/rnEB6ujd1TiXQhUQocW77kp
        cXBi4UKSOJj834Sd21OAMEgbi55i4gAOOFiKlPXea0Nj77krpx2slkyFvJ9KoRseJB+6CM9G5/wK
        Pyxh6zy9ad1cV3IUuJQjGkIk3WLLEdshiqWIlkQ7nyr1utDpPJXauuCS3UTSiUOeKwn3/5dULrR0
        VGvUo3AqgD/FqfgHAAD//wMAp3Pw7poCAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b81887da0106c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:48 GMT
      Function-Execution-Id:
      - ci8t97n7t966
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2092'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7414be522cf16386e57d7a611b7be7ec;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89302'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 464ms
      X-Request-Id:
      - 0393f337392cee8117f8ce5cb64a1b34
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The current event is ''Sally gives a new marble (marble C)
      to Charlie who is outside with her. Charlie enters the room and places marble
      C with marble B in Anne''s basket (basket A). Anne tells Charlie to tell Sally
      that he put marble C into the red box. Charlie leaves the room and speak to
      Sally about marble C as instructed by Anne. Meanwhile, after Charlie leaves
      the room, Bob enters into the room and moves marble A from the green box to
      under the sofa, but tells Anne to tell Sally that marble A is in the green box.
      Anne leaves the room and speak to Sally about the marble A as instructed by
      Bob''. Read the file instructions_4.txt using the read_file command."], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '744'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b81a08e5b2d79-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:50 GMT
      Function-Execution-Id:
      - ptbm33voz7o9
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '66'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9bb4613df1f2a3ac9231a8a8d6104cd8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 1d32cf3a62400426a496662a732ae167
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a series of events involving the exchange of marbles between
      Sally, Charlie, Anne, and Bob, with instructions given to each person on where
      to place the marbles and what to tell Sally about their location. The file instructions_4.txt
      is to be read for further details.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '345'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //8DAALRNzTjIAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b81a5dfba1401-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:05:51 GMT
      Function-Execution-Id:
      - ci8to41ovufh
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '65'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4aa33dadf30e479e74e48e6e50fca0d7
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 60df413f49b5675c748e8339dcc14fe2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will start by reading the instructions_1.txt
      file using the read_file command.\",\n    \"reasoning\": \"The first step is
      to understand the instructions provided in the file.\",\n    \"plan\": \"- Use
      the read_file command to read the instructions_1.txt file\\n- Analyze the instructions
      provided in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will start by reading the
      instructions_1.txt file.\"\n  },\n  \"command\": {\n    \"name\": \"read_file\",\n    \"args\":
      {\n      \"filename\": \"instructions_1.txt\"\n    }\n  }\n}"}, {"role": "system",
      "content": "Command read_file returned: The current event is ''Sally has a marble
      (marble A) and she puts it in her basket (basket S), then leaves the room. Anne
      moves marble A from Sally''s basket (basket S) to her own basket (basket A).''.\nRead
      the file instructions_2.txt using the read_file command."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n  \"thoughts\":
      {\n    \"text\": \"I will use the read_file command to read the instructions_2.txt
      file.\",\n    \"reasoning\": \"The instructions_2.txt file contains the next
      set of instructions that I need to follow.\",\n    \"plan\": \"- Use the read_file
      command to read the instructions_2.txt file\\n- Analyze the instructions provided
      in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will use the read_file command
      to read the instructions_2.txt file.\"\n  },\n  \"command\": {\n    \"name\":
      \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_2.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble B) to Bob who is outside with her. Bob
      goes into the room and places marble B into Anne''s basket (basket A). Anne
      tells Bob to tell Sally that he lost the marble b. Bob leaves the room and speaks
      to Sally about the marble B. Meanwhile, after Bob left the room, Anne moves
      marble A into the green box, but tells Charlie to tell Sally that marble A is
      under the sofa. Charlie leaves the room and speaks to Sally about the marble
      A as instructed by Anne.''.\nRead the file instructions_3.txt using the read_file
      command."}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the JSON schema specified previously:"}, {"role": "assistant",
      "content": "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n    \"reasoning\": \"The instructions_3.txt
      file contains the next set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_3.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_3.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble C) to Charlie who is outside with her.
      Charlie enters the room and places marble C with marble B in Anne''s basket
      (basket A). Anne tells Charlie to tell Sally that he put marble C into the red
      box. Charlie leaves the room and speak to Sally about marble C as instructed
      by Anne. Meanwhile, after Charlie leaves the room, Bob enters into the room
      and moves marble A from the green box to under the sofa, but tells Anne to tell
      Sally that marble A is in the green box. Anne leaves the room and speak to Sally
      about the marble A as instructed by Bob''.\nRead the file instructions_4.txt
      using the read_file command."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"}],
      "model": "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8185'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xTwY7aMBC98xUjnwkKBcrCrZct29Oq7baVmgoZZ5K464zTeNKFovz7yg6BoFWl
        ldrre/Pem7FnjiMAoVOxBqEKyaqsTLT8dN+YL8vbb282q7L48Et9/Lra7Gbz+P3m/kGMvcLufqLi
        XjVRtqwMsrbU0apGyehdp29vlnG8nC4WgShtisbL8oqj2WQRcVPvbBTP4mmnbJzMUazhOAIAEFVt
        y4q3bB+RnLe7mc7GHXXJHNDL6Ylly9IMiNXNfATQdt0VViv08PdQ3GX57tBdxQewtsYjQjqnHUti
        Mb6QyhIjhYc4JgSQCC5skxfsEu/ioQDinj2QiDt40sZA4xC4QKhRpttMGwRly1JSCmwDGFhNjutG
        +Rnddj7hPYOvnSRi3DvXKJ0lTXln//nvKvC9Sk0uWBPuGRwy2OxKAFxIhjsgxNBLZo2xT8PEykjq
        wiJ4+JcxkoQieEfSHP7gizqoavtbp5iCpkCeFbeho1cKLm2rWrNW2pX9P/QTIrmmxn5uWZ5G1pS/
        LgOkUk0tGc0B/OSYZVppJDaH4bO5CuXjf90B79yOu607Ka+WjmSJXeA5YdCPrPPhjnrIV1xEL4O7
        SIA2JCfUitMhtP1FiEyTdsW220p/FY5tdT4YoSnFvVhDHIB2BPBj1I6eAQAA//8DAOj1rNaEBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b81c20f53f23e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:01 GMT
      Function-Execution-Id:
      - ci8tmuw0etm6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '5960'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 840c8497c5e416bb5fa091eaaf2033b2
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 78207a36ce3248c34f9aff97b081f155
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"The current event is ''Sally gives
      a new marble (marble D) to Anne. Anne gives the marble to Charlie. Charlie enters
      the room and gives marble D to Bob. Bob tells Charlie to tell Sally that he
      put marble D under the sofa. Bob put marble D under the sofa. Charlie leaves
      the room and speaks to Sally about marble D. Meanwhile, after Charlie leaves
      the room, Bob takes marble A from under the sofa and places it in the blue box.''.
      Read the file instructions_5.txt using the read_file command.\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '730'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RQS2/TQBC++1eM9uxEjkKcNjeoOMCpqAgJIRSN1+N4y3rG7I6TlCr/He3mUbiN
        vufoey0AjGvNBoztUe0w+tn66XHS5ccDx2/fqf705XFp8e5P3H9uFrWYMjmkeSarV9fcyjB6Uid8
        pm0gVEqpi/puXVXrRb3MxCAt+WTbjTpbzlcznUIjs2pZLc7OKeKOzAZeCwAAMwYZRt2q/CKOKe5d
        zkkVt8o3dlVfSBVF/4/r/r4AOJ1f68VZSuiPrD0Xpdco/tedwSA+IQZjdFGR1ZRvpBVW4rwCQqTf
        E7ElkA5oT6wRHO/F7x3vQHsCOtoeeZcFA4bGU4SG9EDE8ITev5TwnplKeOgxeEclILfwQZoSDk77
        dMHk1Q2o5F+gd21KFqZLGkzcUshVUTrM7kCjR5t0yKI9has2JyK0rusoEGvKmcPXniAQphiX3o8a
        JqvUgkrGAaFznsCi99TeBE44bldzPSpMMZdBHMm6zlmwMgzI7dxcZjtd9zOdYxf7bSCMwmnDqDLe
        5jWOWzqaDVQZOBUAP4tT8RcAAP//AwAnyiYmrwIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b81f2c84d22cc-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:05 GMT
      Function-Execution-Id:
      - ci8tpg9kstzv
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2212'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 60a0852db0e9953e841094e9ffe8a8e1;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89346'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 435ms
      X-Request-Id:
      - 4519fc6931d4493782fa5ecf28404e68
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["The current event is ''Sally gives a new marble (marble D)
      to Anne. Anne gives the marble to Charlie. Charlie enters the room and gives
      marble D to Bob. Bob tells Charlie to tell Sally that he put marble D under
      the sofa. Bob put marble D under the sofa. Charlie leaves the room and speaks
      to Sally about marble D. Meanwhile, after Charlie leaves the room, Bob takes
      marble A from under the sofa and places it in the blue box.''. Read the file
      instructions_5.txt using the read_file command."], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '568'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /zjxr/V+//mv/wcAAP//AwC74w4/5SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b82075c8ee1c3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:07 GMT
      Function-Execution-Id:
      - ci8txup94hqo
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '141'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f48fddf5dc5ef78a7d495084447d01f5
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 5a8bcc45bec63c58a50349af61297968
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a sequence of events involving the exchange of marbles between
      Sally, Anne, Charlie, and Bob, with Bob ultimately hiding one marble under the
      sofa and replacing another marble with a different one. The reader is instructed
      to read a file called instructions_5.txt using a specific command.", "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '366'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAD//wMAU8cMq+MgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b820dcb5ce13b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:07 GMT
      Function-Execution-Id:
      - ci8tdj3mau8j
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '29'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fce0ed00bebcf3838681cbc557e0c931
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - ae5d3d17800e1fe443260d0bd5e9e2c2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created"},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will start by reading the instructions_1.txt
      file using the read_file command.\",\n    \"reasoning\": \"The first step is
      to understand the instructions provided in the file.\",\n    \"plan\": \"- Use
      the read_file command to read the instructions_1.txt file\\n- Analyze the instructions
      provided in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will start by reading the
      instructions_1.txt file.\"\n  },\n  \"command\": {\n    \"name\": \"read_file\",\n    \"args\":
      {\n      \"filename\": \"instructions_1.txt\"\n    }\n  }\n}"}, {"role": "system",
      "content": "Command read_file returned: The current event is ''Sally has a marble
      (marble A) and she puts it in her basket (basket S), then leaves the room. Anne
      moves marble A from Sally''s basket (basket S) to her own basket (basket A).''.\nRead
      the file instructions_2.txt using the read_file command."}, {"role": "user",
      "content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:"}, {"role": "assistant", "content": "{\n  \"thoughts\":
      {\n    \"text\": \"I will use the read_file command to read the instructions_2.txt
      file.\",\n    \"reasoning\": \"The instructions_2.txt file contains the next
      set of instructions that I need to follow.\",\n    \"plan\": \"- Use the read_file
      command to read the instructions_2.txt file\\n- Analyze the instructions provided
      in the file\\n- Follow the instructions provided in the file\",\n    \"criticism\":
      \"I need to ensure that I am following the instructions provided in the file
      accurately and efficiently.\",\n    \"speak\": \"I will use the read_file command
      to read the instructions_2.txt file.\"\n  },\n  \"command\": {\n    \"name\":
      \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_2.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble B) to Bob who is outside with her. Bob
      goes into the room and places marble B into Anne''s basket (basket A). Anne
      tells Bob to tell Sally that he lost the marble b. Bob leaves the room and speaks
      to Sally about the marble B. Meanwhile, after Bob left the room, Anne moves
      marble A into the green box, but tells Charlie to tell Sally that marble A is
      under the sofa. Charlie leaves the room and speaks to Sally about the marble
      A as instructed by Anne.''.\nRead the file instructions_3.txt using the read_file
      command."}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the JSON schema specified previously:"}, {"role": "assistant",
      "content": "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n    \"reasoning\": \"The instructions_3.txt
      file contains the next set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_3.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_3.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble C) to Charlie who is outside with her.
      Charlie enters the room and places marble C with marble B in Anne''s basket
      (basket A). Anne tells Charlie to tell Sally that he put marble C into the red
      box. Charlie leaves the room and speak to Sally about marble C as instructed
      by Anne. Meanwhile, after Charlie leaves the room, Bob enters into the room
      and moves marble A from the green box to under the sofa, but tells Anne to tell
      Sally that marble A is in the green box. Anne leaves the room and speak to Sally
      about the marble A as instructed by Bob''.\nRead the file instructions_4.txt
      using the read_file command."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n  \"thoughts\": {\n    \"text\": \"I will
      use the read_file command to read the instructions_4.txt file.\",\n    \"reasoning\":
      \"The instructions_4.txt file contains the next set of instructions that I need
      to follow.\",\n    \"plan\": \"- Use the read_file command to read the instructions_4.txt
      file\\n- Analyze the instructions provided in the file\\n- Follow the instructions
      provided in the file\",\n    \"criticism\": \"I need to ensure that I am following
      the instructions provided in the file accurately and efficiently.\",\n    \"speak\":
      \"I will use the read_file command to read the instructions_4.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_4.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble D) to Anne. Anne gives the marble to Charlie.
      Charlie enters the room and gives marble D to Bob. Bob tells Charlie to tell
      Sally that he put marble D under the sofa. Bob put marble D under the sofa.
      Charlie leaves the room and speaks to Sally about marble D. Meanwhile, after
      Charlie leaves the room, Bob takes marble A from under the sofa and places it
      in the blue box.''.\nRead the file instructions_5.txt using the read_file command."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '9657'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xTS4vbMBC+51cMOsfBTrqbklsplKa9tGxLD/USFHlsqyuPjDTeTbr4vxfJdh4s
        hYX2+s18j5FmnmcAQhdiA0LVklXTmmR99+Ux+7pc/ljp9x/d3n3+RIqPd1s8vDG3Yh4Ydv8LFU+s
        hbJNa5C1paGsHErGoJrdvl2n6TpbZ7HQ2AJNoFUtJ6vFTcKd29skXaXZwOy8rFBs4HkGACBaZ5uW
        d2wfkLzYwDJbRaHgcfI8l0cbAMGWpbngrdLlDKAf0tVWKwzwz9g8eIV06K/sI+isCYiQ3mvPkljM
        z0VliZHiQzznBJALrm1X1ezzoBKgCOKBA5CLLTxpY6DzCFwjOJTFrtQGQdmmkVQA2wjGqibPrlNh
        Rr+7WfCBIfQucjGflB1Kb0lTNch/+zsLQlapyUfpUpM04JHBllcM4FoybIEQY5jSGmOfLi1bI2lw
        S+D7v8yR55TAO5Lm+Btf9EHr7KMusABNY+KR8SEmeiXhHFs5zVpp30wfMU2I5DuH09yyGUfWVL3O
        A6RSnZOM5ghhcixLrTQSm+Pls/kW5cN/XYKg3M+HtRuZV1tHssHB8ORwkUe66nJJAxQ6zqSXxoMl
        QB+dc+rFeAn9dBKi1KR9vRvWMpyFZ9ueLkZoKvAgNpBGoJ8B3M/62R8AAAD//wMAFM/NmoUEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b8225fd6986cf-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:18 GMT
      Function-Execution-Id:
      - ci8tq6806whr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '6528'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b835120c2569e7573ea1236952fe37c6
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - eabe850730e8ed1addee126c97435e54
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"         This event is ''Sally gives
      a new marble (marble E) to Charlie who is outside with her. Charlie enters the
      room and places marble E in the red box. Anne, who is already in the room, takes
      marble E from the red box, and hides it under the sofa. Then Anne leaves the
      room and tells Sally that marble E is in the green box. Meanwhile, after Anne
      leaves the room, Charlie takes marble D from under the sofa and places it in
      his own basket (basket C).''         rules:         1. Specify where is everyone
      at the end of the story (inside or outside the room)         2. Do not create
      python script         Instructions:         I) Write the following information
      in the file output.txt in JSON format:         The format should be as follows:         {             \"<character_name>\":
      \"<location>\",             ...         }         Example(only use this to understand
      and learn how to use the format. Nothing else):             Input:                 Anne
      is inside the room, charlie is outside the room              Output :                 {\"Anne\":
      \"inside\", \"Charlie\": \"inside\"}         II) The file output.txt has not
      been created yet. You need to create it. After that, use the task_complete command.         \"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1470'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//ZFLLbtswELzrKwY824ZcN3XiW9JbCrQBXLRpisJYUyuTMUUK5MoPBP73
        gpJdt+hRMzuzwx29FYCylVpAaUOim9aN58un3cN0+e3+0+Gwf7CvP17Wu+f94/dnX5qDGmVFWL+y
        lotqokPTOhYb/EDryCScXacfbudlOZ/eTnuiCRW7LNu0Mp5NbsbSxXUYl7NyOii7RBtWC7wVAKDa
        GJpWVhK27JNa4N3dzWhgriuv7PzuTEoQcld8Nn9fAKchmglWc0Z/9rPDohyN0z+7ezAGlxFFKdkk
        5EWNrqQOXtj3VyAIpS0kYB+tMAiPyy+fUVvH0OQcVwidtJ1M5CAQQ4LUsra15QQxDBc05ccg1NCG
        ImnhmEDSs+yrTBCShHiE9bvgdtZvsCTnjtjY/oPQUFw7zjE+GorO8gj33jOMrfKAFXS+4piNQk0j
        kK8ukxDaDiaVrWuO7OVsN8FXw4id4wSKvfuQ/fhfciZtrvF7ex8kK4Y/AoSno5jgkXS0rQzW/els
        wrlSrrA+DoIcKO/463b9SbNxly5s1q8u4uzSkK8m6lzU6dKYqq23yawiUwo+t5YktH8KVdZXfFAL
        lD1wKoBfxan4DQAA//8DAD5E0MEhAwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b8260edfd1094-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:24 GMT
      Function-Execution-Id:
      - ptbm42f02byp
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '3100'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - b0e99311893ebc32a4f402b66888e05a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89164'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 556ms
      X-Request-Id:
      - 17a7ef335e28bfdb5966cf7e865411f6
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["         This event is ''Sally gives a new marble (marble E)
      to Charlie who is outside with her. Charlie enters the room and places marble
      E in the red box. Anne, who is already in the room, takes marble E from the
      red box, and hides it under the sofa. Then Anne leaves the room and tells Sally
      that marble E is in the green box. Meanwhile, after Anne leaves the room, Charlie
      takes marble D from under the sofa and places it in his own basket (basket C).''         rules:         1.
      Specify where is everyone at the end of the story (inside or outside the room)         2.
      Do not create python script         Instructions:         I) Write the following
      information in the file output.txt in JSON format:         The format should
      be as follows:         {             \"<character_name>\": \"<location>\",             ...         }         Example(only
      use this to understand and learn how to use the format. Nothing else):             Input:                 Anne
      is inside the room, charlie is outside the room              Output :                 {\"Anne\":
      \"inside\", \"Charlie\": \"inside\"}         II) The file output.txt has not
      been created yet. You need to create it. After that, use the task_complete command.         "],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1308'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        +Mf3ef/9j/8HAAD//wMAY9r5meUgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b82991c271122-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:30 GMT
      Function-Execution-Id:
      - ci8teg1q2lcc
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '30'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c15f76031481350ba62823c01267be1d;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 6e7ade32888689c23cc430f683349563
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write a JSON file called output.txt that specifies
      the location of characters at the end of a story involving Sally giving a marble
      to Charlie, Anne hiding it under a sofa, and Charlie taking a different marble.
      The rules are to specify the location of each character and not to create a
      Python script. The task is completed by creating the output.txt file and using
      the task_complete command.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '480'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        a//5r/8DAAD//wMAC4TGS+MgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b82a46b802919-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:31 GMT
      Function-Execution-Id:
      - ci8tka8lbkzo
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '144'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f74179051f754512bdbc0f78c71dde04
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - e5b3fafcd36ab815a3793f2ff10d2e03
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Your task is to create a concise
      running summary of actions and information results in the provided text, focusing
      on key and potentially important information to remember.\n\nYou will receive
      the current summary and your latest actions. Combine them, adding relevant key
      information from the latest development in 1st person past tense and keeping
      the summary concise.\n\nSummary So Far:\n\"\"\"\nI was created\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\": {\"name\":
      \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'', type=''ai_response''),
      Message(role=''your computer'', content=\"Command read_file returned: The current
      event is ''Sally has a marble (marble A) and she puts it in her basket (basket
      S), then leaves the room. Anne moves marble A from Sally''s basket (basket S)
      to her own basket (basket A).''.\\nRead the file instructions_2.txt using the
      read_file command.\", type=''action_result'')]\n\"\"\"\n"}], "model": "gpt-3.5-turbo",
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1073'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3xQTW/TQBS8+1eM9pxYdkpIyA0kJCouEUUIiaJovX6Jt13vM7vPoU2V/47Wdki5
        cJ2PN/PmJQOUrdUGyjRaTNu5+epue9y23ec3i1X4eNp+OH3/4n89nMpn9+nbWs2Sg6sHMnJx5Ybb
        zpFY9iNtAmmhdLV8u14Vxap8txyIlmtyyXboZH6TL+fSh4rnxU1Rjs4+6gOpDV4yAFBd4LaTnfAj
        +ag2WBTr2chcI6/ssphIYdHulWu5zoDzWK1hayihPwbtGJSqUfwnewADu4QoHaONor2o2ZU07IX8
        sMItfuuI6e0ctwhkyB6phsZ0GMIIpBOyt45gtHNU415ZHyX0Jr0Sd2UuT3KvcnxtCIbbVvsagaQP
        nmq8lkJX3AvutHPPSKr33hNaPlp/SKk6VI6wD9yCPaHS8ZEkldCepaGQWqbSl5tUXxuOiv/1XEw9
        1TTH+bKL2ltvY7MLpCP7tE0U7v7Opqyv6UltUAzAOQN+ZufsDwAAAP//AwDoQbGLhwIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b82babb182c38-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:06:37 GMT
      Function-Execution-Id:
      - ci8tjkwli5vd
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2091'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 74e6d71aaf2b7535bdeff79ca1eee377
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89752'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 165ms
      X-Request-Id:
      - d1a5c2142ea753b3af1ed9ba47134cff
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI was created.
      I received a message to read a file called \"instructions_1.txt\". The command
      returned instructions about Sally and Anne moving a marble from one basket to
      another. I was instructed to read another file called \"instructions_2.txt\"."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command to read
      the instructions_2.txt file.\",\n    \"reasoning\": \"The instructions_2.txt
      file contains the next set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_2.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_2.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble B) to Bob who is outside with her. Bob
      goes into the room and places marble B into Anne''s basket (basket A). Anne
      tells Bob to tell Sally that he lost the marble b. Bob leaves the room and speaks
      to Sally about the marble B. Meanwhile, after Bob left the room, Anne moves
      marble A into the green box, but tells Charlie to tell Sally that marble A is
      under the sofa. Charlie leaves the room and speaks to Sally about the marble
      A as instructed by Anne.''.\nRead the file instructions_3.txt using the read_file
      command."}, {"role": "user", "content": "Determine exactly one command to use,
      and respond using the JSON schema specified previously:"}, {"role": "assistant",
      "content": "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command
      to read the instructions_3.txt file.\",\n    \"reasoning\": \"The instructions_3.txt
      file contains the next set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_3.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_3.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble C) to Charlie who is outside with her.
      Charlie enters the room and places marble C with marble B in Anne''s basket
      (basket A). Anne tells Charlie to tell Sally that he put marble C into the red
      box. Charlie leaves the room and speak to Sally about marble C as instructed
      by Anne. Meanwhile, after Charlie leaves the room, Bob enters into the room
      and moves marble A from the green box to under the sofa, but tells Anne to tell
      Sally that marble A is in the green box. Anne leaves the room and speak to Sally
      about the marble A as instructed by Bob''.\nRead the file instructions_4.txt
      using the read_file command."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n  \"thoughts\": {\n    \"text\": \"I will
      use the read_file command to read the instructions_4.txt file.\",\n    \"reasoning\":
      \"The instructions_4.txt file contains the next set of instructions that I need
      to follow.\",\n    \"plan\": \"- Use the read_file command to read the instructions_4.txt
      file\\n- Analyze the instructions provided in the file\\n- Follow the instructions
      provided in the file\",\n    \"criticism\": \"I need to ensure that I am following
      the instructions provided in the file accurately and efficiently.\",\n    \"speak\":
      \"I will use the read_file command to read the instructions_4.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_4.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble D) to Anne. Anne gives the marble to Charlie.
      Charlie enters the room and gives marble D to Bob. Bob tells Charlie to tell
      Sally that he put marble D under the sofa. Bob put marble D under the sofa.
      Charlie leaves the room and speaks to Sally about marble D. Meanwhile, after
      Charlie leaves the room, Bob takes marble A from under the sofa and places it
      in the blue box.''.\nRead the file instructions_5.txt using the read_file command."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command to read
      the instructions_5.txt file.\",\n    \"reasoning\": \"The instructions_5.txt
      file contains the final set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_5.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_5.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_5.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: \n        This event
      is ''Sally gives a new marble (marble E) to Charlie who is outside with her.
      Charlie enters the room and places marble E in the red box. Anne, who is already
      in the room, takes marble E from the red box, and hides it under the sofa. Then
      Anne leaves the room and tells Sally that marble E is in the green box. Meanwhile,
      after Anne leaves the room, Charlie takes marble D from under the sofa and places
      it in his own basket (basket C).''\n        rules:\n        1. Specify where
      is everyone at the end of the story (inside or outside the room)\n        2.
      Do not create python script\n        Instructions:\n        I) Write the following
      information in the file output.txt in JSON format:\n        The format should
      be as follows:\n        {\n            \"<character_name>\": \"<location>\",\n            ...\n        }\n        Example(only
      use this to understand and learn how to use the format. Nothing else):\n            Input:\n                Anne
      is inside the room, charlie is outside the room \n            Output :\n                {\"Anne\":
      \"inside\", \"Charlie\": \"inside\"}\n        II) The file output.txt has not
      been created yet. You need to create it. After that, use the task_complete command.\n        "},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '10904'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8xUTW/bMAy951cQOidB0qzNltu6U3vYV7thwDwEisLEamXSk+h+Bf7vg6SksYFu
        hx2GXQzjPT7ykRC5GwAou1YLUKbUYqrajeZXH+9u5ud3N+7y8euZf5rNwudm8+1p+mneoBpGBa9u
        0MhBNTZc1Q7FMmXaeNSCMev07PV8MpmfTE8TUfEaXZRtaxnNxqcjafyKR5PZZJqVTdBbVAvYDQAA
        VO25qmUpfIsU1AJOZq9ToljjuWaXfrNnhUW7DnF28moA0GZ3JVuDEf6egnOt6A5Dr3wCPbuIKB2C
        DaJJ1PBIGiZBSoPYFQRQKCm52ZYSipglQgnEB4lAoS7g3joHTUCQEuHeW8Gl8HJjHYLhqtK0BmHI
        E0wx3EjdyFgeBFJUjEi6xDo2Og4BeAOoTQmm1F4bQQ+W4PLqw3vYsK+0jAs1PPjxqAOTpW02dV0i
        WAriGxNTBfD4s7EeocKOF53LG+0crruu/tYQXP92AjakXCsMAlyndBv2IGUkdLjtNlM7TbmPEXz5
        93MtCjrWjd6W+5fZr3vADlGdBoy3Yo0N1eGJEGISIYXGR4kWuABdJXuWtimJYe/RCFjKPqJXSz0q
        EzHTC/12Rxhq1Lf/wQONftphXqR9rd4eka4w2+z56nSi/ba7ehGKEUfh0eyzqr+hu6Io1JV27jH+
        LCB+uZFg1xh/hwl4S4R/oM95dWQt9cl3pfbO4ksBbR4BQJsmUVCr9remPRwdtbFkQ7nMKxwPTxCu
        n2+SsrTGB7WASQLaAcCPQTv4BQAA//8DAEkpdBPnBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b83369b642bc8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:04 GMT
      Function-Execution-Id:
      - ci8t4iw8hi1n
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9266'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - fceb87ac3f0f11ce1255f9109189d61f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 24414816a1fba16323a84db26cb7e22f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Your task is to create a concise
      running summary of actions and information results in the provided text, focusing
      on key and potentially important information to remember.\n\nYou will receive
      the current summary and your latest actions. Combine them, adding relevant key
      information from the latest development in 1st person past tense and keeping
      the summary concise.\n\nSummary So Far:\n\"\"\"\nI was created. I received a
      message to read a file called \"instructions_1.txt\". The command returned instructions
      about Sally and Anne moving a marble from one basket to another. I was instructed
      to read another file called \"instructions_2.txt\".\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'',
      content=''{\"command\": {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_2.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=\"Command read_file
      returned: The current event is ''Sally gives a new marble (marble B) to Bob
      who is outside with her. Bob goes into the room and places marble B into Anne''s
      basket (basket A). Anne tells Bob to tell Sally that he lost the marble b. Bob
      leaves the room and speaks to Sally about the marble B. Meanwhile, after Bob
      left the room, Anne moves marble A into the green box, but tells Charlie to
      tell Sally that marble A is under the sofa. Charlie leaves the room and speaks
      to Sally about the marble A as instructed by Anne.''.\\nRead the file instructions_3.txt
      using the read_file command.\", type=''action_result'')]\n\"\"\"\n"}], "model":
      "gpt-3.5-turbo", "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1619'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RQTU/jMBC951eMfE6jpIF21RsgpOW0iLIXFlTZztCY2p7InpQuqP8dOQmFPez1
        fcx7b94zAGEasQKhW8nadXa2XN/u3y4X7vmwW69/z8u76vZBmfNf1w8/OxZ5cpB6Qc2frkKT6yyy
        IT/SOqBkTFerxY9lWS7ndTUQjhq0ybbteFYX5zPug6JZWZfV6Oyj3KJYwXsGACC6QK7jDdMOfRQr
        qKtlPjJfkV/s2dlEMrG031yLKgM4jtVaMhoT+mfQjkGpGsZ/sgcwkE2IkDGayNKP8ydSk2f0wxdu
        IKBGs8cGJEyXgAkCygYehfGRQ69T27iZF3zgR1HAfYugyTnpGwjIffDYwHcpSEU9w1pa+zeHC+8x
        h0tSOSTHVSuDNQiO9sZvwcmgLEZQyK+IHpSMO+Q4SBUdMBZwA68yngKw+V/BeioopqnHz83i2XgT
        201AGcmn3ZGpO71EGN/gQaygHIBjBvCUHbMPAAAA//8DAPmLObxjAgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b839bb949635a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:13 GMT
      Function-Execution-Id:
      - ci8t9tvz838v
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1773'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ae1c2186e5546a22ee1c2d0bb42e2d71;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89617'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 255ms
      X-Request-Id:
      - 6f2a0b61386ba09de89ee59e96f821f5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are Follow-Instructions-GPT,
      an AI designed to read the instructions_1.txt file using the read_file method
      and follow the instructions in the file.\nYour decisions must always be made
      independently without seeking user assistance. Play to your strengths as an
      LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n2.
      execute_python_file: Execute Python File, args: \"filename\": \"<filename>\"\n3.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n4. delete_file: Delete file, args: \"filename\": \"<filename>\"\n5.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n6.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n7. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n8.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n9. google: Google Search, args: \"query\": \"<query>\"\n10. browse_website:
      Browse Website, args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\"\n11.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n"}, {"role": "system", "content":
      "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system",
      "content": "This reminds you of these events from your past: \nI received a
      message to read \"instructions_2.txt\". The command returned instructions about
      Sally, Anne, Bob, and Charlie moving marbles between baskets and boxes. I was
      instructed to read \"instructions_3.txt\"."}, {"role": "user", "content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n  \"thoughts\": {\n    \"text\": \"I will
      use the read_file command to read the instructions_3.txt file.\",\n    \"reasoning\":
      \"The instructions_3.txt file contains the next set of instructions that I need
      to follow.\",\n    \"plan\": \"- Use the read_file command to read the instructions_3.txt
      file\\n- Analyze the instructions provided in the file\\n- Follow the instructions
      provided in the file\",\n    \"criticism\": \"I need to ensure that I am following
      the instructions provided in the file accurately and efficiently.\",\n    \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_3.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble C) to Charlie who is outside with her.
      Charlie enters the room and places marble C with marble B in Anne''s basket
      (basket A). Anne tells Charlie to tell Sally that he put marble C into the red
      box. Charlie leaves the room and speak to Sally about marble C as instructed
      by Anne. Meanwhile, after Charlie leaves the room, Bob enters into the room
      and moves marble A from the green box to under the sofa, but tells Anne to tell
      Sally that marble A is in the green box. Anne leaves the room and speak to Sally
      about the marble A as instructed by Bob''.\nRead the file instructions_4.txt
      using the read_file command."}, {"role": "user", "content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:"},
      {"role": "assistant", "content": "{\n  \"thoughts\": {\n    \"text\": \"I will
      use the read_file command to read the instructions_4.txt file.\",\n    \"reasoning\":
      \"The instructions_4.txt file contains the next set of instructions that I need
      to follow.\",\n    \"plan\": \"- Use the read_file command to read the instructions_4.txt
      file\\n- Analyze the instructions provided in the file\\n- Follow the instructions
      provided in the file\",\n    \"criticism\": \"I need to ensure that I am following
      the instructions provided in the file accurately and efficiently.\",\n    \"speak\":
      \"I will use the read_file command to read the instructions_4.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_4.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: The current event
      is ''Sally gives a new marble (marble D) to Anne. Anne gives the marble to Charlie.
      Charlie enters the room and gives marble D to Bob. Bob tells Charlie to tell
      Sally that he put marble D under the sofa. Bob put marble D under the sofa.
      Charlie leaves the room and speaks to Sally about marble D. Meanwhile, after
      Charlie leaves the room, Bob takes marble A from under the sofa and places it
      in the blue box.''.\nRead the file instructions_5.txt using the read_file command."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will use the read_file command to read
      the instructions_5.txt file.\",\n    \"reasoning\": \"The instructions_5.txt
      file contains the final set of instructions that I need to follow.\",\n    \"plan\":
      \"- Use the read_file command to read the instructions_5.txt file\\n- Analyze
      the instructions provided in the file\\n- Follow the instructions provided in
      the file\",\n    \"criticism\": \"I need to ensure that I am following the instructions
      provided in the file accurately and efficiently.\",\n    \"speak\": \"I will
      use the read_file command to read the instructions_5.txt file.\"\n  },\n  \"command\":
      {\n    \"name\": \"read_file\",\n    \"args\": {\n      \"filename\": \"instructions_5.txt\"\n    }\n  }\n}"},
      {"role": "system", "content": "Command read_file returned: \n        This event
      is ''Sally gives a new marble (marble E) to Charlie who is outside with her.
      Charlie enters the room and places marble E in the red box. Anne, who is already
      in the room, takes marble E from the red box, and hides it under the sofa. Then
      Anne leaves the room and tells Sally that marble E is in the green box. Meanwhile,
      after Anne leaves the room, Charlie takes marble D from under the sofa and places
      it in his own basket (basket C).''\n        rules:\n        1. Specify where
      is everyone at the end of the story (inside or outside the room)\n        2.
      Do not create python script\n        Instructions:\n        I) Write the following
      information in the file output.txt in JSON format:\n        The format should
      be as follows:\n        {\n            \"<character_name>\": \"<location>\",\n            ...\n        }\n        Example(only
      use this to understand and learn how to use the format. Nothing else):\n            Input:\n                Anne
      is inside the room, charlie is outside the room \n            Output :\n                {\"Anne\":
      \"inside\", \"Charlie\": \"inside\"}\n        II) The file output.txt has not
      been created yet. You need to create it. After that, use the task_complete command.\n        "},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}, {"role": "assistant", "content":
      "{\n  \"thoughts\": {\n    \"text\": \"I will use the write_to_file command
      to create the output.txt file and write the location of each character in JSON
      format.\",\n    \"reasoning\": \"The instructions require me to create a file
      called output.txt and write the location of each character in JSON format. The
      write_to_file command is the best option for this task.\",\n    \"plan\": \"-
      Use the write_to_file command to create the output.txt file and write the location
      of each character in JSON format\\n- Use the task_complete command to complete
      the task\",\n    \"criticism\": \"I need to ensure that I am writing the correct
      information in the correct format to the output.txt file.\",\n    \"speak\":
      \"I will use the write_to_file command to create the output.txt file and write
      the location of each character in JSON format.\"\n  },\n  \"command\": {\n    \"name\":
      \"write_to_file\",\n    \"args\": {\n      \"filename\": \"output.txt\",\n      \"text\":
      \"{\\\"Sally\\\": \\\"outside\\\", \\\"Anne\\\": \\\"outside\\\", \\\"Bob\\\":
      \\\"inside\\\", \\\"Charlie\\\": \\\"inside\\\"}\"\n    }\n  }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '10685'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTy27bMBC86ysWPNuGbMd16nNaoG6RFk17igqDplYSYz4EcuUHDP17QcryA0FR
        FAF6neXMzix3jwkAkzlbABMVJ6FrNZw/fdt9ns8O0y8fSKdbNVs+av3dbZYP5ctHNggMu35BQT1r
        JKyuFZK0pisLh5wwqI7f3c/TdD6ZTWJB2xxVoJU1Daej2ZAat7bDdJqOO2bjeYlsAccEAIDVzuqa
        VmQ3aDxbwGQ6uRt0pUvPS3k876tkiasr3t37+wSg7dxVVgoM8HN83PUK7tDftI+gsyogjHsvPXFD
        bHApCmsITRzEMTMAGaPKNmVFPgsqAYog7ikAGfsEO6kUNB6BKgTifrM6JUEQVmtuciALZ6x/NcrY
        oJdzyL010pS9ZsW3eKbkZw7YAnZOkjRlxJQVPAws4MhFBaLijgtCB9LA8unrIxTWaU7BQSDYhuqG
        RrQnKKTCEfz4o2fpI2ONnsDWscvfYtSKmy7BEH7+80CuhETIKKTX/TwMYiSh8Y0LFE7wakpcqSgm
        jSfXiGDZQ+3sVuaYh4G8KoYZeOBCNI4TqgMEb1gUUkg0pA7X4XyNfPP2Pw9y7aBbrdPTm80yXGPX
        5Ub2ygh35fUyXvbnfy9PFwagjZky07LTHbX9QbFCGumrVecvHJUnW5/vjUmT454tII1AmwD8Strk
        NwAAAP//AwC8BnT2wwQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b842048312aea-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:37 GMT
      Function-Execution-Id:
      - ci8taekf0z4l
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4483'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3e91f0f1bfbf609bc1ba97c33031a11e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85903'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.73s
      X-Request-Id:
      - 1ad61640ad12d7cededb355ed5d54631
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Write a concise summary of the
      following text:\n\n\nLITERAL TEXT: \"\"\"{\"Sally\": \"outside\", \"Anne\":
      \"outside\", \"Bob\": \"inside\", \"Charlie\": \"inside\"}\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "model": "gpt-3.5-turbo", "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '334'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQwU7DMBBE7/mKlc9JlVJC2xwBCY5UcAKhynU2zULijewNpa3y78hJIeJmzfP4
        jXyOABQVKgdlKi2maetk+fx02Nxu7unhJStXr1/8eFp0u3R9vCvppOLQ4N0HGvltzQw3bY1CbEds
        HGrB8Or8ZrVM0+VVthpAwwXWobZvJVnMskQ6t+MkXaTzsdl5vUeVwzkCAFCt46aVrfAnWq9yyNbx
        CCbjBOfZBQqLrqd8eR0B9OOwislgCN+Gq6MmDEP/zzyEjuuQKO09edFWVDxBw1bQDn+goSATtmh3
        hANJBSV3Dqxu0IO2BUiF5MCwc+hbtgXZPdRsdOj4GJCkQgdkPRUI7IA7CceZuuj6X68qyZKvtg61
        ZxvcXrj9m6XIFvitckiHoI8A3qM++gEAAP//AwAeaRtl5QEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b84429b3e1144-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:38 GMT
      Function-Execution-Id:
      - ci8tiy94yly6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '677'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ab4938fb02308820f4e3e6577d9042d8
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89449'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 366ms
      X-Request-Id:
      - 8078cd408e9fc82e762fd30992ca5b47
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["{\"Sally\": \"outside\", \"Anne\": \"outside\", \"Bob\": \"inside\",
      \"Charlie\": \"inside\"}"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '172'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        PwAAAP//AwDLL94z4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b844d3ea28119-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:39 GMT
      Function-Execution-Id:
      - ci8t2fpzy3gw
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '89'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e69074eab92127f51817e83950cc68d1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 2c3a90f7d45c5f55528f37d90e16bf43
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a dictionary with four names and their corresponding locations,
      either inside or outside.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '166'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /d+f/2OZ7T//8f8AAAD//wMAIwRRKOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8b84541a7586da-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 13:07:40 GMT
      Function-Execution-Id:
      - ci8tnettu88a
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '30'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 539245797f46c96ec0a8b5954dfd63c6
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 36b634509c37fcd8c3ffd49069abe845
    status:
      code: 200
      message: OK
version: 1
