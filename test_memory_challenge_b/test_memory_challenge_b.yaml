interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3479'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SSTW/TQBCG7/yK0ZztKCElob5xbC+oCHHBKJqsx/aS9ay1O1aSRvnvaHHcQiJV
        4sB1Pt73mY8T2goLNC2p6XqXrz+bzhCH/eM3qg99u3rmx6fmiX39fhUxQ7/9yUYvHTPju96xWi+Y
        oQlMyhUWi9XH1WK+XC7mGXa+YocFNr3my9mHXIew9fl8OV9ghkOkhrE4YR981+tG/Y4lYrFe32f4
        qv0SX6zuMlSv5F5C93fLc4am9dZwxOL7CTuOk2zwjrFAitFGJdEE6UVZ0gCnUgAAStTWD02rscQC
        LsFLgg+agiU+QGz94CqISkFhe4TAVFlpQFsGK1HDYBJq3CxmelCorWNQDxUrh84Kw74lBRqLUkZp
        xyB80FmJ2Z+ugSl6sdKM1l/fMEjDkE16bdIyafJwBCu1Dx2l8r8ZxrKDQlTu47Vx70hGzxy+MFVv
        zjbEafq0ic0Fp+tIqllZSg6fhNzxmW9E/oXIBKvW2NhNVxDmKgmwxCGkblJ4gHpw7giDVBzSmW/B
        Ycu1T/W0S9Qkx+kS146xZ9pNbnvr3H+6+Oh5zqYfvKzu5gWFOh5xXtZ8RUyhuf7cMZFqX9tviSeI
        3yAXnlLOeM6wtmJjuxk/EQuM6nvM0ErFByzm5x/nd78AAAD//wMACxE4rDgEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d354f3bac6a2db6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:03 GMT
      Function-Execution-Id:
      - 3nlc3wj162s6
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12706'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 66d327f88a68a624c177773f68f4b891;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.334s
      X-Request-Id:
      - f3095be59a426580ec0115ec5d36b430
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0RPyU4DMQy98xWWz+lopgUKuXMAie1WhFCVJh4mkMSj2AMVVf8dlfVmPb91hzGg
        RT849XlMs+Wtz/rBK7lL96uHVjbL68vt/cW0Ernq0SBvXsjrj6LxnMdEGrmgQV/JKQW03enZadcu
        FvOlwcyBElp8HnW2aE5mOtUNz9pF26HBSdwzod3hWDmPulZ+pSJou+OzucF/87/H/Nygsrr0Tz3p
        ur1BP3D0JGgfd5hJfn0rJ0KLTiSKuqKHllyUymGBA3XyCsrwXqMSuJS+kHUMArEog4M+JgLvUqIA
        POk4aaNbBVcC6EAFJqHD8a37KUzgOWdXQgM3DP1UdaAKX7lbBa4QS881u8MyiAJj5bcYKDS4N9jH
        EmVYV3LCBS2K8ogGYwm0Rdvun/ZHnwAAAP//AwDD25XCswEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d354fa17fe9225b-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:09 GMT
      Function-Execution-Id:
      - cl614305irol
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2430'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8c236125340ec6f59487a67f9c2b9403;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 712ms
      X-Request-Id:
      - 827645446a1f5d5bebbc9674a467c61b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2229'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d354fb61fe9106c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:10 GMT
      Function-Execution-Id:
      - 3nlcfyfhaftu
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '128'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 294f944123b74868401f4e449ad54a45;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 2bc46f89f6de013c6ecb039d0258e4e1
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write all task_ids into a file called output.txt and
      then use the task_complete command. No further context or information is provided.",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '222'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SaW6+6Srfm799PsbJu6TciIlWsOwQEBKxSQMROpyMHkYMghyqgdvZ37+B/Z3f3
        zUymkxmhqPGM3/OM+o9//fXX321cZsn49z9//V0Xw/j3/1g/S5/j8+9//vqf//rrr7/++o/fz//v
        yuwTZ2laNPnv8t8fiybN5r//+Yv/70/+70X//PX3ovYOPXJK1U8P3Q1AdX0vFNfcMR73JymHWRqp
        NJh7xdmxqDbgQfIJPeYu0ZiVbVRpH7ct2kSvsqeCKUpAHsyIbJ0JsoGPvSewM/rFatoszmRwwIaz
        JDyxrqB7z2pS5LBlqKR61LX9spMaCPkrDenxzt3i2R7jC3DHmaeWgZKeFeFiQO/GZ/QadsxZ2vn5
        BLtX2JKB3zQ9K3o3gg54WqjxDz0YWvNxgcPldcf207PLObyRBfaSrFBtmw0+iw4vFSatxOjZKq5s
        ai+FCORGYfQQHt1++8UbBCbnMaFtdxH8cWyaDqCxw1iXB76fH1OO4EkpD1iJw4+zHMrGhl34mtFS
        nxo2PSWpgyFKUuqfP6M/vKDAQxfZPrWWjeqv66lD329CtHGUQ8mi0W0hc+4pkk4Rjpnx7SrpKG8t
        JHlTwKZ9GlbgW+lHeqzEC9jFumxBPL1G7BxrTZt4WhEQRk2LDwmJ+8m9iDaIa9/ASk4ctu2MsZJs
        Q9qTd3dO/XnY2BAul3Am++XZl6zPtAxsbzeNXmgmgOVBzgncsuxJj7639FRWvUK+fB48VmDk+dO5
        tjN4GJ8RNlVz6kky9x+owELAp8iywfzEzIPYOjtkgPsN+wb5M4CR6qT0rGbfeDZvhQAf5NCv/38p
        58aIElgYivr7vZ93lpZAvXj2RKCXkyMI8sTByUUKVbA1lhP3eFpQd6WASNdXX/aGzItAenk3jBIP
        g+VqmBaMehdRZdaUnhe9mwguyj7D0cct4zEcVQP4UQ8IR1LeHytVCqBx1Y5Y32l1P39Eg8Bz9g2x
        YbOypN/6o8AH0XqqIqdyaE26HNZ53mNnvmTa1M0VB82T/0Gz/iLlcLieAnjPNjk+TTCLF2y+dZkd
        XB/fQXb1t+qDejBOsxtZ4q4G80FKXDgttoVRKNnO9iMaA2j4b4wPUbPxl8kxdXgfegM77Im0RYR3
        FZYOdyIb99pr86eEEbxx6oANUbPi2ct6D+quGBAQ7zSwa0sBwvt7HLBy1I/+rrRfCVBVkZLGkst+
        bpOrsDnFJiSfhrB4/NWLoIkOTsX3qC359kRgmFgaxenu6/zqEwoxAWv9zKySFTzBq/1UqAGyQ7mA
        jWwDidsL1HrneTkuOJIg6RKIZlQKYJ4P2IXqpbrh45O3/MWlYgU2t++Z2nL2YUv2skLImx+HcEs1
        9cObqyVY98kR24/DOx4C1bJhs6m2OIzzJ1isbWXI5uY8YixejHg5BoUif4+QUKfkFIdXpySAifZM
        0TLfc3+2R/8C6fEgYkc3t+wTvJUKakJDqFX7Sdl71pBB4EkakdmpiYeqag2YyYcS23noazMNWQJK
        4xhQx3M4h3yhb0AArAo/uFbXlrwXDVCb6Z4euudhfb7pA7m7dKPnJa3K4dZVi+xn+UT1b1Wy8fHQ
        RZj72zPaNqrCpu64CcBpo1tof91x8cSbigG5hJMIb34n9lUfjQdf6luiJ2149EMlShE8PnsXm9t3
        HbPnnn/CPAILafBn8Un2UkKI7XeNtUVbwJSHJw8y6G4QcAqqLT5XFVD0uJCi0irK2aV2CLntOaF2
        xo1xt4UHEe7cT0q11zyzP/V3XABBU+p7/jJs9i4U1aJGMzDFnvWnvQXeaLtH3OvwidvhJurSwXYT
        6qNdWC5J+rhAack8vPYbf3oFniufH9WMz8nOKCekpwVEtYbxofCPGm/tLpVsP746xXioYia2EgTa
        w2uouguGeJYVQYHxA0jUzUajn3Pez6ByKGysSLGhxZOzDWAvulvy2GtSP4WnHQ8MIzmh7fD8lNT3
        awveOGWg2bvb+oOvXHV4oGQhm/2b9vN+m9vy0b+cqWnJWs80q80BshMfO7FzcIQhTRGEg2JQz5Tu
        5fLTw3nBT1TfcMbYrz/ye3mHJMv8aAQKZQElDghUL1SiTXfnI8Ei5Rd6L4Gpzf2VeHDtP1SJGlxO
        q35BfTKuGCGzd+bi4FzgtEMjdapOc9hDPIdgpinCWvdOHSrKRw+Gc/vE3ia2fv1TlxLucaJnNBzA
        9gsqQbqb9kTtPGQay5LxA2vrcqJa+Bj8YRLfrmyGGxe7Kf9a+9nSwt0eVFiv06ZkMrFsoL2PESot
        qetJqKoEfsDGoic1vvhLHBcICoZbYyfelWCpR+gBdXx11Lp5rTaMW8cA9NyJ9ISlRZsfD1cCE/Q9
        fE48xZkNu7PA+rxI4FvCyFI9EsifxJpaRpyXA4qoAD/a0ODbft/6S/N5DFBL1AUxj1sY7ZtUB33+
        POJjT7R+jshsyfMJiqt+69rW/5YcuD2FCTuhJ8XjUvYIWMciIO3HLX12lXsC2kk6EQHaVTk/QSvC
        lTcQlJdPP616Avikncgm8l7lckxZJw9AKEj1rTS2DHNTQCdCLpLlM2Vj/AQQHj9KhP0kDUAVqJYF
        3tTvsFk1tsZnaS9IVzgPZHq4glM1xwJBj9M3RF7XQyCHNgRr/0NlFEYluwDYwXnnb7CypZo/5/1B
        ALZkbLFTdaU2kX5OoHcTMqobkdkv6VGGUBD8HdmNz5PG7kJ4gUOJC4pZ2mjM1WcEfWH2sH28+tos
        Ka0Ib1EeYrTddM6IjUWAj7SWsPPGp5JfCp6Djl18kPwuvz7dM9CB4avfqTJoctnsX98QPkrxjS9C
        cAK0tO/Zb72p/iEXMLPa8+A7KV+ECxy/nMvdXME4d9/YMMwczL3sSxA/NyE9kc3itInZJbB5nXSM
        LWEuW+PEJDk77RqyaTAp52GjcvDdiD1O9XjbL/3JFuFan9SzJ7sc+uCgyrLRqIRzvymb6uE1AU2o
        CbYTLIA/+3vlE8Q3m6fGRl4X4BUnNWrN4QSWItQEKD3inOwjqwPTvbQRuBiLT5YRfth883cDpOdW
        RJRbRDbDdwdhlj5VxIxJiqfvp/Lgqh84ib3RIexj5XDJlBCrt/zGeBRRHsaPvYRRm7c+OZcplKAl
        2NTQriMbynEe4KsVcmrwLQLDcJsMWdAkB4kyPZfbLrMkqfeGF3Vuh1lju0Wv4DdlGTVErfUJgm0A
        3tvqil+IyT0Dw8MA6/ukiDOMmAiL6EGF7QVqu6xlk7fgUNKyu0tVU9r105jSBUYy96A/vduOtjPA
        nKII7R8P3qlTIKhyOUtXfPJ01ef3aVbBwxhF5Due1JiNToug70w1tqlfOGs9SfAcFC7W9rVVjtcE
        unvn/oBYOe+qeF75CJTf64We0LdlTAzaDuTRfsGoB+9+PheUAHp7fTGqjwRM+JlJ4Kf3P30bHueU
        A+ZWL9Fu1eudackt2FLAUVMRGn/awSATf/vFisZ3uWz6HQdRd+TpYS9Qf1p22APhV3uQ/hsewRS8
        Bh1y2A+w9pqvjA3BzMuf6/OM7WZ2/fmDOwPivTH++qXfGhyzoBtrXzJepZ0/+7drC+zhgemVGro2
        IODwUD0LJ+qCVvApfb+rH+9QC2ZVTMRNq0D9fniRVpd9n9EtE8Ef/xDjQKOxvrWkX709jsKXLY/d
        XQfJ5cpWf+PGcztVNkj2QYVfgzoydi80DmhvMyJVnTY98bmhgB5nbKgu2ByYza9sw6/WBoSt74P/
        SN/kxz/YVpQTmBqCePAh14Jso+OV5edaTeCmDBiC0v2sjdF+FuSsRoya1zIrl0lBT2nVH3wu+KVf
        cAwiqaT2EWOWmg695YEE7CbosCIEXzAZHLNBfK9zBBr31s/haOvQ6tWOGu1TiGe1maDMV+kbY/Vc
        lKxWeQnahXfEaji/tPHyOfJ/+HStD/anP2hOfUDS/t71y49fTOlkYS0Fqra99bEiNU/9hQ+mZIIp
        7/wPtJuww7oqE601OGBBXcIxVWIw9Ksf+/z2K7UD61n2+9c7+PVL/Fz95fIWxAXqw3uL5MTLnR//
        QQfXq7+uHadPsMzDbT3x+HzYq0wQ4UuBK2+j73WXxUuuqAls61ym1l7rGFENx4WIcl+sL/AbLxGS
        MpgV4gOBpPywP3piucCn5td3Wffzzwd8PaDpxuX9xBXlBKMo0Wh60Zue/vRdiAeAz4PPl5PRvATp
        t/8s09T8LVd6qlyd6AGfrjvOH46WK4B93LVUu46nfux51ZOjHiGMPWkPZkeMObBzq5T8/OucHvEA
        ysrtsSrRGsyb+mTsV79EvLY6+MKrO6jy098wsitB47AGPC/g8r5jlPd3qR8koYXgzJ9GinWbAHYS
        D08pyi88NlvyiRnxXyJIuPhE9mLGO9NP/4x2u6Waxy2A7V/fAL7vmURVTlAdYSc13I8vsKEOZrzU
        jzeEm8w7Y6tJh3Jq4CWXl3wqiBDykTNfra8E+f1mh5XOmONlvV94EXY12i53ryTyobpA+e1wFI2u
        4whNfFVhYQUJ1mzHZ1OtARs0p5aQDWJySavDkYeHu6hiPIppOaz8CyAJ8j/3uzwv30LCI33j834J
        /SE+sqfU59Hxl8eU6/7RYYAjj2au8GZfPtp14FFKb4wVzevXfu3Cm2XUFEN4crZX6y3BeXfdYHUT
        tyUtz20GxfSY/6nHuTozBZCtYGFnTFVn1cMOrvxM+Om8gCVCSybD45XS07ofZ+l7zqEjDwU2F8MB
        075vPVifA0JRgQGYBhaosENf5bd+2oyqbIJGDF+IpWocT5fr8QJfl3NO8f6NyxGeLx20RHLBhhnZ
        DutPsyV3L2Mmi4YCwKSuUOW1X2Bz3NCe1qQofnkRis7T4k+ydplAEevNr/777wlZFziEgUvR/rzp
        B7+VCbjV8UDP6CUD+jnLFbzrzxp9LrtBm+YBfSC3pFfSjs8IEFdXOSgeLxP1fvvVW+RKCuiBUSN5
        HNj6fpXf81HF/NzZliiSDn7+Vl/5bnzbiQilQzXRRLqPDvObXQKLVFjosa78kuoNyOGv3zqx89a+
        Qe4FP/5Fp2Cc4zHStALqY3DE5un78eeVR2Ej5ZdVb79sYdSzgPsOLjikW9ovafvgYDrkOY27hmqj
        5LwrCAEWqJqnR0fYXhIPjp8dxtrN0pzlFGws+AmTBX+bFMbLt1UWoBgVxVEnfrQRXdwE9Ed1j22j
        gPEUDrGw34ypjPFrjBjltjservWFtSTlAfnp0/ace2jH7jdnZxWWCotoOtPo5rUO6dgpAZqRJ2u+
        UMfzqheA2AcHZ89bWQ7uZbJBnS4vshVjoLH8pqlQyLQb1QKw0cYs8/RfXkGRh8x40eoQwUORcNgC
        y9tnxL+LUH65Kv7jh64m6OBDyyZs7ttDz7+gIACzCCIcXpxvPJeuxkF1wgJVOuMaE+vEZVDJHi8i
        324Xtqtdo5DkN4fwYQn2ZYfNr/7jXVL+eIQoy9p/lI4wS7LLHcN+Bjk6HjEiaRCzw0UzQP6pI2qs
        eclicvLw66eouU5Fydb6ktAUxeT9bgp/4VGNwFIacOWzq8Yy3hKhPpRbtBufX231vwhuU06j2oOv
        2TQPxgf2HnnRY4YPQBhZWAEebWw0VEc3XmLKF4CWJ0xPSq30ArktHZQPRUqVfbGJSSTlOgyajkfQ
        pAUjurdwEH+Cgtp8bwL+BTkenoSXhbXja9am6qwvIInx+Q8PDpc2r2D3VF2yLYDez3VxDCD/DEIa
        SQGvjVvgd9D7XDDZ9kQrBYNtVThjLSWCO1Ew99/DB671jTFiab9Y78cCnHsM0ehcrXi+uzcbhlf3
        S/3z4QNmRaslENvEpmoEaEwNGYrimofg4zVR/8svXLJGQxwlaT9f/a6CN01VqHnxbv5QBDSQVr9J
        f7wyzHf+An3CvbF5ndR+BzL8FPMZVtjyJdWn7+8tlGt2EajuJpMzew0vAl06xytPIra7XEwFvqVO
        QNaDs4Hwy9ssedkSUQoCR5Bvwh+/jF+WMPfDj48dd6egZK6QA/hyXMAbtydS5bMOJr3dT5Dn9x5W
        Dl+H8f3rNEBDaQJ6FqocLDGFOVScPiCbPrTBrvfVCdKHotNgzXtWHr3AazOaiG97WfuTlyQ2SzAa
        Gr1faM+rsMfQp26nRv6qzwrQyl35R3/ZMfuKYO+gHf358Smq5ou85EtBprDTYtYuSgeQ5+tIZmQE
        9TujCPx45PDIDacNo1Mhrf4eG7t77c+l63Dw57/E2of9t8sU8efn0HgyRX+a3kcJikdvwuoIP4Dx
        z8QGpssf6C06zmDxTMGFPz5V57sSMzZsnlCb3yeS8M+30wve/JHPCNdr/oJLltt2COM0uVHHYlHf
        VQWogLdXnmueYmjLxfsuIIzqlp6eu7dPrjO/gOcm4LA23i/an/4W24ONnxep1tpD7bc/PV95J/P5
        8+TYcO6eXwLe+Luu11uEYX9jaHswiUbITeqk3/rpgp2xZVN8QhBs0mrVr5dGjwt0Ia9rEwIpf9Fq
        FWoe3IwvGW0/J8lhfq8k0CCkw7ZKc586yObBSwts7F+S3Ge1iwo4zXcR4/DG/OW0i20JTc/4T/9Z
        +TCDXNfmCIjnc8yqASSwtrwT1q/WAtqfH1/1Yu2fuGQ4+XaQeJ2LTV4TNZY+uQLsy9eD/vhGMLkt
        gbCMjT/+kf3y4eP4uK/+WAZFsPVE2TvjlCRJGZZLO3sRVALvRl0J+iX76b+5NUrEP8DMqPJICJwW
        y6KhOjTxvMVEgTQOMmoYpgKEJL1e5F++pR1fV4dN5aWVs0J6kGluTY2NLymXesz5+JQdQzb8/Ffj
        RvtfvhGTVqoUcOu9Nzbf7tRPg0me8MaOHj5U2ztgy3l4gldsS6S6HzPWqYaGYJY0C4IpvwFDl3ot
        qB0lwIaljw5b9k8VQsG5rnmi7i/sYxXQ/x4H6hrXbT+u+bT0lLwHtpf3rpyjeyrAFxcISFx5ec0P
        FtA8jRc+j5XMfn4ViorroE3J35ypNR8eDPRMJOw6fnsm6I0o1en0wrcdFR32mx/whWPiI6fovRBT
        WMDLJ+bJL5+eCiVVf/kgWcL55UzT+ywCQyhjrEz2HgzFYHcAuHWC+jf+9lMYnXI47HOLrnzOyD5j
        uuxpuo+E0LrFf+ZnqWtQfOQDDvTo2nLgfU8k6r44CujIuwJc+YRI9+TeC6fhmQAhO9ywxp81h4du
        EcGNuWkQ+5CDtgTprgLV5mtRXPJbh/LGQfjpAXavqALT7vLhwenYfIg4bL34cwtGCFf/h6Bx3ZaE
        RyNal9+mdnn89ouzV135q3UBRk9rU1K+rCd47HUZG5/U1rY7tjfgz+96u8D1eeH4sX7zG7SQ99ln
        oTpx8K5HNc6kfmBTTdsJumXbYTPgRG1a80a4+nVqus7DWTiqcPL+G6Kf/jK28gAkCQuxU+QLGM/T
        PoLmg97JfOUmnzx2dwNkppkQceWRP/OJffjRsPJ922Bc9wdY8w8CJ19nwucSBdDWbfLLM/wZhN0F
        +NEXrPlI4c/uU1T/5OUQ7jdgWvlIfjY5Itv93oqFl1cTcGOmh/ElauLBaO4C7Ls3xthDO4dIt28C
        qVX5ZPeed84Y2sSAUqG8MRrdXpsCxkWC8e2OZKfrkLV0zHMY35sczWHnO3wGzOU3X6Jq4QeA0i2T
        YK3GATaOEmRUpaEBSP28Y1VUqD+nTUmAlZsXApaTDpYE4w8UzdomP76Ymcp58KjyCZGXtOrJ8fQO
        5FjUrkRqU+qv98/D3/zw10//8ETNPAHjXVXGzMgjDsLZGDBuMCrZsKSLpJFFxprHeWDKX54o/+Yd
        v/kfszXbhpvscsaH7vmOZ1cLCLRqZ4uRTuuS/frvq+Vz7Gpars0X+W396gkb77nxGThtdRneaI62
        07sADJxkHbDqibF5H1HJTqMyyK2iNtidfB1sg7sygPPjM//Jl0aqvi1Jxy6hQbc9O3/mwRkmCenE
        pdLY4/mNJEG47jDmlgisPCMBosMP9mQ5Xr9fNiB3F29oXud7TPLRAFJTselpJBbYLjgSYVhCHs3V
        dsfY29lHkg9bk7ow2MeE5iwApI7u1Ei7XmPrPFhabnFI7roOAb00RSgHL16jhpBx/byUvStF9pKS
        2bFkn9Qj78l//04F/Oe//vrrf/1OGHzaNKvXgwFjNo///u+jAv9+ps9/87zwbyr8OYlAhmee/f3P
        fx1C+Pvbt5/v+L/Htsqa4e9//hLkP8cN/h7b8Vn/v5//a/22//zX/wEAAP//AwCSudlk4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d354fbb9f5ee26f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:11 GMT
      Function-Execution-Id:
      - 3nlcbuy9x6tc
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '129'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cc7a7da4c67571c671a190c5a49061be
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 29e70c8bae5a570ea157453402090b7a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file to determine what actions to take next.\",\n        \"reasoning\": \"The
      instructions_1.txt file contains the necessary information to determine the
      next steps.\",\n        \"plan\": \"- Read the instructions_1.txt file using
      the read_file command.\\n- Analyze the instructions to determine the next steps.\",\n        \"criticism\":
      \"I need to ensure that I fully understand the instructions before taking any
      actions.\",\n        \"speak\": \"I will start by reading the instructions_1.txt
      file to determine what actions to take next.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      task_id is 1111\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the task_ids into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6739'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yTPW/bMBCG9/4K4mbJkOx8QVvgIkCQoVO6VIXBUGeLEcljyVPiwNB/L2RJ/kqH
        DB15X+9zL8kd6AoKULVkZb1Jb38o+/H8kx7MU7PUT38etg3r77evy2f7+AYJ0MsrKh47ZoqsN8ia
        HCSgAkrGCor85u4mzxaLxTwBSxUaKGDjOV3MrlNuwwul2SLLIYE2yg1CsQMfyHpeMTXoIhTzq6u7
        BI7Dj4lsngATS3MM3VxnXQKqJq0wQvFrBxbjNDiQQShAxqgjS8c9JjlG16+wK50QQpTANbWbmmMJ
        hRiDYwK33AdLeBQOsRJMQnqPrhJco2AZm5XeR/sjtexbnvGWxVobFHIoc2LcBA9NsxKSU52AMpLT
        bjOI3e8ltNt8ReVdGyOkMfQuLPZFDaIXHKRqBK37zOmUOBPL0deT8Z+HrAOiaL0IGKkNCuN+G0tv
        KMhNKA63/M99vJFuWCUV91/2q40T0+Dximm1TyiyVrpqVpYunfCPZp707QUObh/azuFU0KyVjvby
        ZtHFNvRzJZ/h6jgC4QFdUQiozu75pKnvmCgqEVulMMZ1a8zHJUv0KJuJY7iE//O8BpEumZ746MWn
        F+6kxUH/3PMLThk2l79jSPS1xxlHxLP+y8+U53lelm6i3JOOwKXroEtgrZ2O9Wr4F1BAZPKQgHYV
        bqHIut/dt78AAAD//wMAL7vVP7oEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d354fc5799729fa-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:27 GMT
      Function-Execution-Id:
      - 3nlcyzv047k5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14804'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8b3d9221f1d9e38b3c9ee0090fa00b58
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86904'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.064s
      X-Request-Id:
      - dabbf986668eafcc29263fe6dea05525
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created\n\"\"\"\n\nLatest Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\":
      {\"name\": \"read_file\", \"args\": {\"filename\": \"instructions_1.txt\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=''Command read_file
      returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nThis
      task_id is 1111\\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\\nWrite
      all the task_ids into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\\n'', type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2971'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SQTY8TMQyG7/wKy+d01Kh0FuaGEFI5Ia04IFhUpYnbCc3Yo8RDu1v1v6NsP/bA
        LbGdx8+bE8aAHfreqR/GNHv45nk1ls9fwuOnvb4kfnn8uVodn4/TjzGhQdn8Ia/XF42XYUykURgN
        +kxOKWBn2w+tnS8WS2twkEAJO9yNOls0y5lOeSOz+WJu0eBU3I6wO+GYZRh1rbInLtjZ5cf3Bt/g
        90b7YFBFXXobbVt7Nuh7iZ4Kdr9OOFC5cbMkwg5dKbGoY62WwkpcE3yFgytwtQbHATJ5in/rBa4Q
        UIFMrla2MRF4lxIFeMLIRfPkq11Z20aP+oQNfO8JvAzDBaZT5ldYEt5B0Rx5B7IFpaMaiOzTFGrJ
        gbqyX8dQm9Za28DF7baEQvU45KgELqXbeB1Q+U9NJh0nvSgZOPTR99C7AiwKGyK+R34mNa+5tSeG
        qVA9XODXv7+nafBscBs5ln6dyRVh7LCojGgwcqAjdvPz7/O7fwAAAP//AwD1EwLPTwIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d35503ccd8361b6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:36 GMT
      Function-Execution-Id:
      - cl61en6i6ek8
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '4826'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 65337c39d2524881014e528e19f9fcea;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89278'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 481ms
      X-Request-Id:
      - 7837dd43f09e624edcc156d524828640
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created and received a message to read a file called \"instructions_1.txt\".
      The command returned a long string of text, including a task_id of 1111. I was
      instructed to write all task_ids into a file called \"output.txt\", which has
      not been created yet, and then use the task_complete command."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to append the task_id to the output.txt file and then complete the
      task.\",\n        \"reasoning\": \"Appending the task_id to the output.txt file
      will allow me to keep track of all the task_ids. Completing the task will allow
      me to free up resources and move on to the next task.\",\n        \"plan\":
      \"- Append the task_id to the output.txt file using the append_to_file command.\\n-
      Complete the task using the task_complete command.\",\n        \"criticism\":
      \"I need to ensure that the task_id is appended to the correct file and that
      the task is completed successfully.\",\n        \"speak\": \"I will append the
      task_id to the output.txt file and then complete the task.\"\n    },\n    \"command\":
      {\n        \"name\": \"append_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"1111\\n\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command append_to_file returned: Text appended successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5033'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SS3Y7TMBCF73kKa67dKmmVXZQ3QPwJFokLgirXmSam9jh4JktRlXdHaVIKWWm5
        4HZmfM53xnMGV0MJtjViQ+dX9+8tvTOCbz5kvHl4W1D72dqH15vvj/v8ETTE/Te0Mr9Y2xg6j+Ii
        gQab0AjWUOZ3L+/ybLst7jWEWKOHEppOVtt1sZI+7eMq22Y5aOjZNAjlGboUQyc7iUckhjLPs0LD
        TfzWKDYaJIrxt9KmuB802DY6iwzllzME5Ktwih6hBMPsWAzJiBlJkMYI54qUUqoCaWPftMIVlGou
        zg08yVis4JUixFpJVAlNraRF5Ygl9XYE5F2+lpOog/M4ztQomIIjvAwSnkSJ4eO6Av2nfELDkRw1
        k8enZ0RHauOI/xZU0hpRN7YO0yGmsPTpvKHJYqU+/gu/Z0fNZWJMupvdQzBUL3VtcuKs47DcERL3
        CSe657zw5FhYGaqvSUxQZj8t8bJoJ4p7a5H50Hv/c0nAHZrj1f2H8/4/v2fSHvT1MubgTw6DTMDJ
        9veSFmQmNct7mhrj7O35U8orxAVk5qlogEHDwZHjdjedDZTAEjvQ4KjGE5TZ8HV48QsAAP//AwDZ
        3/zt0AMAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d355062ef64233a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:48 GMT
      Function-Execution-Id:
      - cl61b96h8bes
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10948'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 29251b3fb390632787d14a3fcdda3420
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85989'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.674s
      X-Request-Id:
      - f5c3d954ecf826f1c7eff5e47749c76b
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. \"\"\"\n\n\nCONCISE SUMMARY:
      The text is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2391'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0RPTU8CMRC9+ysmcy4bFgS0V002JgY1HjwYQ0o7yxa6nbWdBRLCfzcgym3y5n0e
        0DvUaBsjtu3CYPZi4/KpytXHav74vqseVs+7V6poXW2/31AhL9dk5aIoLLddIPEcUaFNZIQc6nJ6
        Ny2H4/GsVNiyo4AaV50MxsVkIH1a8mA4HpaosM9mRagP2CVuO1kIbyhm1OXt3Ujh1fz/MbpXKCwm
        XKmTsjwqtA17Sxn15wFbyn++iQOhRpOzz2KinFpyFIqnBQbE5A0Iwy55ITAhnJGFdxl8FAYDtQ8E
        1oRADriXrpdC9gImOpCGIvSZTsev7lKYwHLbmugKmDPUfZKGEpxz9wKcwMeaU2tOy8Bn6BJvvSNX
        4FFh7aPPzSKRyRxRYxbuUKGPjvaoh8ev480PAAAA//8DABMfn9yzAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3550ba68e12a90-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:54 GMT
      Function-Execution-Id:
      - cl61fyljsfdk
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2386'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6cf67536bf589bd54cf274ab09f50a1f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 712ms
      X-Request-Id:
      - 0c7b44e6a400758420c41398b49d2f14
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      This task_id is 1111 nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61
      Write all the task_ids into the file output.txt. The file has not been created
      yet. After that, use the task_complete command. "], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2229'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        AP//AwAFJxVO5yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3550cf5f3e111e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:55 GMT
      Function-Execution-Id:
      - cl61em55d64v
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '41'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c6cd3b15cd04f6406a643c062f37fb2c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - a70ff674895d949421a24364e78cc184
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task to write all task_ids into a file called output.txt and
      then use the task_complete command. No further context or information is provided.",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '222'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3550d52d552220-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:02:57 GMT
      Function-Execution-Id:
      - cl61t68qwsxl
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1296'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86c4c618e7f1c241165df0e49ca56d25
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 109cf6bac433e04222d2de10f3dfd37f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created and received a message to read a file called \"instructions_1.txt\".
      The command returned a long string of text, including a task_id of 1111. I was
      instructed to write all task_ids into a file called \"output.txt\", which has
      not been created yet, and then use the task_complete command.\n\"\"\"\n\nLatest
      Development:\n\"\"\"\n[Message(role=''you'', content=''{\"command\": {\"name\":
      \"append_to_file\", \"args\": {\"filename\": \"output.txt\", \"text\": \"1111\\\\n\"}}}'',
      type=''ai_response''), Message(role=''your computer'', content=''Command append_to_file
      returned: Text appended successfully.'', type=''action_result'')]\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1155'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOTUvDQBCG7/6KZc5JyBpt2j0Kol4sgohgpWx3p822m50lO9GUkv8urdrehvfj
        mfcAzoIC02g2bfR5PTdh+/z49t539UM522/mL9Phvr6zZl9KyIBWWzT81ygMtdEjOwqQgelQM1pQ
        cjKdyLKq6lkGLVn0oGATOa+K25z7bkV5WZ1gfdIbBHWA2FEbecm0w5BAXctpBhf2Wa/KDJhY+0vy
        ZjpmYBpyBhOojwO0mP6pHXkEBToll1gHPm6kwBiO+59EhwbdF1qhhaG21cEKJqFjxOPVoGCddktn
        hZRSniyxdh6F0d6jFQugnmPPBQ+8gEK8NnjmfOskUm8MprTuvdD/QBz45P0+QVvAmMHaBZeaZYc6
        UQAFiSlCBi5YHECV4+d49QMAAP//AwAoGp9OpgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3550e80e6e2a0c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:03:01 GMT
      Function-Execution-Id:
      - cl611joko725
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2319'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0dfdf01c974068d5ca8e45b4639fbbe5
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89733'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 178ms
      X-Request-Id:
      - 5ada44650e152b0015a936d005fcfdfe
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. replace_in_file: Replace text or code in a file, args: \"filename\":
      \"<filename>\", \"old_text\": \"<old_text>\", \"new_text\": \"<new_text>\",
      \"occurrence_index\": \"<occurrence_index>\"\n6. write_to_file: Write to file,
      args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n7. delete_agent: Delete
      GPT Agent, args: \"key\": \"<key>\"\n8. get_hyperlinks: Get hyperlinks, args:
      \"url\": \"<url>\"\n9. get_text_summary: Get text summary, args: \"url\": \"<url>\",
      \"question\": \"<question>\"\n10. list_agents: List GPT Agents, args: () ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI received
      a command to append the task_id 1111 to a file called \"output.txt\". The command
      was successful and the text was appended."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to read the instructions_1.txt file to determine the next task.\",\n        \"reasoning\":
      \"The instructions_1.txt file contains the next task that I need to perform.\",\n        \"plan\":
      \"- Read the instructions_1.txt file using the read_file command.\",\n        \"criticism\":
      \"I need to ensure that the instructions_1.txt file exists and that I am able
      to read it successfully.\",\n        \"speak\": \"I will read the instructions_1.txt
      file to determine the next task.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nThis
      task_id is 1111\nnBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\nWrite
      all the task_ids into the file output.txt. The file has not been created yet.
      After that, use the task_complete command.\n"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6754'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
        a78LAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3550ff7923297a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:04:17 GMT
      Function-Execution-Id:
      - cl61mjttieuc
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '74737'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 92a53bd575ff449ab99ab72b83c3733c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86914'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.056s
      X-Request-Id:
      - 06417286641856c5646b35b8682c5c23
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are now the following python function: ```# This function takes a JSON string
      and ensures that it is parseable and fully compliant with the provided schema.
      If an object or field specified in the schema isn''t contained within the correct
      JSON, it is omitted. The function also escapes any double quotes within JSON
      string values to ensure that they are valid. If the JSON string contains any
      None or NaN values, they are replaced with null before being parsed.\ndef fix_json(json_string:
      str, schema:str=None) -> str:```\n\nOnly respond with your `return` value."},
      {"role": "user", "content": "''''''{\n    \"thoughts\": {\n        \"text\":
      \"I need to write all the task_ids into the file output.txt and then use the
      task_complete command.\",\n        \"reasoning\": \"The instructions_1.txt file
      specifies that I need to write all the task_ids into the file output.txt and
      then use the task_complete command.\",\n        \"plan\": \"- Use the write_to_file
      command to write all the task_ids into the file output.txt.\\n- Use the task_complete
      command to complete the task.\",\n        \"criticism\": \"I need to ensure
      that the write_to_file command is successful and that the task_complete command
      is executed with the correct reason.\",\n        \"speak\": \"I will write all
      the task_ids into the file output.txt and then use the task_complete command.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"nBRNtp3FaBNfBMohNkyAxrVJ7UFF0lyth8Xizm1jrCOREOGRnWWMQ6olKtKX9niq0wOBTQN62ToY4cQPiQk3YN9fFCGmxaDX9g81AsqhQnGac72QfL41SnlJvhwgAUB52zTD26FeEvvHdiQ2aNhtMT9obgHNUkONEnO41EOpNI6jdwyLGaactp9GYV1PLbaRP5b1iD9z850KeNYDX9Qwca79isJS8jhuDkf0J7ELkpOH3PkmZkg5MsOYpSTuEc99ENQ522WJzrl9oAySp6IHGiQlsMnQe40FaRAvnQtiaAE24hzkJHT3x13NPGw2ZmJ518y2BtU5x1yQwG21NycSxOBLU17RnY8h6H8L7QGatTlfXjPrA5hsupWEpUT0sSTZYSHa6p3mShARajocbNd3xKFfnUyupNMBPd0EZnMrePoAuvGaK7gDP0cxp9k63lsfzh3udQPnvgmRERQThIOrrDZhZMa4kr1vXAVu07ZuhlNNbBUqZKcHmBYiBnIcDXNUvXuzPFBh9Vowou6MBJHpiNrvKluHy7GBTp7YsEqmGv0lH8wVaWfV0yG7nzrbt7QyhdbtQ0zF2PclXB0LNxV2rRA6FsevqoexFNqSkdgauUrQPHLHhvLNes8gRGMOLAhR8irH1e2jdbLD6dyYEnDJiS9HvlxNgbb19Smlt6MNoJKEAbkSOrrcq5wmo5aho4zEKTujRHqr6feECaTPF7zj69pQCudo4LkneFVUp1UrR6yicTU8Zf9ohZLWumvMi5brH8lOJiiF94cHzesfQz8PiX5f21RwZ5fyRSk9eJhVihcTLrjOwCuryXpy8eCfk12bgcsZoJd8Uqo001XTsv2CEn59uaGn2br4CxSXJgjxKE1mO4IcPPAx3qJbVknaP0MXdOjj9S8oRjquDle4RxlVnmqsozm4oTbjtFSuKIh8g4zPzdyuVH7I71s87xWxAhcppky6GOB2i4NDz4SZI6SeG3Icpu6ZuJZGeZ6CWb61\"\n        }\n    }\n},\n{\n    \"thoughts\":
      {\n        \"text\": \"I have completed the task and need to use the task_complete
      command.\",\n        \"reasoning\": \"The instructions_1.txt file specifies
      that I need to use the task_complete command to complete the task.\",\n        \"plan\":
      \"- Use the task_complete command to complete the task with the reason specified
      in the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that the task_complete command is executed with the correct reason.\",\n        \"speak\":
      \"I will use the task_complete command to complete the task.\"\n    },\n    \"command\":
      {\n        \"name\": \"task_complete\",\n        \"args\": {\n            \"reason\":
      \"All task_ids have been written to the output.txt file.\"\n        }\n    }\n}'''''',
      ''''''\n{\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    },\n    \"thoughts\":\n    {\n        \"text\":
      \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\": \"- short
      bulleted\n- list that conveys\n- long-term plan\",\n        \"criticism\": \"constructive
      self-criticism\",\n        \"speak\": \"thoughts summary to say to user\"\n    }\n}\n''''''"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3880'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2yPwW7CMBBE7/0Ka85OlBACxceeuFRUFVKlVhUy9kIMie3GG4SE+PcqVVt66G1H
        O/tm9gJnoWAazaaLbTZfmVgWH8vHyerwelyenh+GurRx8TI9rw+QCNsDGf6+yE3oYkvsgoeE6Ukz
        Wahydj8ri2paLyS6YKmFwj5yVuV1xkO/DVlRFSUkhqT3BHVB7EMXecPhSD5BlVVRS9zgt8VcggPr
        9o91MrlKmCY4Qwnq7YKO0g+3Dy1BQafkEmvPY8vgmfz4wbohsRu8GROEpZ3z7mt0STj/HU5CeyuM
        9j6w2JIYEtlcPLWkE4nYh5OzJLgh8ev/h5jjKjGK1Gx60il4KCQOERLOWzpDFdf3690nAAAA//8D
        AOYVOqGMAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3552deda381263-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:04:21 GMT
      Function-Execution-Id:
      - cl61r3342f6y
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1473'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - bc8940ccd1bd0e18ffff79a627da17f8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89088'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 608ms
      X-Request-Id:
      - b1757ff70448d4f734f537ea61228e31
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"1111 \"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '246'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOQUvDQBQG7/4K+c6bkDQxLXv0WktR8SRStpvXZHWzb919RSHkv0tB7XVghpnh
        emjY0Yidoi/Wexu7+Bj4eVi1m+rr5XO/fdjunvp7v9pBgY/vZOXXKC1P0ZM4DlCwiYxQD113m66u
        mrZrFSbuyUNjiFI05V0h53TkomqqGgrnbAaCnhETT1EOwh8UMnSzVrimr1hBWIz/B221KNiRnaUM
        /TpjovyXTOwJGiZnl8UEuQxyEAqX+ROf0y0HyiUWhZMLLo+HRCZzgEYWjlBwoadv6Gp5W25+AAAA
        //8DAEstrcYnAQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d3552feb9ad2a42-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:04:25 GMT
      Function-Execution-Id:
      - cl613hk7j3c7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '428'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 2917a5f200f9763054b3eef1d42cf981
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89467'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 354ms
      X-Request-Id:
      - f0d8c05fa0415a19744b2c2fd087bf23
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["1111 "], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '84'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d355307cfa9123a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:04:26 GMT
      Function-Execution-Id:
      - 3nlcyz1y6qbd
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '27'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e775b51ae8259e4f34ab4cfa1e185844;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - fb44de48ea8b6c46a289a80a36becc7d
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "four ones.", "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '87'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/test/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        mL3+n6//tdzrP//1fwAAAP//AwB5Sun34SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d35530d6fde8114-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Jun 2023 02:04:27 GMT
      Function-Execution-Id:
      - 3nlc1fh9vejt
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '193'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - ba22fe213468c707707cef0b237f9787
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f7cfa8ddb803b33613926666a59ef6bd
    status:
      code: 200
      message: OK
version: 1
